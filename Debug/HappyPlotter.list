
HappyPlotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b668  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800b7f8  0800b7f8  0000c7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be60  0800be60  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be60  0800be60  0000ce60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be68  0800be68  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be68  0800be68  0000ce68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be6c  0800be6c  0000ce6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800be70  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  200001d4  0800c044  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000908  0800c044  0000d908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015004  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ee  00000000  00000000  00022208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  00024af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f15  00000000  00000000  00025e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bc0  00000000  00000000  00026d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f78  00000000  00000000  0005091d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107e48  00000000  00000000  00066895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e6dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069d0  00000000  00000000  0016e720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001750f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7e0 	.word	0x0800b7e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800b7e0 	.word	0x0800b7e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fef8 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f826 	bl	800103c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ff0:	f000 f875 	bl	80010de <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff4:	f000 fa9a 	bl	800152c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff8:	f000 fa68 	bl	80014cc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ffc:	f000 f97a 	bl	80012f4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001000:	f000 fa16 	bl	8001430 <MX_TIM5_Init>
  MX_TIM4_Init();
 8001004:	f000 f9c6 	bl	8001394 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001008:	f000 f894 	bl	8001134 <MX_ADC1_Init>
  MX_ADC2_Init();
 800100c:	f000 f90c 	bl	8001228 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	//	sprintf(UART_buf, "LAB:STM32L476>>\n\r");
	//	HAL_UART_Transmit(&huart2, (unsigned char *)UART_buf, strlen(UART_buf), 1);
	SERIAL_Init(&huart2);
 8001010:	4806      	ldr	r0, [pc, #24]	@ (800102c <main+0x48>)
 8001012:	f000 faff 	bl	8001614 <SERIAL_Init>
	//	SERIAL_SendNL ();
	//	SERIAL_SendFloat(f);
	//	SERIAL_SendNL ();
	//	SERIAL_SendToPlot(tab_int, tab_int2, 3);

	HAL_TIM_Base_Start_IT(&htim3);
 8001016:	4806      	ldr	r0, [pc, #24]	@ (8001030 <main+0x4c>)
 8001018:	f003 fdf2 	bl	8004c00 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 800101c:	4805      	ldr	r0, [pc, #20]	@ (8001034 <main+0x50>)
 800101e:	f003 fdef 	bl	8004c00 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5);
 8001022:	4805      	ldr	r0, [pc, #20]	@ (8001038 <main+0x54>)
 8001024:	f003 fd84 	bl	8004b30 <HAL_TIM_Base_Start>
	// HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <main+0x44>
 800102c:	2000039c 	.word	0x2000039c
 8001030:	200002b8 	.word	0x200002b8
 8001034:	20000304 	.word	0x20000304
 8001038:	20000350 	.word	0x20000350

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b096      	sub	sp, #88	@ 0x58
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2244      	movs	r2, #68	@ 0x44
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f005 ff6b 	bl	8006f26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800105e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001062:	f002 f9fb 	bl	800345c <HAL_PWREx_ControlVoltageScaling>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800106c:	f000 facc 	bl	8001608 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001070:	2302      	movs	r3, #2
 8001072:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001078:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107a:	2310      	movs	r3, #16
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001082:	2302      	movs	r3, #2
 8001084:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001086:	2301      	movs	r3, #1
 8001088:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800108a:	230a      	movs	r3, #10
 800108c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800108e:	2307      	movs	r3, #7
 8001090:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001096:	2302      	movs	r3, #2
 8001098:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4618      	mov	r0, r3
 80010a0:	f002 fa32 	bl	8003508 <HAL_RCC_OscConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010aa:	f000 faad 	bl	8001608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ae:	230f      	movs	r3, #15
 80010b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b2:	2303      	movs	r3, #3
 80010b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	2104      	movs	r1, #4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fdfa 	bl	8003cc0 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010d2:	f000 fa99 	bl	8001608 <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3758      	adds	r7, #88	@ 0x58
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b0a2      	sub	sp, #136	@ 0x88
 80010e2:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2288      	movs	r2, #136	@ 0x88
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 ff1b 	bl	8006f26 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010fa:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010fc:	2302      	movs	r3, #2
 80010fe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001100:	2301      	movs	r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001104:	2308      	movs	r3, #8
 8001106:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001108:	2307      	movs	r3, #7
 800110a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001114:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001118:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4618      	mov	r0, r3
 800111e:	f002 fff3 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001128:	f000 fa6e 	bl	8001608 <Error_Handler>
  }
}
 800112c:	bf00      	nop
 800112e:	3788      	adds	r7, #136	@ 0x88
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001156:	4b30      	ldr	r3, [pc, #192]	@ (8001218 <MX_ADC1_Init+0xe4>)
 8001158:	4a30      	ldr	r2, [pc, #192]	@ (800121c <MX_ADC1_Init+0xe8>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800115c:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <MX_ADC1_Init+0xe4>)
 800115e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001162:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001164:	4b2c      	ldr	r3, [pc, #176]	@ (8001218 <MX_ADC1_Init+0xe4>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116a:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <MX_ADC1_Init+0xe4>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001170:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <MX_ADC1_Init+0xe4>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001176:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <MX_ADC1_Init+0xe4>)
 8001178:	2204      	movs	r2, #4
 800117a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800117c:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <MX_ADC1_Init+0xe4>)
 800117e:	2200      	movs	r2, #0
 8001180:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001182:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <MX_ADC1_Init+0xe4>)
 8001184:	2200      	movs	r2, #0
 8001186:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001188:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <MX_ADC1_Init+0xe4>)
 800118a:	2201      	movs	r2, #1
 800118c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118e:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <MX_ADC1_Init+0xe4>)
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001196:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <MX_ADC1_Init+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119c:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <MX_ADC1_Init+0xe4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001218 <MX_ADC1_Init+0xe4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <MX_ADC1_Init+0xe4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011b0:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <MX_ADC1_Init+0xe4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b8:	4817      	ldr	r0, [pc, #92]	@ (8001218 <MX_ADC1_Init+0xe4>)
 80011ba:	f001 f817 	bl	80021ec <HAL_ADC_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011c4:	f000 fa20 	bl	8001608 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4811      	ldr	r0, [pc, #68]	@ (8001218 <MX_ADC1_Init+0xe4>)
 80011d4:	f001 fd72 	bl	8002cbc <HAL_ADCEx_MultiModeConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011de:	f000 fa13 	bl	8001608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_ADC1_Init+0xec>)
 80011e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e6:	2306      	movs	r3, #6
 80011e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <MX_ADC1_Init+0xf0>)
 80011f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011f2:	2304      	movs	r3, #4
 80011f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	@ (8001218 <MX_ADC1_Init+0xe4>)
 8001200:	f001 f944 	bl	800248c <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800120a:	f000 f9fd 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	@ 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200001f0 	.word	0x200001f0
 800121c:	50040000 	.word	0x50040000
 8001220:	04300002 	.word	0x04300002
 8001224:	407f0000 	.word	0x407f0000

08001228 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800123e:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 8001240:	4a29      	ldr	r2, [pc, #164]	@ (80012e8 <MX_ADC2_Init+0xc0>)
 8001242:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001244:	4b27      	ldr	r3, [pc, #156]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 8001246:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800124a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800124c:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001252:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001258:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800125e:	4b21      	ldr	r3, [pc, #132]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 8001260:	2204      	movs	r2, #4
 8001262:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001264:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 8001266:	2200      	movs	r2, #0
 8001268:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800126a:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 800126c:	2200      	movs	r2, #0
 800126e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001270:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 8001272:	2201      	movs	r2, #1
 8001274:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001276:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127e:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 8001280:	2200      	movs	r2, #0
 8001282:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001284:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 8001286:	2200      	movs	r2, #0
 8001288:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800128a:	4b16      	ldr	r3, [pc, #88]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 8001294:	2200      	movs	r2, #0
 8001296:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012a0:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 80012a2:	f000 ffa3 	bl	80021ec <HAL_ADC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80012ac:	f000 f9ac 	bl	8001608 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_ADC2_Init+0xc4>)
 80012b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b4:	2306      	movs	r3, #6
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_ADC2_Init+0xc8>)
 80012be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c0:	2304      	movs	r3, #4
 80012c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_ADC2_Init+0xbc>)
 80012ce:	f001 f8dd 	bl	800248c <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80012d8:	f000 f996 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000254 	.word	0x20000254
 80012e8:	50040100 	.word	0x50040100
 80012ec:	04300002 	.word	0x04300002
 80012f0:	407f0000 	.word	0x407f0000

080012f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001312:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <MX_TIM3_Init+0x98>)
 8001314:	4a1e      	ldr	r2, [pc, #120]	@ (8001390 <MX_TIM3_Init+0x9c>)
 8001316:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8001318:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <MX_TIM3_Init+0x98>)
 800131a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800131e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <MX_TIM3_Init+0x98>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <MX_TIM3_Init+0x98>)
 8001328:	f241 3287 	movw	r2, #4999	@ 0x1387
 800132c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <MX_TIM3_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <MX_TIM3_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800133a:	4814      	ldr	r0, [pc, #80]	@ (800138c <MX_TIM3_Init+0x98>)
 800133c:	f003 fba0 	bl	8004a80 <HAL_TIM_Base_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001346:	f000 f95f 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800134e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	@ (800138c <MX_TIM3_Init+0x98>)
 8001358:	f003 fdc9 	bl	8004eee <HAL_TIM_ConfigClockSource>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001362:	f000 f951 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	@ (800138c <MX_TIM3_Init+0x98>)
 8001374:	f003 fff6 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800137e:	f000 f943 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200002b8 	.word	0x200002b8
 8001390:	40000400 	.word	0x40000400

08001394 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <MX_TIM4_Init+0x94>)
 80013b4:	4a1d      	ldr	r2, [pc, #116]	@ (800142c <MX_TIM4_Init+0x98>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000-1;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <MX_TIM4_Init+0x94>)
 80013ba:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80013be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_TIM4_Init+0x94>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 80013c6:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <MX_TIM4_Init+0x94>)
 80013c8:	2209      	movs	r2, #9
 80013ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <MX_TIM4_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_TIM4_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013d8:	4813      	ldr	r0, [pc, #76]	@ (8001428 <MX_TIM4_Init+0x94>)
 80013da:	f003 fb51 	bl	8004a80 <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80013e4:	f000 f910 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	@ (8001428 <MX_TIM4_Init+0x94>)
 80013f6:	f003 fd7a 	bl	8004eee <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001400:	f000 f902 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_TIM4_Init+0x94>)
 8001412:	f003 ffa7 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800141c:	f000 f8f4 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000304 	.word	0x20000304
 800142c:	40000800 	.word	0x40000800

08001430 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800144e:	4b1d      	ldr	r3, [pc, #116]	@ (80014c4 <MX_TIM5_Init+0x94>)
 8001450:	4a1d      	ldr	r2, [pc, #116]	@ (80014c8 <MX_TIM5_Init+0x98>)
 8001452:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80-1;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <MX_TIM5_Init+0x94>)
 8001456:	224f      	movs	r2, #79	@ 0x4f
 8001458:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <MX_TIM5_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001460:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <MX_TIM5_Init+0x94>)
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <MX_TIM5_Init+0x94>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <MX_TIM5_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001474:	4813      	ldr	r0, [pc, #76]	@ (80014c4 <MX_TIM5_Init+0x94>)
 8001476:	f003 fb03 	bl	8004a80 <HAL_TIM_Base_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001480:	f000 f8c2 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001488:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	4619      	mov	r1, r3
 8001490:	480c      	ldr	r0, [pc, #48]	@ (80014c4 <MX_TIM5_Init+0x94>)
 8001492:	f003 fd2c 	bl	8004eee <HAL_TIM_ConfigClockSource>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800149c:	f000 f8b4 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_TIM5_Init+0x94>)
 80014ae:	f003 ff59 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80014b8:	f000 f8a6 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000350 	.word	0x20000350
 80014c8:	40000c00 	.word	0x40000c00

080014cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <MX_USART2_UART_Init+0x58>)
 80014d2:	4a15      	ldr	r2, [pc, #84]	@ (8001528 <MX_USART2_UART_Init+0x5c>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80014d6:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <MX_USART2_UART_Init+0x58>)
 80014d8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80014dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <MX_USART2_UART_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <MX_USART2_UART_Init+0x58>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <MX_USART2_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <MX_USART2_UART_Init+0x58>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <MX_USART2_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <MX_USART2_UART_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001502:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <MX_USART2_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <MX_USART2_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <MX_USART2_UART_Init+0x58>)
 8001510:	f003 ffce 	bl	80054b0 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800151a:	f000 f875 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000039c 	.word	0x2000039c
 8001528:	40004400 	.word	0x40004400

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	4b2f      	ldr	r3, [pc, #188]	@ (8001600 <MX_GPIO_Init+0xd4>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	4a2e      	ldr	r2, [pc, #184]	@ (8001600 <MX_GPIO_Init+0xd4>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <MX_GPIO_Init+0xd4>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <MX_GPIO_Init+0xd4>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a28      	ldr	r2, [pc, #160]	@ (8001600 <MX_GPIO_Init+0xd4>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <MX_GPIO_Init+0xd4>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b23      	ldr	r3, [pc, #140]	@ (8001600 <MX_GPIO_Init+0xd4>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a22      	ldr	r2, [pc, #136]	@ (8001600 <MX_GPIO_Init+0xd4>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <MX_GPIO_Init+0xd4>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <MX_GPIO_Init+0xd4>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158e:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <MX_GPIO_Init+0xd4>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001596:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <MX_GPIO_Init+0xd4>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2120      	movs	r1, #32
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015aa:	f001 fef3 	bl	8003394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	480f      	ldr	r0, [pc, #60]	@ (8001604 <MX_GPIO_Init+0xd8>)
 80015c6:	f001 fd3b 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ca:	2320      	movs	r3, #32
 80015cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e4:	f001 fd2c 	bl	8003040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2103      	movs	r1, #3
 80015ec:	2028      	movs	r0, #40	@ 0x28
 80015ee:	f001 fcf0 	bl	8002fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015f2:	2028      	movs	r0, #40	@ 0x28
 80015f4:	f001 fd09 	bl	800300a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	@ 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	48000800 	.word	0x48000800

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <Error_Handler+0x8>

08001614 <SERIAL_Init>:

char gbuf[100];

// use it once for initialization
// send the handler of the UART you want to use
void SERIAL_Init(UART_HandleTypeDef *phuartInit){
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	phuart=phuartInit;
 800161c:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <SERIAL_Init+0x1c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000424 	.word	0x20000424

08001634 <SERIAL_SendInt>:
	taille=strlen(buf);
	if(taille>0)
		HAL_UART_Transmit(phuart, (unsigned char *)buf, taille, 1);
}

void SERIAL_SendInt(int n){
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	int taille=0;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
	taille=sprintf (gbuf,"%d",n);
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	490a      	ldr	r1, [pc, #40]	@ (800166c <SERIAL_SendInt+0x38>)
 8001644:	480a      	ldr	r0, [pc, #40]	@ (8001670 <SERIAL_SendInt+0x3c>)
 8001646:	f005 fc0b 	bl	8006e60 <siprintf>
 800164a:	60f8      	str	r0, [r7, #12]
	if(taille>0)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	dd07      	ble.n	8001662 <SERIAL_SendInt+0x2e>
		HAL_UART_Transmit(phuart, (unsigned char *)gbuf, taille, 1);
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <SERIAL_SendInt+0x40>)
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	b29a      	uxth	r2, r3
 800165a:	2301      	movs	r3, #1
 800165c:	4904      	ldr	r1, [pc, #16]	@ (8001670 <SERIAL_SendInt+0x3c>)
 800165e:	f003 ff75 	bl	800554c <HAL_UART_Transmit>
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	0800b7f8 	.word	0x0800b7f8
 8001670:	20000428 	.word	0x20000428
 8001674:	20000424 	.word	0x20000424

08001678 <SERIAL_SendNL>:
	taille=sprintf (gbuf, "%5.3f",v);
	if(taille>0)
		HAL_UART_Transmit(phuart, (unsigned char *)gbuf, taille, 1);
}

void SERIAL_SendNL(){
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	gbuf[0]=13;
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <SERIAL_SendNL+0x24>)
 800167e:	220d      	movs	r2, #13
 8001680:	701a      	strb	r2, [r3, #0]
	gbuf[1]=10;
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <SERIAL_SendNL+0x24>)
 8001684:	220a      	movs	r2, #10
 8001686:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(phuart, (unsigned char *)gbuf, 2, 1);
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <SERIAL_SendNL+0x28>)
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	2202      	movs	r2, #2
 8001690:	4902      	ldr	r1, [pc, #8]	@ (800169c <SERIAL_SendNL+0x24>)
 8001692:	f003 ff5b 	bl	800554c <HAL_UART_Transmit>

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000428 	.word	0x20000428
 80016a0:	20000424 	.word	0x20000424

080016a4 <SERIAL_SendTAB>:

void SERIAL_SendTAB(){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	gbuf[0]=9;
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <SERIAL_SendTAB+0x1c>)
 80016aa:	2209      	movs	r2, #9
 80016ac:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(phuart, (unsigned char *)gbuf, 1, 1);
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <SERIAL_SendTAB+0x20>)
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	2301      	movs	r3, #1
 80016b4:	2201      	movs	r2, #1
 80016b6:	4902      	ldr	r1, [pc, #8]	@ (80016c0 <SERIAL_SendTAB+0x1c>)
 80016b8:	f003 ff48 	bl	800554c <HAL_UART_Transmit>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000428 	.word	0x20000428
 80016c4:	20000424 	.word	0x20000424

080016c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <HAL_MspInit+0x44>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d2:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <HAL_MspInit+0x44>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016da:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <HAL_MspInit+0x44>)
 80016dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <HAL_MspInit+0x44>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ea:	4a08      	ldr	r2, [pc, #32]	@ (800170c <HAL_MspInit+0x44>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_MspInit+0x44>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	@ 0x30
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a33      	ldr	r2, [pc, #204]	@ (80017fc <HAL_ADC_MspInit+0xec>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12d      	bne.n	800178e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001732:	4b33      	ldr	r3, [pc, #204]	@ (8001800 <HAL_ADC_MspInit+0xf0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	4a31      	ldr	r2, [pc, #196]	@ (8001800 <HAL_ADC_MspInit+0xf0>)
 800173a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800173c:	4b30      	ldr	r3, [pc, #192]	@ (8001800 <HAL_ADC_MspInit+0xf0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d10b      	bne.n	800175c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001744:	4b2f      	ldr	r3, [pc, #188]	@ (8001804 <HAL_ADC_MspInit+0xf4>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001748:	4a2e      	ldr	r2, [pc, #184]	@ (8001804 <HAL_ADC_MspInit+0xf4>)
 800174a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800174e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001750:	4b2c      	ldr	r3, [pc, #176]	@ (8001804 <HAL_ADC_MspInit+0xf4>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175c:	4b29      	ldr	r3, [pc, #164]	@ (8001804 <HAL_ADC_MspInit+0xf4>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001760:	4a28      	ldr	r2, [pc, #160]	@ (8001804 <HAL_ADC_MspInit+0xf4>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001768:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <HAL_ADC_MspInit+0xf4>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001774:	2303      	movs	r3, #3
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001778:	230b      	movs	r3, #11
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	4820      	ldr	r0, [pc, #128]	@ (8001808 <HAL_ADC_MspInit+0xf8>)
 8001788:	f001 fc5a 	bl	8003040 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800178c:	e031      	b.n	80017f2 <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1e      	ldr	r2, [pc, #120]	@ (800180c <HAL_ADC_MspInit+0xfc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d12c      	bne.n	80017f2 <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001798:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <HAL_ADC_MspInit+0xf0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	4a18      	ldr	r2, [pc, #96]	@ (8001800 <HAL_ADC_MspInit+0xf0>)
 80017a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80017a2:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <HAL_ADC_MspInit+0xf0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d10b      	bne.n	80017c2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80017aa:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <HAL_ADC_MspInit+0xf4>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	4a15      	ldr	r2, [pc, #84]	@ (8001804 <HAL_ADC_MspInit+0xf4>)
 80017b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b6:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <HAL_ADC_MspInit+0xf4>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_ADC_MspInit+0xf4>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001804 <HAL_ADC_MspInit+0xf4>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <HAL_ADC_MspInit+0xf4>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017da:	2303      	movs	r3, #3
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017de:	230b      	movs	r3, #11
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4619      	mov	r1, r3
 80017ec:	4806      	ldr	r0, [pc, #24]	@ (8001808 <HAL_ADC_MspInit+0xf8>)
 80017ee:	f001 fc27 	bl	8003040 <HAL_GPIO_Init>
}
 80017f2:	bf00      	nop
 80017f4:	3730      	adds	r7, #48	@ 0x30
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	50040000 	.word	0x50040000
 8001800:	2000048c 	.word	0x2000048c
 8001804:	40021000 	.word	0x40021000
 8001808:	48000800 	.word	0x48000800
 800180c:	50040100 	.word	0x50040100

08001810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a23      	ldr	r2, [pc, #140]	@ (80018ac <HAL_TIM_Base_MspInit+0x9c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d114      	bne.n	800184c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001822:	4b23      	ldr	r3, [pc, #140]	@ (80018b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001826:	4a22      	ldr	r2, [pc, #136]	@ (80018b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6593      	str	r3, [r2, #88]	@ 0x58
 800182e:	4b20      	ldr	r3, [pc, #128]	@ (80018b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2101      	movs	r1, #1
 800183e:	201d      	movs	r0, #29
 8001840:	f001 fbc7 	bl	8002fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001844:	201d      	movs	r0, #29
 8001846:	f001 fbe0 	bl	800300a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800184a:	e02a      	b.n	80018a2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a18      	ldr	r2, [pc, #96]	@ (80018b4 <HAL_TIM_Base_MspInit+0xa4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d114      	bne.n	8001880 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001856:	4b16      	ldr	r3, [pc, #88]	@ (80018b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185a:	4a15      	ldr	r2, [pc, #84]	@ (80018b0 <HAL_TIM_Base_MspInit+0xa0>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6593      	str	r3, [r2, #88]	@ 0x58
 8001862:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2102      	movs	r1, #2
 8001872:	201e      	movs	r0, #30
 8001874:	f001 fbad 	bl	8002fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001878:	201e      	movs	r0, #30
 800187a:	f001 fbc6 	bl	800300a <HAL_NVIC_EnableIRQ>
}
 800187e:	e010      	b.n	80018a2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM5)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0c      	ldr	r2, [pc, #48]	@ (80018b8 <HAL_TIM_Base_MspInit+0xa8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10b      	bne.n	80018a2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <HAL_TIM_Base_MspInit+0xa0>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	4a08      	ldr	r2, [pc, #32]	@ (80018b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001890:	f043 0308 	orr.w	r3, r3, #8
 8001894:	6593      	str	r3, [r2, #88]	@ 0x58
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40000400 	.word	0x40000400
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40000800 	.word	0x40000800
 80018b8:	40000c00 	.word	0x40000c00

080018bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0ac      	sub	sp, #176	@ 0xb0
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2288      	movs	r2, #136	@ 0x88
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f005 fb22 	bl	8006f26 <memset>
  if(huart->Instance==USART2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a21      	ldr	r2, [pc, #132]	@ (800196c <HAL_UART_MspInit+0xb0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d13b      	bne.n	8001964 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018ec:	2302      	movs	r3, #2
 80018ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 fc05 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001904:	f7ff fe80 	bl	8001608 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <HAL_UART_MspInit+0xb4>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190c:	4a18      	ldr	r2, [pc, #96]	@ (8001970 <HAL_UART_MspInit+0xb4>)
 800190e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001912:	6593      	str	r3, [r2, #88]	@ 0x58
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <HAL_UART_MspInit+0xb4>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <HAL_UART_MspInit+0xb4>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001924:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <HAL_UART_MspInit+0xb4>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192c:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_UART_MspInit+0xb4>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001938:	230c      	movs	r3, #12
 800193a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001950:	2307      	movs	r3, #7
 8001952:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001960:	f001 fb6e 	bl	8003040 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001964:	bf00      	nop
 8001966:	37b0      	adds	r7, #176	@ 0xb0
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40004400 	.word	0x40004400
 8001970:	40021000 	.word	0x40021000

08001974 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <NMI_Handler+0x4>

0800197c <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <MemManage_Handler+0x4>

0800198c <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <UsageFault_Handler+0x4>

0800199c <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80019c6:	b580      	push	{r7, lr}
 80019c8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80019ca:	f000 fa63 	bl	8001e94 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <TIM3_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80019d8:	2120      	movs	r1, #32
 80019da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019de:	f001 fcf1 	bl	80033c4 <HAL_GPIO_TogglePin>
	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 80019e2:	4802      	ldr	r0, [pc, #8]	@ (80019ec <TIM3_IRQHandler+0x18>)
 80019e4:	f003 f97c 	bl	8004ce0 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */
	// uint32_t elapsed_time = TIM5->CNT;
	// SERIAL_SendInt(elapsed_time);
	// SERIAL_SendNL();
	/* USER CODE END TIM3_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200002b8 	.word	0x200002b8

080019f0 <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 80019f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019f4:	b088      	sub	sp, #32
 80019f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */
	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 80019f8:	4865      	ldr	r0, [pc, #404]	@ (8001b90 <TIM4_IRQHandler+0x1a0>)
 80019fa:	f003 f971 	bl	8004ce0 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */
	int t = TIM5->CNT;
 80019fe:	4b65      	ldr	r3, [pc, #404]	@ (8001b94 <TIM4_IRQHandler+0x1a4>)
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a02:	61fb      	str	r3, [r7, #28]
	if (sampleCount < N) {
 8001a04:	4b64      	ldr	r3, [pc, #400]	@ (8001b98 <TIM4_IRQHandler+0x1a8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b63      	cmp	r3, #99	@ 0x63
 8001a0a:	f300 808e 	bgt.w	8001b2a <TIM4_IRQHandler+0x13a>
		float A = 1000.0;
 8001a0e:	4b63      	ldr	r3, [pc, #396]	@ (8001b9c <TIM4_IRQHandler+0x1ac>)
 8001a10:	61bb      	str	r3, [r7, #24]
		float B = 500.0;
 8001a12:	4b63      	ldr	r3, [pc, #396]	@ (8001ba0 <TIM4_IRQHandler+0x1b0>)
 8001a14:	617b      	str	r3, [r7, #20]
		float Fa = 20.0;
 8001a16:	4b63      	ldr	r3, [pc, #396]	@ (8001ba4 <TIM4_IRQHandler+0x1b4>)
 8001a18:	613b      	str	r3, [r7, #16]
		float Fb = 50.0;
 8001a1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ba8 <TIM4_IRQHandler+0x1b8>)
 8001a1c:	60fb      	str	r3, [r7, #12]
		float ts = (float) t / 1000000.0;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a28:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8001bac <TIM4_IRQHandler+0x1bc>
 8001a2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a30:	edc7 7a02 	vstr	s15, [r7, #8]
		int a = (int) A * sin(2.0 * M_PI * Fa * ts);
 8001a34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3c:	ee17 0a90 	vmov	r0, s15
 8001a40:	f7fe fd70 	bl	8000524 <__aeabi_i2d>
 8001a44:	4604      	mov	r4, r0
 8001a46:	460d      	mov	r5, r1
 8001a48:	6938      	ldr	r0, [r7, #16]
 8001a4a:	f7fe fd7d 	bl	8000548 <__aeabi_f2d>
 8001a4e:	a34e      	add	r3, pc, #312	@ (adr r3, 8001b88 <TIM4_IRQHandler+0x198>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fdd0 	bl	80005f8 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4690      	mov	r8, r2
 8001a5e:	4699      	mov	r9, r3
 8001a60:	68b8      	ldr	r0, [r7, #8]
 8001a62:	f7fe fd71 	bl	8000548 <__aeabi_f2d>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4640      	mov	r0, r8
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	f7fe fdc3 	bl	80005f8 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	ec43 2b17 	vmov	d7, r2, r3
 8001a7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a7e:	eef0 0a67 	vmov.f32	s1, s15
 8001a82:	f008 fe7d 	bl	800a780 <sin>
 8001a86:	ec53 2b10 	vmov	r2, r3, d0
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	f7fe fdb3 	bl	80005f8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff f85d 	bl	8000b58 <__aeabi_d2iz>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	607b      	str	r3, [r7, #4]
		int b = (int) B * cos(2.0 * M_PI * Fb * ts);
 8001aa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aaa:	ee17 0a90 	vmov	r0, s15
 8001aae:	f7fe fd39 	bl	8000524 <__aeabi_i2d>
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	460d      	mov	r5, r1
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7fe fd46 	bl	8000548 <__aeabi_f2d>
 8001abc:	a332      	add	r3, pc, #200	@ (adr r3, 8001b88 <TIM4_IRQHandler+0x198>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fd99 	bl	80005f8 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4690      	mov	r8, r2
 8001acc:	4699      	mov	r9, r3
 8001ace:	68b8      	ldr	r0, [r7, #8]
 8001ad0:	f7fe fd3a 	bl	8000548 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4640      	mov	r0, r8
 8001ada:	4649      	mov	r1, r9
 8001adc:	f7fe fd8c 	bl	80005f8 <__aeabi_dmul>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	ec43 2b17 	vmov	d7, r2, r3
 8001ae8:	eeb0 0a47 	vmov.f32	s0, s14
 8001aec:	eef0 0a67 	vmov.f32	s1, s15
 8001af0:	f008 fdf2 	bl	800a6d8 <cos>
 8001af4:	ec53 2b10 	vmov	r2, r3, d0
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7fe fd7c 	bl	80005f8 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f7ff f826 	bl	8000b58 <__aeabi_d2iz>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	603b      	str	r3, [r7, #0]
		tabSin[sampleCount] = a;
 8001b10:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <TIM4_IRQHandler+0x1a8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4926      	ldr	r1, [pc, #152]	@ (8001bb0 <TIM4_IRQHandler+0x1c0>)
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		tabCos[sampleCount] = b;
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <TIM4_IRQHandler+0x1a8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4924      	ldr	r1, [pc, #144]	@ (8001bb4 <TIM4_IRQHandler+0x1c4>)
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001b28:	e021      	b.n	8001b6e <TIM4_IRQHandler+0x17e>
	} else if (sampleCount < 2 * N) {
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <TIM4_IRQHandler+0x1a8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001b30:	dc1d      	bgt.n	8001b6e <TIM4_IRQHandler+0x17e>
		SERIAL_SendInt(t);
 8001b32:	69f8      	ldr	r0, [r7, #28]
 8001b34:	f7ff fd7e 	bl	8001634 <SERIAL_SendInt>
		SERIAL_SendTAB();
 8001b38:	f7ff fdb4 	bl	80016a4 <SERIAL_SendTAB>
		SERIAL_SendInt(tabSin[sampleCount - N]);
 8001b3c:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <TIM4_IRQHandler+0x1a8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3b64      	subs	r3, #100	@ 0x64
 8001b42:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb0 <TIM4_IRQHandler+0x1c0>)
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fd73 	bl	8001634 <SERIAL_SendInt>
		SERIAL_SendTAB();
 8001b4e:	f7ff fda9 	bl	80016a4 <SERIAL_SendTAB>
		SERIAL_SendInt(tabCos[sampleCount - N]);
 8001b52:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <TIM4_IRQHandler+0x1a8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3b64      	subs	r3, #100	@ 0x64
 8001b58:	4a16      	ldr	r2, [pc, #88]	@ (8001bb4 <TIM4_IRQHandler+0x1c4>)
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fd68 	bl	8001634 <SERIAL_SendInt>
		SERIAL_SendNL();
 8001b64:	f7ff fd88 	bl	8001678 <SERIAL_SendNL>
		ITM_Port32(31) = 0;
 8001b68:	4b13      	ldr	r3, [pc, #76]	@ (8001bb8 <TIM4_IRQHandler+0x1c8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
	}

	sampleCount++;
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <TIM4_IRQHandler+0x1a8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	4a08      	ldr	r2, [pc, #32]	@ (8001b98 <TIM4_IRQHandler+0x1a8>)
 8001b76:	6013      	str	r3, [r2, #0]
	/* USER CODE END TIM4_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b82:	bf00      	nop
 8001b84:	f3af 8000 	nop.w
 8001b88:	54442d18 	.word	0x54442d18
 8001b8c:	401921fb 	.word	0x401921fb
 8001b90:	20000304 	.word	0x20000304
 8001b94:	40000c00 	.word	0x40000c00
 8001b98:	20000490 	.word	0x20000490
 8001b9c:	447a0000 	.word	0x447a0000
 8001ba0:	43fa0000 	.word	0x43fa0000
 8001ba4:	41a00000 	.word	0x41a00000
 8001ba8:	42480000 	.word	0x42480000
 8001bac:	49742400 	.word	0x49742400
 8001bb0:	20000494 	.word	0x20000494
 8001bb4:	20000624 	.word	0x20000624
 8001bb8:	e000007c 	.word	0xe000007c

08001bbc <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001bc0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001bc4:	f001 fc18 	bl	80033f8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */
	sampleCount = 0;
 8001bc8:	4b02      	ldr	r3, [pc, #8]	@ (8001bd4 <EXTI15_10_IRQHandler+0x18>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000490 	.word	0x20000490

08001bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return 1;
 8001bdc:	2301      	movs	r3, #1
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_kill>:

int _kill(int pid, int sig)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bf2:	f005 f9eb 	bl	8006fcc <__errno>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2216      	movs	r2, #22
 8001bfa:	601a      	str	r2, [r3, #0]
  return -1;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_exit>:

void _exit (int status)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ffe7 	bl	8001be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c1a:	bf00      	nop
 8001c1c:	e7fd      	b.n	8001c1a <_exit+0x12>

08001c1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e00a      	b.n	8001c46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c30:	f3af 8000 	nop.w
 8001c34:	4601      	mov	r1, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	60ba      	str	r2, [r7, #8]
 8001c3c:	b2ca      	uxtb	r2, r1
 8001c3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	dbf0      	blt.n	8001c30 <_read+0x12>
  }

  return len;
 8001c4e:	687b      	ldr	r3, [r7, #4]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e009      	b.n	8001c7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	60ba      	str	r2, [r7, #8]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbf1      	blt.n	8001c6a <_write+0x12>
  }
  return len;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_close>:

int _close(int file)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb8:	605a      	str	r2, [r3, #4]
  return 0;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_isatty>:

int _isatty(int file)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	@ (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f005 f950 	bl	8006fcc <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20018000 	.word	0x20018000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	200007b4 	.word	0x200007b4
 8001d60:	20000908 	.word	0x20000908

08001d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <SystemInit+0x20>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d6e:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <SystemInit+0x20>)
 8001d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d8c:	f7ff ffea 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d92:	490d      	ldr	r1, [pc, #52]	@ (8001dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d94:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <LoopForever+0xe>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001da8:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd4 <LoopForever+0x16>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001db6:	f005 f90f 	bl	8006fd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dba:	f7ff f913 	bl	8000fe4 <main>

08001dbe <LoopForever>:

LoopForever:
    b LoopForever
 8001dbe:	e7fe      	b.n	8001dbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001dcc:	0800be70 	.word	0x0800be70
  ldr r2, =_sbss
 8001dd0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001dd4:	20000908 	.word	0x20000908

08001dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC1_2_IRQHandler>
	...

08001ddc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <HAL_Init+0x3c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a0b      	ldr	r2, [pc, #44]	@ (8001e18 <HAL_Init+0x3c>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df2:	2003      	movs	r0, #3
 8001df4:	f001 f8e2 	bl	8002fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f000 f80f 	bl	8001e1c <HAL_InitTick>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	e001      	b.n	8001e0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e0a:	f7ff fc5d 	bl	80016c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40022000 	.word	0x40022000

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e28:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <HAL_InitTick+0x6c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d023      	beq.n	8001e78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e30:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <HAL_InitTick+0x70>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b14      	ldr	r3, [pc, #80]	@ (8001e88 <HAL_InitTick+0x6c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f001 f8ed 	bl	8003026 <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10f      	bne.n	8001e72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d809      	bhi.n	8001e6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f001 f8b7 	bl	8002fd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e64:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <HAL_InitTick+0x74>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e004      	b.n	8001e7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	e001      	b.n	8001e7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_IncTick+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_IncTick+0x24>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <HAL_IncTick+0x24>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	200007b8 	.word	0x200007b8

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	200007b8 	.word	0x200007b8

08001ed4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3360      	adds	r3, #96	@ 0x60
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <LL_ADC_SetOffset+0x44>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f74:	bf00      	nop
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	03fff000 	.word	0x03fff000

08001f84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3360      	adds	r3, #96	@ 0x60
 8001f92:	461a      	mov	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3360      	adds	r3, #96	@ 0x60
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fda:	bf00      	nop
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b087      	sub	sp, #28
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3330      	adds	r3, #48	@ 0x30
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	4413      	add	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	211f      	movs	r1, #31
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	401a      	ands	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0e9b      	lsrs	r3, r3, #26
 800201e:	f003 011f 	and.w	r1, r3, #31
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	431a      	orrs	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002032:	bf00      	nop
 8002034:	371c      	adds	r7, #28
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800203e:	b480      	push	{r7}
 8002040:	b087      	sub	sp, #28
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3314      	adds	r3, #20
 800204e:	461a      	mov	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	0e5b      	lsrs	r3, r3, #25
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	4413      	add	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	0d1b      	lsrs	r3, r3, #20
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2107      	movs	r1, #7
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	401a      	ands	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	0d1b      	lsrs	r3, r3, #20
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	431a      	orrs	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002088:	bf00      	nop
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ac:	43db      	mvns	r3, r3
 80020ae:	401a      	ands	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0318 	and.w	r3, r3, #24
 80020b6:	4908      	ldr	r1, [pc, #32]	@ (80020d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020b8:	40d9      	lsrs	r1, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	400b      	ands	r3, r1
 80020be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c2:	431a      	orrs	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	0007ffff 	.word	0x0007ffff

080020dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80020ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6093      	str	r3, [r2, #8]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002114:	d101      	bne.n	800211a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002138:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800213c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002160:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002164:	d101      	bne.n	800216a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <LL_ADC_IsEnabled+0x18>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <LL_ADC_IsEnabled+0x1a>
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d101      	bne.n	80021b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d101      	bne.n	80021dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b089      	sub	sp, #36	@ 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e130      	b.n	8002468 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002210:	2b00      	cmp	r3, #0
 8002212:	d109      	bne.n	8002228 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fa7b 	bl	8001710 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff67 	bl	8002100 <LL_ADC_IsDeepPowerDownEnabled>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d004      	beq.n	8002242 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff4d 	bl	80020dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ff82 	bl	8002150 <LL_ADC_IsInternalRegulatorEnabled>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d115      	bne.n	800227e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff66 	bl	8002128 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800225c:	4b84      	ldr	r3, [pc, #528]	@ (8002470 <HAL_ADC_Init+0x284>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	4a84      	ldr	r2, [pc, #528]	@ (8002474 <HAL_ADC_Init+0x288>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	3301      	adds	r3, #1
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002270:	e002      	b.n	8002278 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3b01      	subs	r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f9      	bne.n	8002272 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff64 	bl	8002150 <LL_ADC_IsInternalRegulatorEnabled>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10d      	bne.n	80022aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002292:	f043 0210 	orr.w	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff75 	bl	800219e <LL_ADC_REG_IsConversionOngoing>
 80022b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 80c9 	bne.w	8002456 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 80c5 	bne.w	8002456 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80022d4:	f043 0202 	orr.w	r2, r3, #2
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff49 	bl	8002178 <LL_ADC_IsEnabled>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d115      	bne.n	8002318 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022ec:	4862      	ldr	r0, [pc, #392]	@ (8002478 <HAL_ADC_Init+0x28c>)
 80022ee:	f7ff ff43 	bl	8002178 <LL_ADC_IsEnabled>
 80022f2:	4604      	mov	r4, r0
 80022f4:	4861      	ldr	r0, [pc, #388]	@ (800247c <HAL_ADC_Init+0x290>)
 80022f6:	f7ff ff3f 	bl	8002178 <LL_ADC_IsEnabled>
 80022fa:	4603      	mov	r3, r0
 80022fc:	431c      	orrs	r4, r3
 80022fe:	4860      	ldr	r0, [pc, #384]	@ (8002480 <HAL_ADC_Init+0x294>)
 8002300:	f7ff ff3a 	bl	8002178 <LL_ADC_IsEnabled>
 8002304:	4603      	mov	r3, r0
 8002306:	4323      	orrs	r3, r4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4619      	mov	r1, r3
 8002312:	485c      	ldr	r0, [pc, #368]	@ (8002484 <HAL_ADC_Init+0x298>)
 8002314:	f7ff fdde 	bl	8001ed4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7e5b      	ldrb	r3, [r3, #25]
 800231c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002322:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002328:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800232e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002336:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d106      	bne.n	8002354 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	3b01      	subs	r3, #1
 800234c:	045b      	lsls	r3, r3, #17
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002360:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002368:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	4b44      	ldr	r3, [pc, #272]	@ (8002488 <HAL_ADC_Init+0x29c>)
 8002378:	4013      	ands	r3, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	69b9      	ldr	r1, [r7, #24]
 8002380:	430b      	orrs	r3, r1
 8002382:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff1b 	bl	80021c4 <LL_ADC_INJ_IsConversionOngoing>
 800238e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d13d      	bne.n	8002412 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d13a      	bne.n	8002412 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023a0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023a8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023b8:	f023 0302 	bic.w	r3, r3, #2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	69b9      	ldr	r1, [r7, #24]
 80023c2:	430b      	orrs	r3, r1
 80023c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d118      	bne.n	8002402 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80023da:	f023 0304 	bic.w	r3, r3, #4
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023f2:	430a      	orrs	r2, r1
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	611a      	str	r2, [r3, #16]
 8002400:	e007      	b.n	8002412 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d10c      	bne.n	8002434 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	f023 010f 	bic.w	r1, r3, #15
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	1e5a      	subs	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	631a      	str	r2, [r3, #48]	@ 0x30
 8002432:	e007      	b.n	8002444 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 020f 	bic.w	r2, r2, #15
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002448:	f023 0303 	bic.w	r3, r3, #3
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	655a      	str	r2, [r3, #84]	@ 0x54
 8002454:	e007      	b.n	8002466 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245a:	f043 0210 	orr.w	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002466:	7ffb      	ldrb	r3, [r7, #31]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3724      	adds	r7, #36	@ 0x24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	20000000 	.word	0x20000000
 8002474:	053e2d63 	.word	0x053e2d63
 8002478:	50040000 	.word	0x50040000
 800247c:	50040100 	.word	0x50040100
 8002480:	50040200 	.word	0x50040200
 8002484:	50040300 	.word	0x50040300
 8002488:	fff0c007 	.word	0xfff0c007

0800248c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0b6      	sub	sp, #216	@ 0xd8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x22>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e3c9      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x7b6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fe6f 	bl	800219e <LL_ADC_REG_IsConversionOngoing>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 83aa 	bne.w	8002c1c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d824      	bhi.n	8002522 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	3b02      	subs	r3, #2
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d81b      	bhi.n	800251a <HAL_ADC_ConfigChannel+0x8e>
 80024e2:	a201      	add	r2, pc, #4	@ (adr r2, 80024e8 <HAL_ADC_ConfigChannel+0x5c>)
 80024e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	08002501 	.word	0x08002501
 80024f0:	08002509 	.word	0x08002509
 80024f4:	08002511 	.word	0x08002511
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80024f8:	230c      	movs	r3, #12
 80024fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80024fe:	e010      	b.n	8002522 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002500:	2312      	movs	r3, #18
 8002502:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002506:	e00c      	b.n	8002522 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002508:	2318      	movs	r3, #24
 800250a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800250e:	e008      	b.n	8002522 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002510:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002518:	e003      	b.n	8002522 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800251a:	2306      	movs	r3, #6
 800251c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002520:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002530:	f7ff fd59 	bl	8001fe6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fe30 	bl	800219e <LL_ADC_REG_IsConversionOngoing>
 800253e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fe3c 	bl	80021c4 <LL_ADC_INJ_IsConversionOngoing>
 800254c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002554:	2b00      	cmp	r3, #0
 8002556:	f040 81a4 	bne.w	80028a2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800255a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 819f 	bne.w	80028a2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6819      	ldr	r1, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	461a      	mov	r2, r3
 8002572:	f7ff fd64 	bl	800203e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	695a      	ldr	r2, [r3, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	08db      	lsrs	r3, r3, #3
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d00a      	beq.n	80025ae <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6919      	ldr	r1, [r3, #16]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025a8:	f7ff fcc8 	bl	8001f3c <LL_ADC_SetOffset>
 80025ac:	e179      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fce5 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <HAL_ADC_ConfigChannel+0x14e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fcda 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 80025d0:	4603      	mov	r3, r0
 80025d2:	0e9b      	lsrs	r3, r3, #26
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	e01e      	b.n	8002618 <HAL_ADC_ConfigChannel+0x18c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fccf 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002600:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e004      	b.n	8002616 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800260c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x1a4>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	e018      	b.n	8002662 <HAL_ADC_ConfigChannel+0x1d6>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002644:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002648:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800264c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002654:	2320      	movs	r3, #32
 8002656:	e004      	b.n	8002662 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002658:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002662:	429a      	cmp	r2, r3
 8002664:	d106      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fc9e 	bl	8001fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2101      	movs	r1, #1
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fc82 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10a      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x214>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2101      	movs	r1, #1
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fc77 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002696:	4603      	mov	r3, r0
 8002698:	0e9b      	lsrs	r3, r3, #26
 800269a:	f003 021f 	and.w	r2, r3, #31
 800269e:	e01e      	b.n	80026de <HAL_ADC_ConfigChannel+0x252>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fc6c 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80026be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80026c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80026ce:	2320      	movs	r3, #32
 80026d0:	e004      	b.n	80026dc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80026d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x26a>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	e018      	b.n	8002728 <HAL_ADC_ConfigChannel+0x29c>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800270a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800270e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002712:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800271a:	2320      	movs	r3, #32
 800271c:	e004      	b.n	8002728 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800271e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002728:	429a      	cmp	r2, r3
 800272a:	d106      	bne.n	800273a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2200      	movs	r2, #0
 8002732:	2101      	movs	r1, #1
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fc3b 	bl	8001fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2102      	movs	r1, #2
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fc1f 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002746:	4603      	mov	r3, r0
 8002748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10a      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x2da>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2102      	movs	r1, #2
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fc14 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 800275c:	4603      	mov	r3, r0
 800275e:	0e9b      	lsrs	r3, r3, #26
 8002760:	f003 021f 	and.w	r2, r3, #31
 8002764:	e01e      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x318>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2102      	movs	r1, #2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fc09 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002788:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800278c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002794:	2320      	movs	r3, #32
 8002796:	e004      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002798:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d105      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x330>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	e014      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x35a>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80027ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80027d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80027d8:	2320      	movs	r3, #32
 80027da:	e004      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80027dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d106      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2200      	movs	r2, #0
 80027f0:	2102      	movs	r1, #2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fbdc 	bl	8001fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2103      	movs	r1, #3
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fbc0 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002804:	4603      	mov	r3, r0
 8002806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x398>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2103      	movs	r1, #3
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fbb5 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 800281a:	4603      	mov	r3, r0
 800281c:	0e9b      	lsrs	r3, r3, #26
 800281e:	f003 021f 	and.w	r2, r3, #31
 8002822:	e017      	b.n	8002854 <HAL_ADC_ConfigChannel+0x3c8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2103      	movs	r1, #3
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fbaa 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002830:	4603      	mov	r3, r0
 8002832:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800283c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002846:	2320      	movs	r3, #32
 8002848:	e003      	b.n	8002852 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800284a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285c:	2b00      	cmp	r3, #0
 800285e:	d105      	bne.n	800286c <HAL_ADC_ConfigChannel+0x3e0>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	e011      	b.n	8002890 <HAL_ADC_ConfigChannel+0x404>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800287a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800287c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800287e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002884:	2320      	movs	r3, #32
 8002886:	e003      	b.n	8002890 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002890:	429a      	cmp	r2, r3
 8002892:	d106      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2200      	movs	r2, #0
 800289a:	2103      	movs	r1, #3
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fb87 	bl	8001fb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fc66 	bl	8002178 <LL_ADC_IsEnabled>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 8140 	bne.w	8002b34 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	461a      	mov	r2, r3
 80028c2:	f7ff fbe7 	bl	8002094 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	4a8f      	ldr	r2, [pc, #572]	@ (8002b08 <HAL_ADC_ConfigChannel+0x67c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	f040 8131 	bne.w	8002b34 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10b      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x46e>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	0e9b      	lsrs	r3, r3, #26
 80028e8:	3301      	adds	r3, #1
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2b09      	cmp	r3, #9
 80028f0:	bf94      	ite	ls
 80028f2:	2301      	movls	r3, #1
 80028f4:	2300      	movhi	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	e019      	b.n	800292e <HAL_ADC_ConfigChannel+0x4a2>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800290a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800290c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002912:	2320      	movs	r3, #32
 8002914:	e003      	b.n	800291e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	2b09      	cmp	r3, #9
 8002926:	bf94      	ite	ls
 8002928:	2301      	movls	r3, #1
 800292a:	2300      	movhi	r3, #0
 800292c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800292e:	2b00      	cmp	r3, #0
 8002930:	d079      	beq.n	8002a26 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293a:	2b00      	cmp	r3, #0
 800293c:	d107      	bne.n	800294e <HAL_ADC_ConfigChannel+0x4c2>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0e9b      	lsrs	r3, r3, #26
 8002944:	3301      	adds	r3, #1
 8002946:	069b      	lsls	r3, r3, #26
 8002948:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800294c:	e015      	b.n	800297a <HAL_ADC_ConfigChannel+0x4ee>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800295c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800295e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002966:	2320      	movs	r3, #32
 8002968:	e003      	b.n	8002972 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800296a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	3301      	adds	r3, #1
 8002974:	069b      	lsls	r3, r3, #26
 8002976:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_ADC_ConfigChannel+0x50e>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0e9b      	lsrs	r3, r3, #26
 800298c:	3301      	adds	r3, #1
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2101      	movs	r1, #1
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	e017      	b.n	80029ca <HAL_ADC_ConfigChannel+0x53e>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80029a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80029ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80029b2:	2320      	movs	r3, #32
 80029b4:	e003      	b.n	80029be <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80029b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2101      	movs	r1, #1
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	ea42 0103 	orr.w	r1, r2, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x564>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	3301      	adds	r3, #1
 80029e2:	f003 021f 	and.w	r2, r3, #31
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	051b      	lsls	r3, r3, #20
 80029ee:	e018      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x596>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80029fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a00:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002a08:	2320      	movs	r3, #32
 8002a0a:	e003      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	3301      	adds	r3, #1
 8002a16:	f003 021f 	and.w	r2, r3, #31
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	4413      	add	r3, r2
 8002a20:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a22:	430b      	orrs	r3, r1
 8002a24:	e081      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d107      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x5b6>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	0e9b      	lsrs	r3, r3, #26
 8002a38:	3301      	adds	r3, #1
 8002a3a:	069b      	lsls	r3, r3, #26
 8002a3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a40:	e015      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x5e2>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	e003      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	069b      	lsls	r3, r3, #26
 8002a6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x602>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	0e9b      	lsrs	r3, r3, #26
 8002a80:	3301      	adds	r3, #1
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2101      	movs	r1, #1
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	e017      	b.n	8002abe <HAL_ADC_ConfigChannel+0x632>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	61bb      	str	r3, [r7, #24]
  return result;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	e003      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	fab3 f383 	clz	r3, r3
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	2101      	movs	r1, #1
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	ea42 0103 	orr.w	r1, r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10d      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x65e>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	0e9b      	lsrs	r3, r3, #26
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f003 021f 	and.w	r2, r3, #31
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	3b1e      	subs	r3, #30
 8002ae2:	051b      	lsls	r3, r3, #20
 8002ae4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ae8:	e01e      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x69c>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	60fb      	str	r3, [r7, #12]
  return result;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d104      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002b02:	2320      	movs	r3, #32
 8002b04:	e006      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x688>
 8002b06:	bf00      	nop
 8002b08:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fab3 f383 	clz	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	3301      	adds	r3, #1
 8002b16:	f003 021f 	and.w	r2, r3, #31
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b1e      	subs	r3, #30
 8002b22:	051b      	lsls	r3, r3, #20
 8002b24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b28:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f7ff fa85 	bl	800203e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b44      	ldr	r3, [pc, #272]	@ (8002c4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d07a      	beq.n	8002c36 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b40:	4843      	ldr	r0, [pc, #268]	@ (8002c50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b42:	f7ff f9ed 	bl	8001f20 <LL_ADC_GetCommonPathInternalCh>
 8002b46:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a41      	ldr	r2, [pc, #260]	@ (8002c54 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d12c      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d126      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a3c      	ldr	r2, [pc, #240]	@ (8002c58 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_ADC_ConfigChannel+0x6e8>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c5c <HAL_ADC_ConfigChannel+0x7d0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d15d      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4834      	ldr	r0, [pc, #208]	@ (8002c50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b80:	f7ff f9bb 	bl	8001efa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b84:	4b36      	ldr	r3, [pc, #216]	@ (8002c60 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	4a36      	ldr	r2, [pc, #216]	@ (8002c64 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b9e:	e002      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f9      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bac:	e040      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c68 <HAL_ADC_ConfigChannel+0x7dc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d118      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d112      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a23      	ldr	r2, [pc, #140]	@ (8002c58 <HAL_ADC_ConfigChannel+0x7cc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_ADC_ConfigChannel+0x74c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a22      	ldr	r2, [pc, #136]	@ (8002c5c <HAL_ADC_ConfigChannel+0x7d0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d12d      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002be0:	4619      	mov	r1, r3
 8002be2:	481b      	ldr	r0, [pc, #108]	@ (8002c50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002be4:	f7ff f989 	bl	8001efa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002be8:	e024      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1f      	ldr	r2, [pc, #124]	@ (8002c6c <HAL_ADC_ConfigChannel+0x7e0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d120      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d11a      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a14      	ldr	r2, [pc, #80]	@ (8002c58 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d115      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c12:	4619      	mov	r1, r3
 8002c14:	480e      	ldr	r0, [pc, #56]	@ (8002c50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c16:	f7ff f970 	bl	8001efa <LL_ADC_SetCommonPathInternalCh>
 8002c1a:	e00c      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c20:	f043 0220 	orr.w	r2, r3, #32
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002c2e:	e002      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c30:	bf00      	nop
 8002c32:	e000      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	37d8      	adds	r7, #216	@ 0xd8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	80080000 	.word	0x80080000
 8002c50:	50040300 	.word	0x50040300
 8002c54:	c7520000 	.word	0xc7520000
 8002c58:	50040000 	.word	0x50040000
 8002c5c:	50040200 	.word	0x50040200
 8002c60:	20000000 	.word	0x20000000
 8002c64:	053e2d63 	.word	0x053e2d63
 8002c68:	cb840000 	.word	0xcb840000
 8002c6c:	80000001 	.word	0x80000001

08002c70 <LL_ADC_IsEnabled>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <LL_ADC_IsEnabled+0x18>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <LL_ADC_IsEnabled+0x1a>
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d101      	bne.n	8002cae <LL_ADC_REG_IsConversionOngoing+0x18>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b09f      	sub	sp, #124	@ 0x7c
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e093      	b.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a47      	ldr	r2, [pc, #284]	@ (8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d102      	bne.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cf4:	4b46      	ldr	r3, [pc, #280]	@ (8002e10 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	e001      	b.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d08:	f043 0220 	orr.w	r2, r3, #32
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e072      	b.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ffb9 	bl	8002c96 <LL_ADC_REG_IsConversionOngoing>
 8002d24:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ffb3 	bl	8002c96 <LL_ADC_REG_IsConversionOngoing>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d154      	bne.n	8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d151      	bne.n	8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d3c:	4b35      	ldr	r3, [pc, #212]	@ (8002e14 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002d3e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d02c      	beq.n	8002da2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d5a:	035b      	lsls	r3, r3, #13
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d62:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d64:	4829      	ldr	r0, [pc, #164]	@ (8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d66:	f7ff ff83 	bl	8002c70 <LL_ADC_IsEnabled>
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	4828      	ldr	r0, [pc, #160]	@ (8002e10 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d6e:	f7ff ff7f 	bl	8002c70 <LL_ADC_IsEnabled>
 8002d72:	4603      	mov	r3, r0
 8002d74:	431c      	orrs	r4, r3
 8002d76:	4828      	ldr	r0, [pc, #160]	@ (8002e18 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d78:	f7ff ff7a 	bl	8002c70 <LL_ADC_IsEnabled>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4323      	orrs	r3, r4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d137      	bne.n	8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d8c:	f023 030f 	bic.w	r3, r3, #15
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	6811      	ldr	r1, [r2, #0]
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	6892      	ldr	r2, [r2, #8]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d9e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002da0:	e028      	b.n	8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002daa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dae:	4817      	ldr	r0, [pc, #92]	@ (8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002db0:	f7ff ff5e 	bl	8002c70 <LL_ADC_IsEnabled>
 8002db4:	4604      	mov	r4, r0
 8002db6:	4816      	ldr	r0, [pc, #88]	@ (8002e10 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002db8:	f7ff ff5a 	bl	8002c70 <LL_ADC_IsEnabled>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	431c      	orrs	r4, r3
 8002dc0:	4815      	ldr	r0, [pc, #84]	@ (8002e18 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002dc2:	f7ff ff55 	bl	8002c70 <LL_ADC_IsEnabled>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4323      	orrs	r3, r4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d112      	bne.n	8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002dd6:	f023 030f 	bic.w	r3, r3, #15
 8002dda:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ddc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dde:	e009      	b.n	8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002df2:	e000      	b.n	8002df6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002df4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dfe:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	377c      	adds	r7, #124	@ 0x7c
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd90      	pop	{r4, r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	50040000 	.word	0x50040000
 8002e10:	50040100 	.word	0x50040100
 8002e14:	50040300 	.word	0x50040300
 8002e18:	50040200 	.word	0x50040200

08002e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4e:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	60d3      	str	r3, [r2, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e68:	4b04      	ldr	r3, [pc, #16]	@ (8002e7c <__NVIC_GetPriorityGrouping+0x18>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	f003 0307 	and.w	r3, r3, #7
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	db0b      	blt.n	8002eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	f003 021f 	and.w	r2, r3, #31
 8002e98:	4907      	ldr	r1, [pc, #28]	@ (8002eb8 <__NVIC_EnableIRQ+0x38>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000e100 	.word	0xe000e100

08002ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	6039      	str	r1, [r7, #0]
 8002ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	db0a      	blt.n	8002ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	490c      	ldr	r1, [pc, #48]	@ (8002f08 <__NVIC_SetPriority+0x4c>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	0112      	lsls	r2, r2, #4
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee4:	e00a      	b.n	8002efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	4908      	ldr	r1, [pc, #32]	@ (8002f0c <__NVIC_SetPriority+0x50>)
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	3b04      	subs	r3, #4
 8002ef4:	0112      	lsls	r2, r2, #4
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	440b      	add	r3, r1
 8002efa:	761a      	strb	r2, [r3, #24]
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000e100 	.word	0xe000e100
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	@ 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f1c3 0307 	rsb	r3, r3, #7
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	bf28      	it	cs
 8002f2e:	2304      	movcs	r3, #4
 8002f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3304      	adds	r3, #4
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d902      	bls.n	8002f40 <NVIC_EncodePriority+0x30>
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3b03      	subs	r3, #3
 8002f3e:	e000      	b.n	8002f42 <NVIC_EncodePriority+0x32>
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f44:	f04f 32ff 	mov.w	r2, #4294967295
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	401a      	ands	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f58:	f04f 31ff 	mov.w	r1, #4294967295
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	43d9      	mvns	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f68:	4313      	orrs	r3, r2
         );
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3724      	adds	r7, #36	@ 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f88:	d301      	bcc.n	8002f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e00f      	b.n	8002fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <SysTick_Config+0x40>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f96:	210f      	movs	r1, #15
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9c:	f7ff ff8e 	bl	8002ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa0:	4b05      	ldr	r3, [pc, #20]	@ (8002fb8 <SysTick_Config+0x40>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa6:	4b04      	ldr	r3, [pc, #16]	@ (8002fb8 <SysTick_Config+0x40>)
 8002fa8:	2207      	movs	r2, #7
 8002faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	e000e010 	.word	0xe000e010

08002fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ff29 	bl	8002e1c <__NVIC_SetPriorityGrouping>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe4:	f7ff ff3e 	bl	8002e64 <__NVIC_GetPriorityGrouping>
 8002fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	6978      	ldr	r0, [r7, #20]
 8002ff0:	f7ff ff8e 	bl	8002f10 <NVIC_EncodePriority>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff5d 	bl	8002ebc <__NVIC_SetPriority>
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	4603      	mov	r3, r0
 8003012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff31 	bl	8002e80 <__NVIC_EnableIRQ>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ffa2 	bl	8002f78 <SysTick_Config>
 8003034:	4603      	mov	r3, r0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800304e:	e17f      	b.n	8003350 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8171 	beq.w	800334a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d005      	beq.n	8003080 <HAL_GPIO_Init+0x40>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d130      	bne.n	80030e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030b6:	2201      	movs	r2, #1
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	f003 0201 	and.w	r2, r3, #1
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d118      	bne.n	8003120 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030f4:	2201      	movs	r2, #1
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	08db      	lsrs	r3, r3, #3
 800310a:	f003 0201 	and.w	r2, r3, #1
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b03      	cmp	r3, #3
 800312a:	d017      	beq.n	800315c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d123      	bne.n	80031b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	08da      	lsrs	r2, r3, #3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3208      	adds	r2, #8
 8003170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003174:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	220f      	movs	r2, #15
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	08da      	lsrs	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3208      	adds	r2, #8
 80031aa:	6939      	ldr	r1, [r7, #16]
 80031ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0203 	and.w	r2, r3, #3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80ac 	beq.w	800334a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003370 <HAL_GPIO_Init+0x330>)
 80031f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f6:	4a5e      	ldr	r2, [pc, #376]	@ (8003370 <HAL_GPIO_Init+0x330>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80031fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003370 <HAL_GPIO_Init+0x330>)
 8003200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800320a:	4a5a      	ldr	r2, [pc, #360]	@ (8003374 <HAL_GPIO_Init+0x334>)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	089b      	lsrs	r3, r3, #2
 8003210:	3302      	adds	r3, #2
 8003212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003216:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	220f      	movs	r2, #15
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003234:	d025      	beq.n	8003282 <HAL_GPIO_Init+0x242>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4f      	ldr	r2, [pc, #316]	@ (8003378 <HAL_GPIO_Init+0x338>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01f      	beq.n	800327e <HAL_GPIO_Init+0x23e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4e      	ldr	r2, [pc, #312]	@ (800337c <HAL_GPIO_Init+0x33c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d019      	beq.n	800327a <HAL_GPIO_Init+0x23a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a4d      	ldr	r2, [pc, #308]	@ (8003380 <HAL_GPIO_Init+0x340>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_GPIO_Init+0x236>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a4c      	ldr	r2, [pc, #304]	@ (8003384 <HAL_GPIO_Init+0x344>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00d      	beq.n	8003272 <HAL_GPIO_Init+0x232>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a4b      	ldr	r2, [pc, #300]	@ (8003388 <HAL_GPIO_Init+0x348>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d007      	beq.n	800326e <HAL_GPIO_Init+0x22e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4a      	ldr	r2, [pc, #296]	@ (800338c <HAL_GPIO_Init+0x34c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d101      	bne.n	800326a <HAL_GPIO_Init+0x22a>
 8003266:	2306      	movs	r3, #6
 8003268:	e00c      	b.n	8003284 <HAL_GPIO_Init+0x244>
 800326a:	2307      	movs	r3, #7
 800326c:	e00a      	b.n	8003284 <HAL_GPIO_Init+0x244>
 800326e:	2305      	movs	r3, #5
 8003270:	e008      	b.n	8003284 <HAL_GPIO_Init+0x244>
 8003272:	2304      	movs	r3, #4
 8003274:	e006      	b.n	8003284 <HAL_GPIO_Init+0x244>
 8003276:	2303      	movs	r3, #3
 8003278:	e004      	b.n	8003284 <HAL_GPIO_Init+0x244>
 800327a:	2302      	movs	r3, #2
 800327c:	e002      	b.n	8003284 <HAL_GPIO_Init+0x244>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_GPIO_Init+0x244>
 8003282:	2300      	movs	r3, #0
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	f002 0203 	and.w	r2, r2, #3
 800328a:	0092      	lsls	r2, r2, #2
 800328c:	4093      	lsls	r3, r2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003294:	4937      	ldr	r1, [pc, #220]	@ (8003374 <HAL_GPIO_Init+0x334>)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	3302      	adds	r3, #2
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003390 <HAL_GPIO_Init+0x350>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032c6:	4a32      	ldr	r2, [pc, #200]	@ (8003390 <HAL_GPIO_Init+0x350>)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032cc:	4b30      	ldr	r3, [pc, #192]	@ (8003390 <HAL_GPIO_Init+0x350>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032f0:	4a27      	ldr	r2, [pc, #156]	@ (8003390 <HAL_GPIO_Init+0x350>)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032f6:	4b26      	ldr	r3, [pc, #152]	@ (8003390 <HAL_GPIO_Init+0x350>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800331a:	4a1d      	ldr	r2, [pc, #116]	@ (8003390 <HAL_GPIO_Init+0x350>)
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003320:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <HAL_GPIO_Init+0x350>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003344:	4a12      	ldr	r2, [pc, #72]	@ (8003390 <HAL_GPIO_Init+0x350>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3301      	adds	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa22 f303 	lsr.w	r3, r2, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	f47f ae78 	bne.w	8003050 <HAL_GPIO_Init+0x10>
  }
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	40010000 	.word	0x40010000
 8003378:	48000400 	.word	0x48000400
 800337c:	48000800 	.word	0x48000800
 8003380:	48000c00 	.word	0x48000c00
 8003384:	48001000 	.word	0x48001000
 8003388:	48001400 	.word	0x48001400
 800338c:	48001800 	.word	0x48001800
 8003390:	40010400 	.word	0x40010400

08003394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
 80033a0:	4613      	mov	r3, r2
 80033a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033a4:	787b      	ldrb	r3, [r7, #1]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033b0:	e002      	b.n	80033b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033b2:	887a      	ldrh	r2, [r7, #2]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4013      	ands	r3, r2
 80033dc:	041a      	lsls	r2, r3, #16
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	43d9      	mvns	r1, r3
 80033e2:	887b      	ldrh	r3, [r7, #2]
 80033e4:	400b      	ands	r3, r1
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	619a      	str	r2, [r3, #24]
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003402:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d006      	beq.n	800341c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800340e:	4a05      	ldr	r2, [pc, #20]	@ (8003424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003410:	88fb      	ldrh	r3, [r7, #6]
 8003412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f806 	bl	8003428 <HAL_GPIO_EXTI_Callback>
  }
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40010400 	.word	0x40010400

08003428 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003444:	4b04      	ldr	r3, [pc, #16]	@ (8003458 <HAL_PWREx_GetVoltageRange+0x18>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40007000 	.word	0x40007000

0800345c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800346a:	d130      	bne.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800346c:	4b23      	ldr	r3, [pc, #140]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003478:	d038      	beq.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800347a:	4b20      	ldr	r3, [pc, #128]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003482:	4a1e      	ldr	r2, [pc, #120]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003484:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003488:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800348a:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2232      	movs	r2, #50	@ 0x32
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	4a1b      	ldr	r2, [pc, #108]	@ (8003504 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0c9b      	lsrs	r3, r3, #18
 800349c:	3301      	adds	r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a0:	e002      	b.n	80034a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a8:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b4:	d102      	bne.n	80034bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f2      	bne.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034bc:	4b0f      	ldr	r3, [pc, #60]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c8:	d110      	bne.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e00f      	b.n	80034ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ce:	4b0b      	ldr	r3, [pc, #44]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034da:	d007      	beq.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034dc:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034e4:	4a05      	ldr	r2, [pc, #20]	@ (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40007000 	.word	0x40007000
 8003500:	20000000 	.word	0x20000000
 8003504:	431bde83 	.word	0x431bde83

08003508 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e3ca      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800351a:	4b97      	ldr	r3, [pc, #604]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003524:	4b94      	ldr	r3, [pc, #592]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80e4 	beq.w	8003704 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_RCC_OscConfig+0x4a>
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b0c      	cmp	r3, #12
 8003546:	f040 808b 	bne.w	8003660 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b01      	cmp	r3, #1
 800354e:	f040 8087 	bne.w	8003660 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003552:	4b89      	ldr	r3, [pc, #548]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <HAL_RCC_OscConfig+0x62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e3a2      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1a      	ldr	r2, [r3, #32]
 800356e:	4b82      	ldr	r3, [pc, #520]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_RCC_OscConfig+0x7c>
 800357a:	4b7f      	ldr	r3, [pc, #508]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003582:	e005      	b.n	8003590 <HAL_RCC_OscConfig+0x88>
 8003584:	4b7c      	ldr	r3, [pc, #496]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003590:	4293      	cmp	r3, r2
 8003592:	d223      	bcs.n	80035dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fd55 	bl	8004048 <RCC_SetFlashLatencyFromMSIRange>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e383      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035a8:	4b73      	ldr	r3, [pc, #460]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a72      	ldr	r2, [pc, #456]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035ae:	f043 0308 	orr.w	r3, r3, #8
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b70      	ldr	r3, [pc, #448]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	496d      	ldr	r1, [pc, #436]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035c6:	4b6c      	ldr	r3, [pc, #432]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	4968      	ldr	r1, [pc, #416]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
 80035da:	e025      	b.n	8003628 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035dc:	4b66      	ldr	r3, [pc, #408]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a65      	ldr	r2, [pc, #404]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035e2:	f043 0308 	orr.w	r3, r3, #8
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b63      	ldr	r3, [pc, #396]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	4960      	ldr	r1, [pc, #384]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	495b      	ldr	r1, [pc, #364]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fd15 	bl	8004048 <RCC_SetFlashLatencyFromMSIRange>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e343      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003628:	f000 fc4a 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b52      	ldr	r3, [pc, #328]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	4950      	ldr	r1, [pc, #320]	@ (800377c <HAL_RCC_OscConfig+0x274>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	4a4e      	ldr	r2, [pc, #312]	@ (8003780 <HAL_RCC_OscConfig+0x278>)
 8003646:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003648:	4b4e      	ldr	r3, [pc, #312]	@ (8003784 <HAL_RCC_OscConfig+0x27c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7fe fbe5 	bl	8001e1c <HAL_InitTick>
 8003652:	4603      	mov	r3, r0
 8003654:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d052      	beq.n	8003702 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	e327      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d032      	beq.n	80036ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003668:	4b43      	ldr	r3, [pc, #268]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a42      	ldr	r2, [pc, #264]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003674:	f7fe fc22 	bl	8001ebc <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800367c:	f7fe fc1e 	bl	8001ebc <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e310      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800368e:	4b3a      	ldr	r3, [pc, #232]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800369a:	4b37      	ldr	r3, [pc, #220]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a36      	ldr	r2, [pc, #216]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036a0:	f043 0308 	orr.w	r3, r3, #8
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b34      	ldr	r3, [pc, #208]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4931      	ldr	r1, [pc, #196]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	492c      	ldr	r1, [pc, #176]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
 80036cc:	e01a      	b.n	8003704 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a29      	ldr	r2, [pc, #164]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036da:	f7fe fbef 	bl	8001ebc <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036e2:	f7fe fbeb 	bl	8001ebc <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e2dd      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036f4:	4b20      	ldr	r3, [pc, #128]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f0      	bne.n	80036e2 <HAL_RCC_OscConfig+0x1da>
 8003700:	e000      	b.n	8003704 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003702:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d074      	beq.n	80037fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b08      	cmp	r3, #8
 8003714:	d005      	beq.n	8003722 <HAL_RCC_OscConfig+0x21a>
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d10e      	bne.n	800373a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d10b      	bne.n	800373a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003722:	4b15      	ldr	r3, [pc, #84]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d064      	beq.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d160      	bne.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e2ba      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003742:	d106      	bne.n	8003752 <HAL_RCC_OscConfig+0x24a>
 8003744:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0b      	ldr	r2, [pc, #44]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800374a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	e026      	b.n	80037a0 <HAL_RCC_OscConfig+0x298>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800375a:	d115      	bne.n	8003788 <HAL_RCC_OscConfig+0x280>
 800375c:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a05      	ldr	r2, [pc, #20]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 8003762:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b03      	ldr	r3, [pc, #12]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a02      	ldr	r2, [pc, #8]	@ (8003778 <HAL_RCC_OscConfig+0x270>)
 800376e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	e014      	b.n	80037a0 <HAL_RCC_OscConfig+0x298>
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000
 800377c:	0800b810 	.word	0x0800b810
 8003780:	20000000 	.word	0x20000000
 8003784:	20000004 	.word	0x20000004
 8003788:	4ba0      	ldr	r3, [pc, #640]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a9f      	ldr	r2, [pc, #636]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800378e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b9d      	ldr	r3, [pc, #628]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a9c      	ldr	r2, [pc, #624]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800379a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800379e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fe fb88 	bl	8001ebc <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fe fb84 	bl	8001ebc <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	@ 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e276      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c2:	4b92      	ldr	r3, [pc, #584]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x2a8>
 80037ce:	e014      	b.n	80037fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fe fb74 	bl	8001ebc <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fe fb70 	bl	8001ebc <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	@ 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e262      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ea:	4b88      	ldr	r3, [pc, #544]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x2d0>
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d060      	beq.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d005      	beq.n	8003818 <HAL_RCC_OscConfig+0x310>
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d119      	bne.n	8003846 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d116      	bne.n	8003846 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003818:	4b7c      	ldr	r3, [pc, #496]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_OscConfig+0x328>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e23f      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b76      	ldr	r3, [pc, #472]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	4973      	ldr	r1, [pc, #460]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003844:	e040      	b.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d023      	beq.n	8003896 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384e:	4b6f      	ldr	r3, [pc, #444]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a6e      	ldr	r2, [pc, #440]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7fe fb2f 	bl	8001ebc <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003862:	f7fe fb2b 	bl	8001ebc <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e21d      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003874:	4b65      	ldr	r3, [pc, #404]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003880:	4b62      	ldr	r3, [pc, #392]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	495f      	ldr	r1, [pc, #380]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
 8003894:	e018      	b.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003896:	4b5d      	ldr	r3, [pc, #372]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a5c      	ldr	r2, [pc, #368]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800389c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fe fb0b 	bl	8001ebc <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fe fb07 	bl	8001ebc <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1f9      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038bc:	4b53      	ldr	r3, [pc, #332]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d03c      	beq.n	800394e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01c      	beq.n	8003916 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038dc:	4b4b      	ldr	r3, [pc, #300]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e2:	4a4a      	ldr	r2, [pc, #296]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fe fae6 	bl	8001ebc <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fe fae2 	bl	8001ebc <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1d4      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003906:	4b41      	ldr	r3, [pc, #260]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <HAL_RCC_OscConfig+0x3ec>
 8003914:	e01b      	b.n	800394e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003916:	4b3d      	ldr	r3, [pc, #244]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800391c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fe fac9 	bl	8001ebc <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392e:	f7fe fac5 	bl	8001ebc <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e1b7      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003940:	4b32      	ldr	r3, [pc, #200]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1ef      	bne.n	800392e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80a6 	beq.w	8003aa8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395c:	2300      	movs	r3, #0
 800395e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003960:	4b2a      	ldr	r3, [pc, #168]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10d      	bne.n	8003988 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396c:	4b27      	ldr	r3, [pc, #156]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003970:	4a26      	ldr	r2, [pc, #152]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003976:	6593      	str	r3, [r2, #88]	@ 0x58
 8003978:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003984:	2301      	movs	r3, #1
 8003986:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003988:	4b21      	ldr	r3, [pc, #132]	@ (8003a10 <HAL_RCC_OscConfig+0x508>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d118      	bne.n	80039c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003994:	4b1e      	ldr	r3, [pc, #120]	@ (8003a10 <HAL_RCC_OscConfig+0x508>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1d      	ldr	r2, [pc, #116]	@ (8003a10 <HAL_RCC_OscConfig+0x508>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800399e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a0:	f7fe fa8c 	bl	8001ebc <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fe fa88 	bl	8001ebc <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e17a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ba:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <HAL_RCC_OscConfig+0x508>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d108      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4d8>
 80039ce:	4b0f      	ldr	r3, [pc, #60]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d4:	4a0d      	ldr	r2, [pc, #52]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039de:	e029      	b.n	8003a34 <HAL_RCC_OscConfig+0x52c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d115      	bne.n	8003a14 <HAL_RCC_OscConfig+0x50c>
 80039e8:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ee:	4a07      	ldr	r2, [pc, #28]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039f8:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fe:	4a03      	ldr	r2, [pc, #12]	@ (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a08:	e014      	b.n	8003a34 <HAL_RCC_OscConfig+0x52c>
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40007000 	.word	0x40007000
 8003a14:	4b9c      	ldr	r3, [pc, #624]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1a:	4a9b      	ldr	r2, [pc, #620]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a24:	4b98      	ldr	r3, [pc, #608]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2a:	4a97      	ldr	r2, [pc, #604]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d016      	beq.n	8003a6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fe fa3e 	bl	8001ebc <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a44:	f7fe fa3a 	bl	8001ebc <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e12a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ed      	beq.n	8003a44 <HAL_RCC_OscConfig+0x53c>
 8003a68:	e015      	b.n	8003a96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6a:	f7fe fa27 	bl	8001ebc <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7fe fa23 	bl	8001ebc <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e113      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a88:	4b7f      	ldr	r3, [pc, #508]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1ed      	bne.n	8003a72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a96:	7ffb      	ldrb	r3, [r7, #31]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9c:	4b7a      	ldr	r3, [pc, #488]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa0:	4a79      	ldr	r2, [pc, #484]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aa6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80fe 	beq.w	8003cae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	f040 80d0 	bne.w	8003c5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003abc:	4b72      	ldr	r3, [pc, #456]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f003 0203 	and.w	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d130      	bne.n	8003b32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ada:	3b01      	subs	r3, #1
 8003adc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d127      	bne.n	8003b32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d11f      	bne.n	8003b32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003afc:	2a07      	cmp	r2, #7
 8003afe:	bf14      	ite	ne
 8003b00:	2201      	movne	r2, #1
 8003b02:	2200      	moveq	r2, #0
 8003b04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d113      	bne.n	8003b32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	3b01      	subs	r3, #1
 8003b18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d109      	bne.n	8003b32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d06e      	beq.n	8003c10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2b0c      	cmp	r3, #12
 8003b36:	d069      	beq.n	8003c0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b38:	4b53      	ldr	r3, [pc, #332]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b44:	4b50      	ldr	r3, [pc, #320]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0ad      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b54:	4b4c      	ldr	r3, [pc, #304]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a4b      	ldr	r2, [pc, #300]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003b5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b60:	f7fe f9ac 	bl	8001ebc <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b68:	f7fe f9a8 	bl	8001ebc <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e09a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7a:	4b43      	ldr	r3, [pc, #268]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b86:	4b40      	ldr	r3, [pc, #256]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	4b40      	ldr	r3, [pc, #256]	@ (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b96:	3a01      	subs	r2, #1
 8003b98:	0112      	lsls	r2, r2, #4
 8003b9a:	4311      	orrs	r1, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ba0:	0212      	lsls	r2, r2, #8
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ba8:	0852      	lsrs	r2, r2, #1
 8003baa:	3a01      	subs	r2, #1
 8003bac:	0552      	lsls	r2, r2, #21
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003bb4:	0852      	lsrs	r2, r2, #1
 8003bb6:	3a01      	subs	r2, #1
 8003bb8:	0652      	lsls	r2, r2, #25
 8003bba:	4311      	orrs	r1, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003bc0:	0912      	lsrs	r2, r2, #4
 8003bc2:	0452      	lsls	r2, r2, #17
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	4930      	ldr	r1, [pc, #192]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003be2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003be4:	f7fe f96a 	bl	8001ebc <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bec:	f7fe f966 	bl	8001ebc <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e058      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfe:	4b22      	ldr	r3, [pc, #136]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c0a:	e050      	b.n	8003cae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e04f      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c10:	4b1d      	ldr	r3, [pc, #116]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d148      	bne.n	8003cae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a19      	ldr	r2, [pc, #100]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c28:	4b17      	ldr	r3, [pc, #92]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a16      	ldr	r2, [pc, #88]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c34:	f7fe f942 	bl	8001ebc <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fe f93e 	bl	8001ebc <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e030      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x734>
 8003c5a:	e028      	b.n	8003cae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d023      	beq.n	8003caa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c62:	4b09      	ldr	r3, [pc, #36]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a08      	ldr	r2, [pc, #32]	@ (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fe f925 	bl	8001ebc <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c74:	e00c      	b.n	8003c90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c76:	f7fe f921 	bl	8001ebc <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d905      	bls.n	8003c90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e013      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c90:	4b09      	ldr	r3, [pc, #36]	@ (8003cb8 <HAL_RCC_OscConfig+0x7b0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ec      	bne.n	8003c76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c9c:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <HAL_RCC_OscConfig+0x7b0>)
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	4905      	ldr	r1, [pc, #20]	@ (8003cb8 <HAL_RCC_OscConfig+0x7b0>)
 8003ca2:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <HAL_RCC_OscConfig+0x7b4>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60cb      	str	r3, [r1, #12]
 8003ca8:	e001      	b.n	8003cae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3720      	adds	r7, #32
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	feeefffc 	.word	0xfeeefffc

08003cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0e7      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd4:	4b75      	ldr	r3, [pc, #468]	@ (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d910      	bls.n	8003d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce2:	4b72      	ldr	r3, [pc, #456]	@ (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 0207 	bic.w	r2, r3, #7
 8003cea:	4970      	ldr	r1, [pc, #448]	@ (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	4b6e      	ldr	r3, [pc, #440]	@ (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0cf      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d010      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	4b66      	ldr	r3, [pc, #408]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d908      	bls.n	8003d32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d20:	4b63      	ldr	r3, [pc, #396]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4960      	ldr	r1, [pc, #384]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d04c      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d46:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d121      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e0a6      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d5e:	4b54      	ldr	r3, [pc, #336]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d115      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e09a      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d76:	4b4e      	ldr	r3, [pc, #312]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e08e      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d86:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e086      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d96:	4b46      	ldr	r3, [pc, #280]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 0203 	bic.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4943      	ldr	r1, [pc, #268]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da8:	f7fe f888 	bl	8001ebc <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db0:	f7fe f884 	bl	8001ebc <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e06e      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	4b3a      	ldr	r3, [pc, #232]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 020c 	and.w	r2, r3, #12
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d1eb      	bne.n	8003db0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d010      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	4b31      	ldr	r3, [pc, #196]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d208      	bcs.n	8003e06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df4:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	492b      	ldr	r1, [pc, #172]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e06:	4b29      	ldr	r3, [pc, #164]	@ (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d210      	bcs.n	8003e36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e14:	4b25      	ldr	r3, [pc, #148]	@ (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f023 0207 	bic.w	r2, r3, #7
 8003e1c:	4923      	ldr	r1, [pc, #140]	@ (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e24:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e036      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e42:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	4918      	ldr	r1, [pc, #96]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e60:	4b13      	ldr	r3, [pc, #76]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4910      	ldr	r1, [pc, #64]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e74:	f000 f824 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	490b      	ldr	r1, [pc, #44]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1f4>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e90:	4a09      	ldr	r2, [pc, #36]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1f8>)
 8003e92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e94:	4b09      	ldr	r3, [pc, #36]	@ (8003ebc <HAL_RCC_ClockConfig+0x1fc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fd ffbf 	bl	8001e1c <HAL_InitTick>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40022000 	.word	0x40022000
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	0800b810 	.word	0x0800b810
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	20000004 	.word	0x20000004

08003ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b089      	sub	sp, #36	@ 0x24
 8003ec4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ece:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	d121      	bne.n	8003f32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d11e      	bne.n	8003f32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ef4:	4b34      	ldr	r3, [pc, #208]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f00:	4b31      	ldr	r3, [pc, #196]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	e005      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f10:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10d      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d102      	bne.n	8003f3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f38:	4b25      	ldr	r3, [pc, #148]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	e004      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f44:	4b23      	ldr	r3, [pc, #140]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b0c      	cmp	r3, #12
 8003f4c:	d134      	bne.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d003      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0xac>
 8003f64:	e005      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f66:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f68:	617b      	str	r3, [r7, #20]
      break;
 8003f6a:	e005      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f6c:	4b19      	ldr	r3, [pc, #100]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f6e:	617b      	str	r3, [r7, #20]
      break;
 8003f70:	e002      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	617b      	str	r3, [r7, #20]
      break;
 8003f76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f78:	4b13      	ldr	r3, [pc, #76]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	3301      	adds	r3, #1
 8003f84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f86:	4b10      	ldr	r3, [pc, #64]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	fb03 f202 	mul.w	r2, r3, r2
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	0e5b      	lsrs	r3, r3, #25
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	3301      	adds	r3, #1
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3724      	adds	r7, #36	@ 0x24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	0800b828 	.word	0x0800b828
 8003fd0:	00f42400 	.word	0x00f42400
 8003fd4:	007a1200 	.word	0x007a1200

08003fd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fdc:	4b03      	ldr	r3, [pc, #12]	@ (8003fec <HAL_RCC_GetHCLKFreq+0x14>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000000 	.word	0x20000000

08003ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ff4:	f7ff fff0 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4904      	ldr	r1, [pc, #16]	@ (8004018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	0800b820 	.word	0x0800b820

0800401c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004020:	f7ff ffda 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	0adb      	lsrs	r3, r3, #11
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	4904      	ldr	r1, [pc, #16]	@ (8004044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000
 8004044:	0800b820 	.word	0x0800b820

08004048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004054:	4b2a      	ldr	r3, [pc, #168]	@ (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004060:	f7ff f9ee 	bl	8003440 <HAL_PWREx_GetVoltageRange>
 8004064:	6178      	str	r0, [r7, #20]
 8004066:	e014      	b.n	8004092 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b25      	ldr	r3, [pc, #148]	@ (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406c:	4a24      	ldr	r2, [pc, #144]	@ (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004072:	6593      	str	r3, [r2, #88]	@ 0x58
 8004074:	4b22      	ldr	r3, [pc, #136]	@ (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004080:	f7ff f9de 	bl	8003440 <HAL_PWREx_GetVoltageRange>
 8004084:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004086:	4b1e      	ldr	r3, [pc, #120]	@ (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408a:	4a1d      	ldr	r2, [pc, #116]	@ (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004090:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004098:	d10b      	bne.n	80040b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b80      	cmp	r3, #128	@ 0x80
 800409e:	d919      	bls.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80040a4:	d902      	bls.n	80040ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040a6:	2302      	movs	r3, #2
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	e013      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040ac:	2301      	movs	r3, #1
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e010      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b80      	cmp	r3, #128	@ 0x80
 80040b6:	d902      	bls.n	80040be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040b8:	2303      	movs	r3, #3
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	e00a      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b80      	cmp	r3, #128	@ 0x80
 80040c2:	d102      	bne.n	80040ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040c4:	2302      	movs	r3, #2
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	e004      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b70      	cmp	r3, #112	@ 0x70
 80040ce:	d101      	bne.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040d0:	2301      	movs	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 0207 	bic.w	r2, r3, #7
 80040dc:	4909      	ldr	r1, [pc, #36]	@ (8004104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040e4:	4b07      	ldr	r3, [pc, #28]	@ (8004104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d001      	beq.n	80040f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	40022000 	.word	0x40022000

08004108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004110:	2300      	movs	r3, #0
 8004112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004114:	2300      	movs	r3, #0
 8004116:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004120:	2b00      	cmp	r3, #0
 8004122:	d041      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004128:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800412c:	d02a      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800412e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004132:	d824      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004134:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004138:	d008      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800413a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800413e:	d81e      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004144:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004148:	d010      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800414a:	e018      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800414c:	4b86      	ldr	r3, [pc, #536]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4a85      	ldr	r2, [pc, #532]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004156:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004158:	e015      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fabb 	bl	80046dc <RCCEx_PLLSAI1_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800416a:	e00c      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3320      	adds	r3, #32
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fba6 	bl	80048c4 <RCCEx_PLLSAI2_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800417c:	e003      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	74fb      	strb	r3, [r7, #19]
      break;
 8004182:	e000      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800418c:	4b76      	ldr	r3, [pc, #472]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004192:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800419a:	4973      	ldr	r1, [pc, #460]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041a2:	e001      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
 80041a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d041      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041bc:	d02a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041c2:	d824      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041c8:	d008      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041ce:	d81e      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041d8:	d010      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041da:	e018      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041dc:	4b62      	ldr	r3, [pc, #392]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4a61      	ldr	r2, [pc, #388]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041e8:	e015      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3304      	adds	r3, #4
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fa73 	bl	80046dc <RCCEx_PLLSAI1_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041fa:	e00c      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3320      	adds	r3, #32
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fb5e 	bl	80048c4 <RCCEx_PLLSAI2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	74fb      	strb	r3, [r7, #19]
      break;
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004216:	7cfb      	ldrb	r3, [r7, #19]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800421c:	4b52      	ldr	r3, [pc, #328]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004222:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800422a:	494f      	ldr	r1, [pc, #316]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004232:	e001      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80a0 	beq.w	8004386 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800424a:	4b47      	ldr	r3, [pc, #284]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00d      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004260:	4b41      	ldr	r3, [pc, #260]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004264:	4a40      	ldr	r2, [pc, #256]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800426a:	6593      	str	r3, [r2, #88]	@ 0x58
 800426c:	4b3e      	ldr	r3, [pc, #248]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004278:	2301      	movs	r3, #1
 800427a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800427c:	4b3b      	ldr	r3, [pc, #236]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a3a      	ldr	r2, [pc, #232]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004286:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004288:	f7fd fe18 	bl	8001ebc <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800428e:	e009      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004290:	f7fd fe14 	bl	8001ebc <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d902      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	74fb      	strb	r3, [r7, #19]
        break;
 80042a2:	e005      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042a4:	4b31      	ldr	r3, [pc, #196]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ef      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80042b0:	7cfb      	ldrb	r3, [r7, #19]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d15c      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01f      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d019      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042d4:	4b24      	ldr	r3, [pc, #144]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042e0:	4b21      	ldr	r3, [pc, #132]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e6:	4a20      	ldr	r2, [pc, #128]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004300:	4a19      	ldr	r2, [pc, #100]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fd fdd3 	bl	8001ebc <HAL_GetTick>
 8004316:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004318:	e00b      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fd fdcf 	bl	8001ebc <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d902      	bls.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	74fb      	strb	r3, [r7, #19]
            break;
 8004330:	e006      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004332:	4b0d      	ldr	r3, [pc, #52]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0ec      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10c      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004346:	4b08      	ldr	r3, [pc, #32]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004356:	4904      	ldr	r1, [pc, #16]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800435e:	e009      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
 8004364:	e006      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000
 800436c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004374:	7c7b      	ldrb	r3, [r7, #17]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d105      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437a:	4b9e      	ldr	r3, [pc, #632]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437e:	4a9d      	ldr	r2, [pc, #628]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004380:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004384:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004392:	4b98      	ldr	r3, [pc, #608]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004398:	f023 0203 	bic.w	r2, r3, #3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a0:	4994      	ldr	r1, [pc, #592]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043b4:	4b8f      	ldr	r3, [pc, #572]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ba:	f023 020c 	bic.w	r2, r3, #12
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c2:	498c      	ldr	r1, [pc, #560]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043d6:	4b87      	ldr	r3, [pc, #540]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	4983      	ldr	r1, [pc, #524]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043f8:	4b7e      	ldr	r3, [pc, #504]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	497b      	ldr	r1, [pc, #492]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800441a:	4b76      	ldr	r3, [pc, #472]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004420:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004428:	4972      	ldr	r1, [pc, #456]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800443c:	4b6d      	ldr	r3, [pc, #436]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004442:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800444a:	496a      	ldr	r1, [pc, #424]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800445e:	4b65      	ldr	r3, [pc, #404]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004464:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446c:	4961      	ldr	r1, [pc, #388]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004480:	4b5c      	ldr	r3, [pc, #368]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004486:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800448e:	4959      	ldr	r1, [pc, #356]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044a2:	4b54      	ldr	r3, [pc, #336]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b0:	4950      	ldr	r1, [pc, #320]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044c4:	4b4b      	ldr	r3, [pc, #300]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d2:	4948      	ldr	r1, [pc, #288]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044e6:	4b43      	ldr	r3, [pc, #268]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f4:	493f      	ldr	r1, [pc, #252]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d028      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004508:	4b3a      	ldr	r3, [pc, #232]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004516:	4937      	ldr	r1, [pc, #220]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004526:	d106      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004528:	4b32      	ldr	r3, [pc, #200]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4a31      	ldr	r2, [pc, #196]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004532:	60d3      	str	r3, [r2, #12]
 8004534:	e011      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800453a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800453e:	d10c      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	2101      	movs	r1, #1
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f8c8 	bl	80046dc <RCCEx_PLLSAI1_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d028      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004566:	4b23      	ldr	r3, [pc, #140]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004574:	491f      	ldr	r1, [pc, #124]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004580:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004584:	d106      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004586:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4a1a      	ldr	r2, [pc, #104]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004590:	60d3      	str	r3, [r2, #12]
 8004592:	e011      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004598:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800459c:	d10c      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2101      	movs	r1, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f899 	bl	80046dc <RCCEx_PLLSAI1_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02b      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045c4:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045d2:	4908      	ldr	r1, [pc, #32]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045e2:	d109      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e4:	4b03      	ldr	r3, [pc, #12]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a02      	ldr	r2, [pc, #8]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ee:	60d3      	str	r3, [r2, #12]
 80045f0:	e014      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004600:	d10c      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3304      	adds	r3, #4
 8004606:	2101      	movs	r1, #1
 8004608:	4618      	mov	r0, r3
 800460a:	f000 f867 	bl	80046dc <RCCEx_PLLSAI1_Config>
 800460e:	4603      	mov	r3, r0
 8004610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004612:	7cfb      	ldrb	r3, [r7, #19]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d02f      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004628:	4b2b      	ldr	r3, [pc, #172]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004636:	4928      	ldr	r1, [pc, #160]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004646:	d10d      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	2102      	movs	r1, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f844 	bl	80046dc <RCCEx_PLLSAI1_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d014      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800465e:	7cfb      	ldrb	r3, [r7, #19]
 8004660:	74bb      	strb	r3, [r7, #18]
 8004662:	e011      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800466c:	d10c      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3320      	adds	r3, #32
 8004672:	2102      	movs	r1, #2
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f925 	bl	80048c4 <RCCEx_PLLSAI2_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004694:	4b10      	ldr	r3, [pc, #64]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046a2:	490d      	ldr	r1, [pc, #52]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00b      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046b6:	4b08      	ldr	r3, [pc, #32]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046c6:	4904      	ldr	r1, [pc, #16]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40021000 	.word	0x40021000

080046dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ea:	4b75      	ldr	r3, [pc, #468]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d018      	beq.n	8004728 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046f6:	4b72      	ldr	r3, [pc, #456]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0203 	and.w	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d10d      	bne.n	8004722 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
       ||
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800470e:	4b6c      	ldr	r3, [pc, #432]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
       ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d047      	beq.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
 8004726:	e044      	b.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d018      	beq.n	8004762 <RCCEx_PLLSAI1_Config+0x86>
 8004730:	2b03      	cmp	r3, #3
 8004732:	d825      	bhi.n	8004780 <RCCEx_PLLSAI1_Config+0xa4>
 8004734:	2b01      	cmp	r3, #1
 8004736:	d002      	beq.n	800473e <RCCEx_PLLSAI1_Config+0x62>
 8004738:	2b02      	cmp	r3, #2
 800473a:	d009      	beq.n	8004750 <RCCEx_PLLSAI1_Config+0x74>
 800473c:	e020      	b.n	8004780 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800473e:	4b60      	ldr	r3, [pc, #384]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d11d      	bne.n	8004786 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474e:	e01a      	b.n	8004786 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004750:	4b5b      	ldr	r3, [pc, #364]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004758:	2b00      	cmp	r3, #0
 800475a:	d116      	bne.n	800478a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004760:	e013      	b.n	800478a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004762:	4b57      	ldr	r3, [pc, #348]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800476e:	4b54      	ldr	r3, [pc, #336]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800477e:	e006      	b.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      break;
 8004784:	e004      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10d      	bne.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004796:	4b4a      	ldr	r3, [pc, #296]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6819      	ldr	r1, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	430b      	orrs	r3, r1
 80047ac:	4944      	ldr	r1, [pc, #272]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d17d      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047b8:	4b41      	ldr	r3, [pc, #260]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a40      	ldr	r2, [pc, #256]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c4:	f7fd fb7a 	bl	8001ebc <HAL_GetTick>
 80047c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ca:	e009      	b.n	80047e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047cc:	f7fd fb76 	bl	8001ebc <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d902      	bls.n	80047e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	73fb      	strb	r3, [r7, #15]
        break;
 80047de:	e005      	b.n	80047ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047e0:	4b37      	ldr	r3, [pc, #220]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1ef      	bne.n	80047cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d160      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d111      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f8:	4b31      	ldr	r3, [pc, #196]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6892      	ldr	r2, [r2, #8]
 8004808:	0211      	lsls	r1, r2, #8
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68d2      	ldr	r2, [r2, #12]
 800480e:	0912      	lsrs	r2, r2, #4
 8004810:	0452      	lsls	r2, r2, #17
 8004812:	430a      	orrs	r2, r1
 8004814:	492a      	ldr	r1, [pc, #168]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	610b      	str	r3, [r1, #16]
 800481a:	e027      	b.n	800486c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d112      	bne.n	8004848 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004822:	4b27      	ldr	r3, [pc, #156]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800482a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6892      	ldr	r2, [r2, #8]
 8004832:	0211      	lsls	r1, r2, #8
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6912      	ldr	r2, [r2, #16]
 8004838:	0852      	lsrs	r2, r2, #1
 800483a:	3a01      	subs	r2, #1
 800483c:	0552      	lsls	r2, r2, #21
 800483e:	430a      	orrs	r2, r1
 8004840:	491f      	ldr	r1, [pc, #124]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004842:	4313      	orrs	r3, r2
 8004844:	610b      	str	r3, [r1, #16]
 8004846:	e011      	b.n	800486c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004848:	4b1d      	ldr	r3, [pc, #116]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004850:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6892      	ldr	r2, [r2, #8]
 8004858:	0211      	lsls	r1, r2, #8
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6952      	ldr	r2, [r2, #20]
 800485e:	0852      	lsrs	r2, r2, #1
 8004860:	3a01      	subs	r2, #1
 8004862:	0652      	lsls	r2, r2, #25
 8004864:	430a      	orrs	r2, r1
 8004866:	4916      	ldr	r1, [pc, #88]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800486c:	4b14      	ldr	r3, [pc, #80]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a13      	ldr	r2, [pc, #76]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004872:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004876:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fd fb20 	bl	8001ebc <HAL_GetTick>
 800487c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800487e:	e009      	b.n	8004894 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004880:	f7fd fb1c 	bl	8001ebc <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d902      	bls.n	8004894 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	73fb      	strb	r3, [r7, #15]
          break;
 8004892:	e005      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004894:	4b0a      	ldr	r3, [pc, #40]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ef      	beq.n	8004880 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048a6:	4b06      	ldr	r3, [pc, #24]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	4904      	ldr	r1, [pc, #16]	@ (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000

080048c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048d2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d018      	beq.n	8004910 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048de:	4b67      	ldr	r3, [pc, #412]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0203 	and.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d10d      	bne.n	800490a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
       ||
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048f6:	4b61      	ldr	r3, [pc, #388]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	091b      	lsrs	r3, r3, #4
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
       ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d047      	beq.n	800499a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
 800490e:	e044      	b.n	800499a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b03      	cmp	r3, #3
 8004916:	d018      	beq.n	800494a <RCCEx_PLLSAI2_Config+0x86>
 8004918:	2b03      	cmp	r3, #3
 800491a:	d825      	bhi.n	8004968 <RCCEx_PLLSAI2_Config+0xa4>
 800491c:	2b01      	cmp	r3, #1
 800491e:	d002      	beq.n	8004926 <RCCEx_PLLSAI2_Config+0x62>
 8004920:	2b02      	cmp	r3, #2
 8004922:	d009      	beq.n	8004938 <RCCEx_PLLSAI2_Config+0x74>
 8004924:	e020      	b.n	8004968 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004926:	4b55      	ldr	r3, [pc, #340]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d11d      	bne.n	800496e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004936:	e01a      	b.n	800496e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004938:	4b50      	ldr	r3, [pc, #320]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d116      	bne.n	8004972 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004948:	e013      	b.n	8004972 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800494a:	4b4c      	ldr	r3, [pc, #304]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10f      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004956:	4b49      	ldr	r3, [pc, #292]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004966:	e006      	b.n	8004976 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e004      	b.n	8004978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800496e:	bf00      	nop
 8004970:	e002      	b.n	8004978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004972:	bf00      	nop
 8004974:	e000      	b.n	8004978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004976:	bf00      	nop
    }

    if(status == HAL_OK)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800497e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6819      	ldr	r1, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	3b01      	subs	r3, #1
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	430b      	orrs	r3, r1
 8004994:	4939      	ldr	r1, [pc, #228]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d167      	bne.n	8004a70 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049a0:	4b36      	ldr	r3, [pc, #216]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a35      	ldr	r2, [pc, #212]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fd fa86 	bl	8001ebc <HAL_GetTick>
 80049b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049b2:	e009      	b.n	80049c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049b4:	f7fd fa82 	bl	8001ebc <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d902      	bls.n	80049c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	73fb      	strb	r3, [r7, #15]
        break;
 80049c6:	e005      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049c8:	4b2c      	ldr	r3, [pc, #176]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ef      	bne.n	80049b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d14a      	bne.n	8004a70 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d111      	bne.n	8004a04 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049e0:	4b26      	ldr	r3, [pc, #152]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80049e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6892      	ldr	r2, [r2, #8]
 80049f0:	0211      	lsls	r1, r2, #8
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68d2      	ldr	r2, [r2, #12]
 80049f6:	0912      	lsrs	r2, r2, #4
 80049f8:	0452      	lsls	r2, r2, #17
 80049fa:	430a      	orrs	r2, r1
 80049fc:	491f      	ldr	r1, [pc, #124]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	614b      	str	r3, [r1, #20]
 8004a02:	e011      	b.n	8004a28 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a04:	4b1d      	ldr	r3, [pc, #116]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6892      	ldr	r2, [r2, #8]
 8004a14:	0211      	lsls	r1, r2, #8
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6912      	ldr	r2, [r2, #16]
 8004a1a:	0852      	lsrs	r2, r2, #1
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	0652      	lsls	r2, r2, #25
 8004a20:	430a      	orrs	r2, r1
 8004a22:	4916      	ldr	r1, [pc, #88]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a28:	4b14      	ldr	r3, [pc, #80]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a13      	ldr	r2, [pc, #76]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fd fa42 	bl	8001ebc <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a3a:	e009      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a3c:	f7fd fa3e 	bl	8001ebc <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d902      	bls.n	8004a50 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a4e:	e005      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a50:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ef      	beq.n	8004a3c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a62:	4b06      	ldr	r3, [pc, #24]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	4904      	ldr	r1, [pc, #16]	@ (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000

08004a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e049      	b.n	8004b26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fc feb2 	bl	8001810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f000 fb10 	bl	80050e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d001      	beq.n	8004b48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e047      	b.n	8004bd8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a23      	ldr	r2, [pc, #140]	@ (8004be4 <HAL_TIM_Base_Start+0xb4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01d      	beq.n	8004b96 <HAL_TIM_Base_Start+0x66>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b62:	d018      	beq.n	8004b96 <HAL_TIM_Base_Start+0x66>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a1f      	ldr	r2, [pc, #124]	@ (8004be8 <HAL_TIM_Base_Start+0xb8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_TIM_Base_Start+0x66>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1e      	ldr	r2, [pc, #120]	@ (8004bec <HAL_TIM_Base_Start+0xbc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00e      	beq.n	8004b96 <HAL_TIM_Base_Start+0x66>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf0 <HAL_TIM_Base_Start+0xc0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d009      	beq.n	8004b96 <HAL_TIM_Base_Start+0x66>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf4 <HAL_TIM_Base_Start+0xc4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_TIM_Base_Start+0x66>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a19      	ldr	r2, [pc, #100]	@ (8004bf8 <HAL_TIM_Base_Start+0xc8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d115      	bne.n	8004bc2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	4b17      	ldr	r3, [pc, #92]	@ (8004bfc <HAL_TIM_Base_Start+0xcc>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2b06      	cmp	r3, #6
 8004ba6:	d015      	beq.n	8004bd4 <HAL_TIM_Base_Start+0xa4>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bae:	d011      	beq.n	8004bd4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc0:	e008      	b.n	8004bd4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e000      	b.n	8004bd6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40013400 	.word	0x40013400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	00010007 	.word	0x00010007

08004c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d001      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e04f      	b.n	8004cb8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a23      	ldr	r2, [pc, #140]	@ (8004cc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01d      	beq.n	8004c76 <HAL_TIM_Base_Start_IT+0x76>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c42:	d018      	beq.n	8004c76 <HAL_TIM_Base_Start_IT+0x76>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <HAL_TIM_Base_Start_IT+0x76>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1e      	ldr	r2, [pc, #120]	@ (8004ccc <HAL_TIM_Base_Start_IT+0xcc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00e      	beq.n	8004c76 <HAL_TIM_Base_Start_IT+0x76>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d009      	beq.n	8004c76 <HAL_TIM_Base_Start_IT+0x76>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d004      	beq.n	8004c76 <HAL_TIM_Base_Start_IT+0x76>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a19      	ldr	r2, [pc, #100]	@ (8004cd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d115      	bne.n	8004ca2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	4b17      	ldr	r3, [pc, #92]	@ (8004cdc <HAL_TIM_Base_Start_IT+0xdc>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b06      	cmp	r3, #6
 8004c86:	d015      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0xb4>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c8e:	d011      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca0:	e008      	b.n	8004cb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0201 	orr.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	e000      	b.n	8004cb6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	40012c00 	.word	0x40012c00
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40000c00 	.word	0x40000c00
 8004cd4:	40013400 	.word	0x40013400
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	00010007 	.word	0x00010007

08004ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d020      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01b      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0202 	mvn.w	r2, #2
 8004d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f9bc 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8004d30:	e005      	b.n	8004d3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f9ae 	bl	8005094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f9bf 	bl	80050bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d020      	beq.n	8004d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01b      	beq.n	8004d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0204 	mvn.w	r2, #4
 8004d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2202      	movs	r2, #2
 8004d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f996 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f988 	bl	8005094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f999 	bl	80050bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d020      	beq.n	8004ddc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01b      	beq.n	8004ddc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0208 	mvn.w	r2, #8
 8004dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2204      	movs	r2, #4
 8004db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f970 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8004dc8:	e005      	b.n	8004dd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f962 	bl	8005094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f973 	bl	80050bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d020      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01b      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0210 	mvn.w	r2, #16
 8004df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f94a 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8004e14:	e005      	b.n	8004e22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f93c 	bl	8005094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f94d 	bl	80050bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00c      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0201 	mvn.w	r2, #1
 8004e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f91a 	bl	8005080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d104      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00c      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fb07 	bl	8005488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00c      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 faff 	bl	800549c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00c      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f907 	bl	80050d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00c      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f06f 0220 	mvn.w	r2, #32
 8004ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fac7 	bl	8005474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_ConfigClockSource+0x1c>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e0b6      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x18a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f28:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f2c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f34:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f46:	d03e      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0xd8>
 8004f48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f4c:	f200 8087 	bhi.w	800505e <HAL_TIM_ConfigClockSource+0x170>
 8004f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f54:	f000 8086 	beq.w	8005064 <HAL_TIM_ConfigClockSource+0x176>
 8004f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f5c:	d87f      	bhi.n	800505e <HAL_TIM_ConfigClockSource+0x170>
 8004f5e:	2b70      	cmp	r3, #112	@ 0x70
 8004f60:	d01a      	beq.n	8004f98 <HAL_TIM_ConfigClockSource+0xaa>
 8004f62:	2b70      	cmp	r3, #112	@ 0x70
 8004f64:	d87b      	bhi.n	800505e <HAL_TIM_ConfigClockSource+0x170>
 8004f66:	2b60      	cmp	r3, #96	@ 0x60
 8004f68:	d050      	beq.n	800500c <HAL_TIM_ConfigClockSource+0x11e>
 8004f6a:	2b60      	cmp	r3, #96	@ 0x60
 8004f6c:	d877      	bhi.n	800505e <HAL_TIM_ConfigClockSource+0x170>
 8004f6e:	2b50      	cmp	r3, #80	@ 0x50
 8004f70:	d03c      	beq.n	8004fec <HAL_TIM_ConfigClockSource+0xfe>
 8004f72:	2b50      	cmp	r3, #80	@ 0x50
 8004f74:	d873      	bhi.n	800505e <HAL_TIM_ConfigClockSource+0x170>
 8004f76:	2b40      	cmp	r3, #64	@ 0x40
 8004f78:	d058      	beq.n	800502c <HAL_TIM_ConfigClockSource+0x13e>
 8004f7a:	2b40      	cmp	r3, #64	@ 0x40
 8004f7c:	d86f      	bhi.n	800505e <HAL_TIM_ConfigClockSource+0x170>
 8004f7e:	2b30      	cmp	r3, #48	@ 0x30
 8004f80:	d064      	beq.n	800504c <HAL_TIM_ConfigClockSource+0x15e>
 8004f82:	2b30      	cmp	r3, #48	@ 0x30
 8004f84:	d86b      	bhi.n	800505e <HAL_TIM_ConfigClockSource+0x170>
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d060      	beq.n	800504c <HAL_TIM_ConfigClockSource+0x15e>
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d867      	bhi.n	800505e <HAL_TIM_ConfigClockSource+0x170>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d05c      	beq.n	800504c <HAL_TIM_ConfigClockSource+0x15e>
 8004f92:	2b10      	cmp	r3, #16
 8004f94:	d05a      	beq.n	800504c <HAL_TIM_ConfigClockSource+0x15e>
 8004f96:	e062      	b.n	800505e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fa8:	f000 f9bc 	bl	8005324 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	609a      	str	r2, [r3, #8]
      break;
 8004fc4:	e04f      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fd6:	f000 f9a5 	bl	8005324 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fe8:	609a      	str	r2, [r3, #8]
      break;
 8004fea:	e03c      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f000 f919 	bl	8005230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2150      	movs	r1, #80	@ 0x50
 8005004:	4618      	mov	r0, r3
 8005006:	f000 f972 	bl	80052ee <TIM_ITRx_SetConfig>
      break;
 800500a:	e02c      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005018:	461a      	mov	r2, r3
 800501a:	f000 f938 	bl	800528e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2160      	movs	r1, #96	@ 0x60
 8005024:	4618      	mov	r0, r3
 8005026:	f000 f962 	bl	80052ee <TIM_ITRx_SetConfig>
      break;
 800502a:	e01c      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005038:	461a      	mov	r2, r3
 800503a:	f000 f8f9 	bl	8005230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2140      	movs	r1, #64	@ 0x40
 8005044:	4618      	mov	r0, r3
 8005046:	f000 f952 	bl	80052ee <TIM_ITRx_SetConfig>
      break;
 800504a:	e00c      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f000 f949 	bl	80052ee <TIM_ITRx_SetConfig>
      break;
 800505c:	e003      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
      break;
 8005062:	e000      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005064:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a46      	ldr	r2, [pc, #280]	@ (8005210 <TIM_Base_SetConfig+0x12c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d013      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005102:	d00f      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a43      	ldr	r2, [pc, #268]	@ (8005214 <TIM_Base_SetConfig+0x130>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00b      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a42      	ldr	r2, [pc, #264]	@ (8005218 <TIM_Base_SetConfig+0x134>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d007      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a41      	ldr	r2, [pc, #260]	@ (800521c <TIM_Base_SetConfig+0x138>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a40      	ldr	r2, [pc, #256]	@ (8005220 <TIM_Base_SetConfig+0x13c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d108      	bne.n	8005136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a35      	ldr	r2, [pc, #212]	@ (8005210 <TIM_Base_SetConfig+0x12c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01f      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005144:	d01b      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a32      	ldr	r2, [pc, #200]	@ (8005214 <TIM_Base_SetConfig+0x130>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d017      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a31      	ldr	r2, [pc, #196]	@ (8005218 <TIM_Base_SetConfig+0x134>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a30      	ldr	r2, [pc, #192]	@ (800521c <TIM_Base_SetConfig+0x138>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00f      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2f      	ldr	r2, [pc, #188]	@ (8005220 <TIM_Base_SetConfig+0x13c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00b      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2e      	ldr	r2, [pc, #184]	@ (8005224 <TIM_Base_SetConfig+0x140>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2d      	ldr	r2, [pc, #180]	@ (8005228 <TIM_Base_SetConfig+0x144>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_Base_SetConfig+0x9a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2c      	ldr	r2, [pc, #176]	@ (800522c <TIM_Base_SetConfig+0x148>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d108      	bne.n	8005190 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a16      	ldr	r2, [pc, #88]	@ (8005210 <TIM_Base_SetConfig+0x12c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00f      	beq.n	80051dc <TIM_Base_SetConfig+0xf8>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a18      	ldr	r2, [pc, #96]	@ (8005220 <TIM_Base_SetConfig+0x13c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00b      	beq.n	80051dc <TIM_Base_SetConfig+0xf8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a17      	ldr	r2, [pc, #92]	@ (8005224 <TIM_Base_SetConfig+0x140>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d007      	beq.n	80051dc <TIM_Base_SetConfig+0xf8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a16      	ldr	r2, [pc, #88]	@ (8005228 <TIM_Base_SetConfig+0x144>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d003      	beq.n	80051dc <TIM_Base_SetConfig+0xf8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a15      	ldr	r2, [pc, #84]	@ (800522c <TIM_Base_SetConfig+0x148>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d103      	bne.n	80051e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d105      	bne.n	8005202 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f023 0201 	bic.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	611a      	str	r2, [r3, #16]
  }
}
 8005202:	bf00      	nop
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40000400 	.word	0x40000400
 8005218:	40000800 	.word	0x40000800
 800521c:	40000c00 	.word	0x40000c00
 8005220:	40013400 	.word	0x40013400
 8005224:	40014000 	.word	0x40014000
 8005228:	40014400 	.word	0x40014400
 800522c:	40014800 	.word	0x40014800

08005230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0201 	bic.w	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800525a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f023 030a 	bic.w	r3, r3, #10
 800526c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800528e:	b480      	push	{r7}
 8005290:	b087      	sub	sp, #28
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	f023 0210 	bic.w	r2, r3, #16
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	031b      	lsls	r3, r3, #12
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	621a      	str	r2, [r3, #32]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	f043 0307 	orr.w	r3, r3, #7
 8005310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800533e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	021a      	lsls	r2, r3, #8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	431a      	orrs	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4313      	orrs	r3, r2
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	609a      	str	r2, [r3, #8]
}
 8005358:	bf00      	nop
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005378:	2302      	movs	r3, #2
 800537a:	e068      	b.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a2e      	ldr	r2, [pc, #184]	@ (800545c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d108      	bne.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80053b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1e      	ldr	r2, [pc, #120]	@ (800545c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d01d      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ee:	d018      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005464 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005468 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00e      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a18      	ldr	r2, [pc, #96]	@ (800546c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d009      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a13      	ldr	r2, [pc, #76]	@ (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a14      	ldr	r2, [pc, #80]	@ (8005470 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d10c      	bne.n	800543c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	4313      	orrs	r3, r2
 8005432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40013400 	.word	0x40013400
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40014000 	.word	0x40014000

08005474 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e040      	b.n	8005544 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fc f9f2 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2224      	movs	r2, #36	@ 0x24
 80054dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0201 	bic.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fb6a 	bl	8005bd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f8af 	bl	8005660 <UART_SetConfig>
 8005502:	4603      	mov	r3, r0
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e01b      	b.n	8005544 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800551a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800552a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fbe9 	bl	8005d14 <UART_CheckIdleState>
 8005542:	4603      	mov	r3, r0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	@ 0x28
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005560:	2b20      	cmp	r3, #32
 8005562:	d177      	bne.n	8005654 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <HAL_UART_Transmit+0x24>
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e070      	b.n	8005656 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2221      	movs	r2, #33	@ 0x21
 8005580:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005582:	f7fc fc9b 	bl	8001ebc <HAL_GetTick>
 8005586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	88fa      	ldrh	r2, [r7, #6]
 800558c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	88fa      	ldrh	r2, [r7, #6]
 8005594:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a0:	d108      	bne.n	80055b4 <HAL_UART_Transmit+0x68>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d104      	bne.n	80055b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	e003      	b.n	80055bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055bc:	e02f      	b.n	800561e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2200      	movs	r2, #0
 80055c6:	2180      	movs	r1, #128	@ 0x80
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 fc4b 	bl	8005e64 <UART_WaitOnFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e03b      	b.n	8005656 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10b      	bne.n	80055fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	881a      	ldrh	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055f0:	b292      	uxth	r2, r2
 80055f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	3302      	adds	r3, #2
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	e007      	b.n	800560c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	781a      	ldrb	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	3301      	adds	r3, #1
 800560a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1c9      	bne.n	80055be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	2140      	movs	r1, #64	@ 0x40
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 fc15 	bl	8005e64 <UART_WaitOnFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e005      	b.n	8005656 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	e000      	b.n	8005656 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005654:	2302      	movs	r3, #2
  }
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005664:	b08a      	sub	sp, #40	@ 0x28
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	431a      	orrs	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	431a      	orrs	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	4313      	orrs	r3, r2
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4ba4      	ldr	r3, [pc, #656]	@ (8005920 <UART_SetConfig+0x2c0>)
 8005690:	4013      	ands	r3, r2
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005698:	430b      	orrs	r3, r1
 800569a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a99      	ldr	r2, [pc, #612]	@ (8005924 <UART_SetConfig+0x2c4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d004      	beq.n	80056cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c8:	4313      	orrs	r3, r2
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056dc:	430a      	orrs	r2, r1
 80056de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a90      	ldr	r2, [pc, #576]	@ (8005928 <UART_SetConfig+0x2c8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d126      	bne.n	8005738 <UART_SetConfig+0xd8>
 80056ea:	4b90      	ldr	r3, [pc, #576]	@ (800592c <UART_SetConfig+0x2cc>)
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d81b      	bhi.n	8005730 <UART_SetConfig+0xd0>
 80056f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005700 <UART_SetConfig+0xa0>)
 80056fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fe:	bf00      	nop
 8005700:	08005711 	.word	0x08005711
 8005704:	08005721 	.word	0x08005721
 8005708:	08005719 	.word	0x08005719
 800570c:	08005729 	.word	0x08005729
 8005710:	2301      	movs	r3, #1
 8005712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005716:	e116      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005718:	2302      	movs	r3, #2
 800571a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800571e:	e112      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005720:	2304      	movs	r3, #4
 8005722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005726:	e10e      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005728:	2308      	movs	r3, #8
 800572a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800572e:	e10a      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005730:	2310      	movs	r3, #16
 8005732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005736:	e106      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a7c      	ldr	r2, [pc, #496]	@ (8005930 <UART_SetConfig+0x2d0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d138      	bne.n	80057b4 <UART_SetConfig+0x154>
 8005742:	4b7a      	ldr	r3, [pc, #488]	@ (800592c <UART_SetConfig+0x2cc>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005748:	f003 030c 	and.w	r3, r3, #12
 800574c:	2b0c      	cmp	r3, #12
 800574e:	d82d      	bhi.n	80057ac <UART_SetConfig+0x14c>
 8005750:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <UART_SetConfig+0xf8>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	0800578d 	.word	0x0800578d
 800575c:	080057ad 	.word	0x080057ad
 8005760:	080057ad 	.word	0x080057ad
 8005764:	080057ad 	.word	0x080057ad
 8005768:	0800579d 	.word	0x0800579d
 800576c:	080057ad 	.word	0x080057ad
 8005770:	080057ad 	.word	0x080057ad
 8005774:	080057ad 	.word	0x080057ad
 8005778:	08005795 	.word	0x08005795
 800577c:	080057ad 	.word	0x080057ad
 8005780:	080057ad 	.word	0x080057ad
 8005784:	080057ad 	.word	0x080057ad
 8005788:	080057a5 	.word	0x080057a5
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005792:	e0d8      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005794:	2302      	movs	r3, #2
 8005796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800579a:	e0d4      	b.n	8005946 <UART_SetConfig+0x2e6>
 800579c:	2304      	movs	r3, #4
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057a2:	e0d0      	b.n	8005946 <UART_SetConfig+0x2e6>
 80057a4:	2308      	movs	r3, #8
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057aa:	e0cc      	b.n	8005946 <UART_SetConfig+0x2e6>
 80057ac:	2310      	movs	r3, #16
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b2:	e0c8      	b.n	8005946 <UART_SetConfig+0x2e6>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a5e      	ldr	r2, [pc, #376]	@ (8005934 <UART_SetConfig+0x2d4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d125      	bne.n	800580a <UART_SetConfig+0x1aa>
 80057be:	4b5b      	ldr	r3, [pc, #364]	@ (800592c <UART_SetConfig+0x2cc>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057c8:	2b30      	cmp	r3, #48	@ 0x30
 80057ca:	d016      	beq.n	80057fa <UART_SetConfig+0x19a>
 80057cc:	2b30      	cmp	r3, #48	@ 0x30
 80057ce:	d818      	bhi.n	8005802 <UART_SetConfig+0x1a2>
 80057d0:	2b20      	cmp	r3, #32
 80057d2:	d00a      	beq.n	80057ea <UART_SetConfig+0x18a>
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d814      	bhi.n	8005802 <UART_SetConfig+0x1a2>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <UART_SetConfig+0x182>
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d008      	beq.n	80057f2 <UART_SetConfig+0x192>
 80057e0:	e00f      	b.n	8005802 <UART_SetConfig+0x1a2>
 80057e2:	2300      	movs	r3, #0
 80057e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057e8:	e0ad      	b.n	8005946 <UART_SetConfig+0x2e6>
 80057ea:	2302      	movs	r3, #2
 80057ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057f0:	e0a9      	b.n	8005946 <UART_SetConfig+0x2e6>
 80057f2:	2304      	movs	r3, #4
 80057f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057f8:	e0a5      	b.n	8005946 <UART_SetConfig+0x2e6>
 80057fa:	2308      	movs	r3, #8
 80057fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005800:	e0a1      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005802:	2310      	movs	r3, #16
 8005804:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005808:	e09d      	b.n	8005946 <UART_SetConfig+0x2e6>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a4a      	ldr	r2, [pc, #296]	@ (8005938 <UART_SetConfig+0x2d8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d125      	bne.n	8005860 <UART_SetConfig+0x200>
 8005814:	4b45      	ldr	r3, [pc, #276]	@ (800592c <UART_SetConfig+0x2cc>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800581e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005820:	d016      	beq.n	8005850 <UART_SetConfig+0x1f0>
 8005822:	2bc0      	cmp	r3, #192	@ 0xc0
 8005824:	d818      	bhi.n	8005858 <UART_SetConfig+0x1f8>
 8005826:	2b80      	cmp	r3, #128	@ 0x80
 8005828:	d00a      	beq.n	8005840 <UART_SetConfig+0x1e0>
 800582a:	2b80      	cmp	r3, #128	@ 0x80
 800582c:	d814      	bhi.n	8005858 <UART_SetConfig+0x1f8>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <UART_SetConfig+0x1d8>
 8005832:	2b40      	cmp	r3, #64	@ 0x40
 8005834:	d008      	beq.n	8005848 <UART_SetConfig+0x1e8>
 8005836:	e00f      	b.n	8005858 <UART_SetConfig+0x1f8>
 8005838:	2300      	movs	r3, #0
 800583a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800583e:	e082      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005840:	2302      	movs	r3, #2
 8005842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005846:	e07e      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005848:	2304      	movs	r3, #4
 800584a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800584e:	e07a      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005850:	2308      	movs	r3, #8
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005856:	e076      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005858:	2310      	movs	r3, #16
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800585e:	e072      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a35      	ldr	r2, [pc, #212]	@ (800593c <UART_SetConfig+0x2dc>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d12a      	bne.n	80058c0 <UART_SetConfig+0x260>
 800586a:	4b30      	ldr	r3, [pc, #192]	@ (800592c <UART_SetConfig+0x2cc>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005870:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005874:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005878:	d01a      	beq.n	80058b0 <UART_SetConfig+0x250>
 800587a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800587e:	d81b      	bhi.n	80058b8 <UART_SetConfig+0x258>
 8005880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005884:	d00c      	beq.n	80058a0 <UART_SetConfig+0x240>
 8005886:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800588a:	d815      	bhi.n	80058b8 <UART_SetConfig+0x258>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <UART_SetConfig+0x238>
 8005890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005894:	d008      	beq.n	80058a8 <UART_SetConfig+0x248>
 8005896:	e00f      	b.n	80058b8 <UART_SetConfig+0x258>
 8005898:	2300      	movs	r3, #0
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800589e:	e052      	b.n	8005946 <UART_SetConfig+0x2e6>
 80058a0:	2302      	movs	r3, #2
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058a6:	e04e      	b.n	8005946 <UART_SetConfig+0x2e6>
 80058a8:	2304      	movs	r3, #4
 80058aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ae:	e04a      	b.n	8005946 <UART_SetConfig+0x2e6>
 80058b0:	2308      	movs	r3, #8
 80058b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058b6:	e046      	b.n	8005946 <UART_SetConfig+0x2e6>
 80058b8:	2310      	movs	r3, #16
 80058ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058be:	e042      	b.n	8005946 <UART_SetConfig+0x2e6>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a17      	ldr	r2, [pc, #92]	@ (8005924 <UART_SetConfig+0x2c4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d13a      	bne.n	8005940 <UART_SetConfig+0x2e0>
 80058ca:	4b18      	ldr	r3, [pc, #96]	@ (800592c <UART_SetConfig+0x2cc>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058d8:	d01a      	beq.n	8005910 <UART_SetConfig+0x2b0>
 80058da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058de:	d81b      	bhi.n	8005918 <UART_SetConfig+0x2b8>
 80058e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058e4:	d00c      	beq.n	8005900 <UART_SetConfig+0x2a0>
 80058e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058ea:	d815      	bhi.n	8005918 <UART_SetConfig+0x2b8>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <UART_SetConfig+0x298>
 80058f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058f4:	d008      	beq.n	8005908 <UART_SetConfig+0x2a8>
 80058f6:	e00f      	b.n	8005918 <UART_SetConfig+0x2b8>
 80058f8:	2300      	movs	r3, #0
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058fe:	e022      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005900:	2302      	movs	r3, #2
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005906:	e01e      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005908:	2304      	movs	r3, #4
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800590e:	e01a      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005910:	2308      	movs	r3, #8
 8005912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005916:	e016      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005918:	2310      	movs	r3, #16
 800591a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800591e:	e012      	b.n	8005946 <UART_SetConfig+0x2e6>
 8005920:	efff69f3 	.word	0xefff69f3
 8005924:	40008000 	.word	0x40008000
 8005928:	40013800 	.word	0x40013800
 800592c:	40021000 	.word	0x40021000
 8005930:	40004400 	.word	0x40004400
 8005934:	40004800 	.word	0x40004800
 8005938:	40004c00 	.word	0x40004c00
 800593c:	40005000 	.word	0x40005000
 8005940:	2310      	movs	r3, #16
 8005942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a9f      	ldr	r2, [pc, #636]	@ (8005bc8 <UART_SetConfig+0x568>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d17a      	bne.n	8005a46 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005950:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005954:	2b08      	cmp	r3, #8
 8005956:	d824      	bhi.n	80059a2 <UART_SetConfig+0x342>
 8005958:	a201      	add	r2, pc, #4	@ (adr r2, 8005960 <UART_SetConfig+0x300>)
 800595a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595e:	bf00      	nop
 8005960:	08005985 	.word	0x08005985
 8005964:	080059a3 	.word	0x080059a3
 8005968:	0800598d 	.word	0x0800598d
 800596c:	080059a3 	.word	0x080059a3
 8005970:	08005993 	.word	0x08005993
 8005974:	080059a3 	.word	0x080059a3
 8005978:	080059a3 	.word	0x080059a3
 800597c:	080059a3 	.word	0x080059a3
 8005980:	0800599b 	.word	0x0800599b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005984:	f7fe fb34 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8005988:	61f8      	str	r0, [r7, #28]
        break;
 800598a:	e010      	b.n	80059ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800598c:	4b8f      	ldr	r3, [pc, #572]	@ (8005bcc <UART_SetConfig+0x56c>)
 800598e:	61fb      	str	r3, [r7, #28]
        break;
 8005990:	e00d      	b.n	80059ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005992:	f7fe fa95 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8005996:	61f8      	str	r0, [r7, #28]
        break;
 8005998:	e009      	b.n	80059ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800599a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800599e:	61fb      	str	r3, [r7, #28]
        break;
 80059a0:	e005      	b.n	80059ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80059ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80fb 	beq.w	8005bac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	4413      	add	r3, r2
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d305      	bcc.n	80059d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d903      	bls.n	80059da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059d8:	e0e8      	b.n	8005bac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	2200      	movs	r2, #0
 80059de:	461c      	mov	r4, r3
 80059e0:	4615      	mov	r5, r2
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	022b      	lsls	r3, r5, #8
 80059ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80059f0:	0222      	lsls	r2, r4, #8
 80059f2:	68f9      	ldr	r1, [r7, #12]
 80059f4:	6849      	ldr	r1, [r1, #4]
 80059f6:	0849      	lsrs	r1, r1, #1
 80059f8:	2000      	movs	r0, #0
 80059fa:	4688      	mov	r8, r1
 80059fc:	4681      	mov	r9, r0
 80059fe:	eb12 0a08 	adds.w	sl, r2, r8
 8005a02:	eb43 0b09 	adc.w	fp, r3, r9
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	603b      	str	r3, [r7, #0]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a14:	4650      	mov	r0, sl
 8005a16:	4659      	mov	r1, fp
 8005a18:	f7fb f936 	bl	8000c88 <__aeabi_uldivmod>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4613      	mov	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a2a:	d308      	bcc.n	8005a3e <UART_SetConfig+0x3de>
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a32:	d204      	bcs.n	8005a3e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	60da      	str	r2, [r3, #12]
 8005a3c:	e0b6      	b.n	8005bac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a44:	e0b2      	b.n	8005bac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a4e:	d15e      	bne.n	8005b0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005a50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d828      	bhi.n	8005aaa <UART_SetConfig+0x44a>
 8005a58:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <UART_SetConfig+0x400>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005a85 	.word	0x08005a85
 8005a64:	08005a8d 	.word	0x08005a8d
 8005a68:	08005a95 	.word	0x08005a95
 8005a6c:	08005aab 	.word	0x08005aab
 8005a70:	08005a9b 	.word	0x08005a9b
 8005a74:	08005aab 	.word	0x08005aab
 8005a78:	08005aab 	.word	0x08005aab
 8005a7c:	08005aab 	.word	0x08005aab
 8005a80:	08005aa3 	.word	0x08005aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a84:	f7fe fab4 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8005a88:	61f8      	str	r0, [r7, #28]
        break;
 8005a8a:	e014      	b.n	8005ab6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a8c:	f7fe fac6 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 8005a90:	61f8      	str	r0, [r7, #28]
        break;
 8005a92:	e010      	b.n	8005ab6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a94:	4b4d      	ldr	r3, [pc, #308]	@ (8005bcc <UART_SetConfig+0x56c>)
 8005a96:	61fb      	str	r3, [r7, #28]
        break;
 8005a98:	e00d      	b.n	8005ab6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a9a:	f7fe fa11 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8005a9e:	61f8      	str	r0, [r7, #28]
        break;
 8005aa0:	e009      	b.n	8005ab6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aa6:	61fb      	str	r3, [r7, #28]
        break;
 8005aa8:	e005      	b.n	8005ab6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d077      	beq.n	8005bac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	005a      	lsls	r2, r3, #1
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	441a      	add	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b0f      	cmp	r3, #15
 8005ad6:	d916      	bls.n	8005b06 <UART_SetConfig+0x4a6>
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ade:	d212      	bcs.n	8005b06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f023 030f 	bic.w	r3, r3, #15
 8005ae8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	085b      	lsrs	r3, r3, #1
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	8afb      	ldrh	r3, [r7, #22]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	8afa      	ldrh	r2, [r7, #22]
 8005b02:	60da      	str	r2, [r3, #12]
 8005b04:	e052      	b.n	8005bac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b0c:	e04e      	b.n	8005bac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d827      	bhi.n	8005b66 <UART_SetConfig+0x506>
 8005b16:	a201      	add	r2, pc, #4	@ (adr r2, 8005b1c <UART_SetConfig+0x4bc>)
 8005b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	08005b51 	.word	0x08005b51
 8005b28:	08005b67 	.word	0x08005b67
 8005b2c:	08005b57 	.word	0x08005b57
 8005b30:	08005b67 	.word	0x08005b67
 8005b34:	08005b67 	.word	0x08005b67
 8005b38:	08005b67 	.word	0x08005b67
 8005b3c:	08005b5f 	.word	0x08005b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b40:	f7fe fa56 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8005b44:	61f8      	str	r0, [r7, #28]
        break;
 8005b46:	e014      	b.n	8005b72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b48:	f7fe fa68 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 8005b4c:	61f8      	str	r0, [r7, #28]
        break;
 8005b4e:	e010      	b.n	8005b72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b50:	4b1e      	ldr	r3, [pc, #120]	@ (8005bcc <UART_SetConfig+0x56c>)
 8005b52:	61fb      	str	r3, [r7, #28]
        break;
 8005b54:	e00d      	b.n	8005b72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b56:	f7fe f9b3 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8005b5a:	61f8      	str	r0, [r7, #28]
        break;
 8005b5c:	e009      	b.n	8005b72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b62:	61fb      	str	r3, [r7, #28]
        break;
 8005b64:	e005      	b.n	8005b72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b70:	bf00      	nop
    }

    if (pclk != 0U)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d019      	beq.n	8005bac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	085a      	lsrs	r2, r3, #1
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	441a      	add	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b0f      	cmp	r3, #15
 8005b90:	d909      	bls.n	8005ba6 <UART_SetConfig+0x546>
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b98:	d205      	bcs.n	8005ba6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60da      	str	r2, [r3, #12]
 8005ba4:	e002      	b.n	8005bac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005bb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3728      	adds	r7, #40	@ 0x28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40008000 	.word	0x40008000
 8005bcc:	00f42400 	.word	0x00f42400

08005bd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01a      	beq.n	8005ce6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cce:	d10a      	bne.n	8005ce6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	605a      	str	r2, [r3, #4]
  }
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b098      	sub	sp, #96	@ 0x60
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d24:	f7fc f8ca 	bl	8001ebc <HAL_GetTick>
 8005d28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d12e      	bne.n	8005d96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d40:	2200      	movs	r2, #0
 8005d42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f88c 	bl	8005e64 <UART_WaitOnFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d021      	beq.n	8005d96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d66:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e6      	bne.n	8005d52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e062      	b.n	8005e5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d149      	bne.n	8005e38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005da4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dac:	2200      	movs	r2, #0
 8005dae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f856 	bl	8005e64 <UART_WaitOnFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d03c      	beq.n	8005e38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	623b      	str	r3, [r7, #32]
   return(result);
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ddc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dde:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e6      	bne.n	8005dbe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3308      	adds	r3, #8
 8005df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0301 	bic.w	r3, r3, #1
 8005e06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e10:	61fa      	str	r2, [r7, #28]
 8005e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	69b9      	ldr	r1, [r7, #24]
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e5      	bne.n	8005df0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e011      	b.n	8005e5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3758      	adds	r7, #88	@ 0x58
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	4613      	mov	r3, r2
 8005e72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e74:	e04f      	b.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7c:	d04b      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7e:	f7fc f81d 	bl	8001ebc <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d302      	bcc.n	8005e94 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e04e      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d037      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b80      	cmp	r3, #128	@ 0x80
 8005eaa:	d034      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b40      	cmp	r3, #64	@ 0x40
 8005eb0:	d031      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d110      	bne.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f838 	bl	8005f3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e029      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ef0:	d111      	bne.n	8005f16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005efa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f81e 	bl	8005f3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e00f      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	bf0c      	ite	eq
 8005f26:	2301      	moveq	r3, #1
 8005f28:	2300      	movne	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d0a0      	beq.n	8005e76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b095      	sub	sp, #84	@ 0x54
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f64:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e6      	bne.n	8005f46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3308      	adds	r3, #8
 8005f96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e5      	bne.n	8005f78 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d118      	bne.n	8005fe6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f023 0310 	bic.w	r3, r3, #16
 8005fc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6979      	ldr	r1, [r7, #20]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e6      	bne.n	8005fb4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ffa:	bf00      	nop
 8005ffc:	3754      	adds	r7, #84	@ 0x54
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <__cvt>:
 8006006:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800600a:	ec57 6b10 	vmov	r6, r7, d0
 800600e:	2f00      	cmp	r7, #0
 8006010:	460c      	mov	r4, r1
 8006012:	4619      	mov	r1, r3
 8006014:	463b      	mov	r3, r7
 8006016:	bfbb      	ittet	lt
 8006018:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800601c:	461f      	movlt	r7, r3
 800601e:	2300      	movge	r3, #0
 8006020:	232d      	movlt	r3, #45	@ 0x2d
 8006022:	700b      	strb	r3, [r1, #0]
 8006024:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006026:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800602a:	4691      	mov	r9, r2
 800602c:	f023 0820 	bic.w	r8, r3, #32
 8006030:	bfbc      	itt	lt
 8006032:	4632      	movlt	r2, r6
 8006034:	4616      	movlt	r6, r2
 8006036:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800603a:	d005      	beq.n	8006048 <__cvt+0x42>
 800603c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006040:	d100      	bne.n	8006044 <__cvt+0x3e>
 8006042:	3401      	adds	r4, #1
 8006044:	2102      	movs	r1, #2
 8006046:	e000      	b.n	800604a <__cvt+0x44>
 8006048:	2103      	movs	r1, #3
 800604a:	ab03      	add	r3, sp, #12
 800604c:	9301      	str	r3, [sp, #4]
 800604e:	ab02      	add	r3, sp, #8
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	ec47 6b10 	vmov	d0, r6, r7
 8006056:	4653      	mov	r3, sl
 8006058:	4622      	mov	r2, r4
 800605a:	f001 f875 	bl	8007148 <_dtoa_r>
 800605e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006062:	4605      	mov	r5, r0
 8006064:	d119      	bne.n	800609a <__cvt+0x94>
 8006066:	f019 0f01 	tst.w	r9, #1
 800606a:	d00e      	beq.n	800608a <__cvt+0x84>
 800606c:	eb00 0904 	add.w	r9, r0, r4
 8006070:	2200      	movs	r2, #0
 8006072:	2300      	movs	r3, #0
 8006074:	4630      	mov	r0, r6
 8006076:	4639      	mov	r1, r7
 8006078:	f7fa fd26 	bl	8000ac8 <__aeabi_dcmpeq>
 800607c:	b108      	cbz	r0, 8006082 <__cvt+0x7c>
 800607e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006082:	2230      	movs	r2, #48	@ 0x30
 8006084:	9b03      	ldr	r3, [sp, #12]
 8006086:	454b      	cmp	r3, r9
 8006088:	d31e      	bcc.n	80060c8 <__cvt+0xc2>
 800608a:	9b03      	ldr	r3, [sp, #12]
 800608c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800608e:	1b5b      	subs	r3, r3, r5
 8006090:	4628      	mov	r0, r5
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	b004      	add	sp, #16
 8006096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800609e:	eb00 0904 	add.w	r9, r0, r4
 80060a2:	d1e5      	bne.n	8006070 <__cvt+0x6a>
 80060a4:	7803      	ldrb	r3, [r0, #0]
 80060a6:	2b30      	cmp	r3, #48	@ 0x30
 80060a8:	d10a      	bne.n	80060c0 <__cvt+0xba>
 80060aa:	2200      	movs	r2, #0
 80060ac:	2300      	movs	r3, #0
 80060ae:	4630      	mov	r0, r6
 80060b0:	4639      	mov	r1, r7
 80060b2:	f7fa fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 80060b6:	b918      	cbnz	r0, 80060c0 <__cvt+0xba>
 80060b8:	f1c4 0401 	rsb	r4, r4, #1
 80060bc:	f8ca 4000 	str.w	r4, [sl]
 80060c0:	f8da 3000 	ldr.w	r3, [sl]
 80060c4:	4499      	add	r9, r3
 80060c6:	e7d3      	b.n	8006070 <__cvt+0x6a>
 80060c8:	1c59      	adds	r1, r3, #1
 80060ca:	9103      	str	r1, [sp, #12]
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	e7d9      	b.n	8006084 <__cvt+0x7e>

080060d0 <__exponent>:
 80060d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060d2:	2900      	cmp	r1, #0
 80060d4:	bfba      	itte	lt
 80060d6:	4249      	neglt	r1, r1
 80060d8:	232d      	movlt	r3, #45	@ 0x2d
 80060da:	232b      	movge	r3, #43	@ 0x2b
 80060dc:	2909      	cmp	r1, #9
 80060de:	7002      	strb	r2, [r0, #0]
 80060e0:	7043      	strb	r3, [r0, #1]
 80060e2:	dd29      	ble.n	8006138 <__exponent+0x68>
 80060e4:	f10d 0307 	add.w	r3, sp, #7
 80060e8:	461d      	mov	r5, r3
 80060ea:	270a      	movs	r7, #10
 80060ec:	461a      	mov	r2, r3
 80060ee:	fbb1 f6f7 	udiv	r6, r1, r7
 80060f2:	fb07 1416 	mls	r4, r7, r6, r1
 80060f6:	3430      	adds	r4, #48	@ 0x30
 80060f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80060fc:	460c      	mov	r4, r1
 80060fe:	2c63      	cmp	r4, #99	@ 0x63
 8006100:	f103 33ff 	add.w	r3, r3, #4294967295
 8006104:	4631      	mov	r1, r6
 8006106:	dcf1      	bgt.n	80060ec <__exponent+0x1c>
 8006108:	3130      	adds	r1, #48	@ 0x30
 800610a:	1e94      	subs	r4, r2, #2
 800610c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006110:	1c41      	adds	r1, r0, #1
 8006112:	4623      	mov	r3, r4
 8006114:	42ab      	cmp	r3, r5
 8006116:	d30a      	bcc.n	800612e <__exponent+0x5e>
 8006118:	f10d 0309 	add.w	r3, sp, #9
 800611c:	1a9b      	subs	r3, r3, r2
 800611e:	42ac      	cmp	r4, r5
 8006120:	bf88      	it	hi
 8006122:	2300      	movhi	r3, #0
 8006124:	3302      	adds	r3, #2
 8006126:	4403      	add	r3, r0
 8006128:	1a18      	subs	r0, r3, r0
 800612a:	b003      	add	sp, #12
 800612c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800612e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006132:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006136:	e7ed      	b.n	8006114 <__exponent+0x44>
 8006138:	2330      	movs	r3, #48	@ 0x30
 800613a:	3130      	adds	r1, #48	@ 0x30
 800613c:	7083      	strb	r3, [r0, #2]
 800613e:	70c1      	strb	r1, [r0, #3]
 8006140:	1d03      	adds	r3, r0, #4
 8006142:	e7f1      	b.n	8006128 <__exponent+0x58>

08006144 <_printf_float>:
 8006144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006148:	b08d      	sub	sp, #52	@ 0x34
 800614a:	460c      	mov	r4, r1
 800614c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006150:	4616      	mov	r6, r2
 8006152:	461f      	mov	r7, r3
 8006154:	4605      	mov	r5, r0
 8006156:	f000 feef 	bl	8006f38 <_localeconv_r>
 800615a:	6803      	ldr	r3, [r0, #0]
 800615c:	9304      	str	r3, [sp, #16]
 800615e:	4618      	mov	r0, r3
 8006160:	f7fa f886 	bl	8000270 <strlen>
 8006164:	2300      	movs	r3, #0
 8006166:	930a      	str	r3, [sp, #40]	@ 0x28
 8006168:	f8d8 3000 	ldr.w	r3, [r8]
 800616c:	9005      	str	r0, [sp, #20]
 800616e:	3307      	adds	r3, #7
 8006170:	f023 0307 	bic.w	r3, r3, #7
 8006174:	f103 0208 	add.w	r2, r3, #8
 8006178:	f894 a018 	ldrb.w	sl, [r4, #24]
 800617c:	f8d4 b000 	ldr.w	fp, [r4]
 8006180:	f8c8 2000 	str.w	r2, [r8]
 8006184:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006188:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800618c:	9307      	str	r3, [sp, #28]
 800618e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006192:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800619a:	4b9c      	ldr	r3, [pc, #624]	@ (800640c <_printf_float+0x2c8>)
 800619c:	f04f 32ff 	mov.w	r2, #4294967295
 80061a0:	f7fa fcc4 	bl	8000b2c <__aeabi_dcmpun>
 80061a4:	bb70      	cbnz	r0, 8006204 <_printf_float+0xc0>
 80061a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061aa:	4b98      	ldr	r3, [pc, #608]	@ (800640c <_printf_float+0x2c8>)
 80061ac:	f04f 32ff 	mov.w	r2, #4294967295
 80061b0:	f7fa fc9e 	bl	8000af0 <__aeabi_dcmple>
 80061b4:	bb30      	cbnz	r0, 8006204 <_printf_float+0xc0>
 80061b6:	2200      	movs	r2, #0
 80061b8:	2300      	movs	r3, #0
 80061ba:	4640      	mov	r0, r8
 80061bc:	4649      	mov	r1, r9
 80061be:	f7fa fc8d 	bl	8000adc <__aeabi_dcmplt>
 80061c2:	b110      	cbz	r0, 80061ca <_printf_float+0x86>
 80061c4:	232d      	movs	r3, #45	@ 0x2d
 80061c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061ca:	4a91      	ldr	r2, [pc, #580]	@ (8006410 <_printf_float+0x2cc>)
 80061cc:	4b91      	ldr	r3, [pc, #580]	@ (8006414 <_printf_float+0x2d0>)
 80061ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80061d2:	bf94      	ite	ls
 80061d4:	4690      	movls	r8, r2
 80061d6:	4698      	movhi	r8, r3
 80061d8:	2303      	movs	r3, #3
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	f02b 0304 	bic.w	r3, fp, #4
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	f04f 0900 	mov.w	r9, #0
 80061e6:	9700      	str	r7, [sp, #0]
 80061e8:	4633      	mov	r3, r6
 80061ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80061ec:	4621      	mov	r1, r4
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 f9d2 	bl	8006598 <_printf_common>
 80061f4:	3001      	adds	r0, #1
 80061f6:	f040 808d 	bne.w	8006314 <_printf_float+0x1d0>
 80061fa:	f04f 30ff 	mov.w	r0, #4294967295
 80061fe:	b00d      	add	sp, #52	@ 0x34
 8006200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006204:	4642      	mov	r2, r8
 8006206:	464b      	mov	r3, r9
 8006208:	4640      	mov	r0, r8
 800620a:	4649      	mov	r1, r9
 800620c:	f7fa fc8e 	bl	8000b2c <__aeabi_dcmpun>
 8006210:	b140      	cbz	r0, 8006224 <_printf_float+0xe0>
 8006212:	464b      	mov	r3, r9
 8006214:	2b00      	cmp	r3, #0
 8006216:	bfbc      	itt	lt
 8006218:	232d      	movlt	r3, #45	@ 0x2d
 800621a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800621e:	4a7e      	ldr	r2, [pc, #504]	@ (8006418 <_printf_float+0x2d4>)
 8006220:	4b7e      	ldr	r3, [pc, #504]	@ (800641c <_printf_float+0x2d8>)
 8006222:	e7d4      	b.n	80061ce <_printf_float+0x8a>
 8006224:	6863      	ldr	r3, [r4, #4]
 8006226:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800622a:	9206      	str	r2, [sp, #24]
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	d13b      	bne.n	80062a8 <_printf_float+0x164>
 8006230:	2306      	movs	r3, #6
 8006232:	6063      	str	r3, [r4, #4]
 8006234:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006238:	2300      	movs	r3, #0
 800623a:	6022      	str	r2, [r4, #0]
 800623c:	9303      	str	r3, [sp, #12]
 800623e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006240:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006244:	ab09      	add	r3, sp, #36	@ 0x24
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	6861      	ldr	r1, [r4, #4]
 800624a:	ec49 8b10 	vmov	d0, r8, r9
 800624e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006252:	4628      	mov	r0, r5
 8006254:	f7ff fed7 	bl	8006006 <__cvt>
 8006258:	9b06      	ldr	r3, [sp, #24]
 800625a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800625c:	2b47      	cmp	r3, #71	@ 0x47
 800625e:	4680      	mov	r8, r0
 8006260:	d129      	bne.n	80062b6 <_printf_float+0x172>
 8006262:	1cc8      	adds	r0, r1, #3
 8006264:	db02      	blt.n	800626c <_printf_float+0x128>
 8006266:	6863      	ldr	r3, [r4, #4]
 8006268:	4299      	cmp	r1, r3
 800626a:	dd41      	ble.n	80062f0 <_printf_float+0x1ac>
 800626c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006270:	fa5f fa8a 	uxtb.w	sl, sl
 8006274:	3901      	subs	r1, #1
 8006276:	4652      	mov	r2, sl
 8006278:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800627c:	9109      	str	r1, [sp, #36]	@ 0x24
 800627e:	f7ff ff27 	bl	80060d0 <__exponent>
 8006282:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006284:	1813      	adds	r3, r2, r0
 8006286:	2a01      	cmp	r2, #1
 8006288:	4681      	mov	r9, r0
 800628a:	6123      	str	r3, [r4, #16]
 800628c:	dc02      	bgt.n	8006294 <_printf_float+0x150>
 800628e:	6822      	ldr	r2, [r4, #0]
 8006290:	07d2      	lsls	r2, r2, #31
 8006292:	d501      	bpl.n	8006298 <_printf_float+0x154>
 8006294:	3301      	adds	r3, #1
 8006296:	6123      	str	r3, [r4, #16]
 8006298:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0a2      	beq.n	80061e6 <_printf_float+0xa2>
 80062a0:	232d      	movs	r3, #45	@ 0x2d
 80062a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062a6:	e79e      	b.n	80061e6 <_printf_float+0xa2>
 80062a8:	9a06      	ldr	r2, [sp, #24]
 80062aa:	2a47      	cmp	r2, #71	@ 0x47
 80062ac:	d1c2      	bne.n	8006234 <_printf_float+0xf0>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1c0      	bne.n	8006234 <_printf_float+0xf0>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e7bd      	b.n	8006232 <_printf_float+0xee>
 80062b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062ba:	d9db      	bls.n	8006274 <_printf_float+0x130>
 80062bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80062c0:	d118      	bne.n	80062f4 <_printf_float+0x1b0>
 80062c2:	2900      	cmp	r1, #0
 80062c4:	6863      	ldr	r3, [r4, #4]
 80062c6:	dd0b      	ble.n	80062e0 <_printf_float+0x19c>
 80062c8:	6121      	str	r1, [r4, #16]
 80062ca:	b913      	cbnz	r3, 80062d2 <_printf_float+0x18e>
 80062cc:	6822      	ldr	r2, [r4, #0]
 80062ce:	07d0      	lsls	r0, r2, #31
 80062d0:	d502      	bpl.n	80062d8 <_printf_float+0x194>
 80062d2:	3301      	adds	r3, #1
 80062d4:	440b      	add	r3, r1
 80062d6:	6123      	str	r3, [r4, #16]
 80062d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80062da:	f04f 0900 	mov.w	r9, #0
 80062de:	e7db      	b.n	8006298 <_printf_float+0x154>
 80062e0:	b913      	cbnz	r3, 80062e8 <_printf_float+0x1a4>
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	07d2      	lsls	r2, r2, #31
 80062e6:	d501      	bpl.n	80062ec <_printf_float+0x1a8>
 80062e8:	3302      	adds	r3, #2
 80062ea:	e7f4      	b.n	80062d6 <_printf_float+0x192>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e7f2      	b.n	80062d6 <_printf_float+0x192>
 80062f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80062f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062f6:	4299      	cmp	r1, r3
 80062f8:	db05      	blt.n	8006306 <_printf_float+0x1c2>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	6121      	str	r1, [r4, #16]
 80062fe:	07d8      	lsls	r0, r3, #31
 8006300:	d5ea      	bpl.n	80062d8 <_printf_float+0x194>
 8006302:	1c4b      	adds	r3, r1, #1
 8006304:	e7e7      	b.n	80062d6 <_printf_float+0x192>
 8006306:	2900      	cmp	r1, #0
 8006308:	bfd4      	ite	le
 800630a:	f1c1 0202 	rsble	r2, r1, #2
 800630e:	2201      	movgt	r2, #1
 8006310:	4413      	add	r3, r2
 8006312:	e7e0      	b.n	80062d6 <_printf_float+0x192>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	055a      	lsls	r2, r3, #21
 8006318:	d407      	bmi.n	800632a <_printf_float+0x1e6>
 800631a:	6923      	ldr	r3, [r4, #16]
 800631c:	4642      	mov	r2, r8
 800631e:	4631      	mov	r1, r6
 8006320:	4628      	mov	r0, r5
 8006322:	47b8      	blx	r7
 8006324:	3001      	adds	r0, #1
 8006326:	d12b      	bne.n	8006380 <_printf_float+0x23c>
 8006328:	e767      	b.n	80061fa <_printf_float+0xb6>
 800632a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800632e:	f240 80dd 	bls.w	80064ec <_printf_float+0x3a8>
 8006332:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006336:	2200      	movs	r2, #0
 8006338:	2300      	movs	r3, #0
 800633a:	f7fa fbc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800633e:	2800      	cmp	r0, #0
 8006340:	d033      	beq.n	80063aa <_printf_float+0x266>
 8006342:	4a37      	ldr	r2, [pc, #220]	@ (8006420 <_printf_float+0x2dc>)
 8006344:	2301      	movs	r3, #1
 8006346:	4631      	mov	r1, r6
 8006348:	4628      	mov	r0, r5
 800634a:	47b8      	blx	r7
 800634c:	3001      	adds	r0, #1
 800634e:	f43f af54 	beq.w	80061fa <_printf_float+0xb6>
 8006352:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006356:	4543      	cmp	r3, r8
 8006358:	db02      	blt.n	8006360 <_printf_float+0x21c>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	07d8      	lsls	r0, r3, #31
 800635e:	d50f      	bpl.n	8006380 <_printf_float+0x23c>
 8006360:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006364:	4631      	mov	r1, r6
 8006366:	4628      	mov	r0, r5
 8006368:	47b8      	blx	r7
 800636a:	3001      	adds	r0, #1
 800636c:	f43f af45 	beq.w	80061fa <_printf_float+0xb6>
 8006370:	f04f 0900 	mov.w	r9, #0
 8006374:	f108 38ff 	add.w	r8, r8, #4294967295
 8006378:	f104 0a1a 	add.w	sl, r4, #26
 800637c:	45c8      	cmp	r8, r9
 800637e:	dc09      	bgt.n	8006394 <_printf_float+0x250>
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	079b      	lsls	r3, r3, #30
 8006384:	f100 8103 	bmi.w	800658e <_printf_float+0x44a>
 8006388:	68e0      	ldr	r0, [r4, #12]
 800638a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800638c:	4298      	cmp	r0, r3
 800638e:	bfb8      	it	lt
 8006390:	4618      	movlt	r0, r3
 8006392:	e734      	b.n	80061fe <_printf_float+0xba>
 8006394:	2301      	movs	r3, #1
 8006396:	4652      	mov	r2, sl
 8006398:	4631      	mov	r1, r6
 800639a:	4628      	mov	r0, r5
 800639c:	47b8      	blx	r7
 800639e:	3001      	adds	r0, #1
 80063a0:	f43f af2b 	beq.w	80061fa <_printf_float+0xb6>
 80063a4:	f109 0901 	add.w	r9, r9, #1
 80063a8:	e7e8      	b.n	800637c <_printf_float+0x238>
 80063aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dc39      	bgt.n	8006424 <_printf_float+0x2e0>
 80063b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006420 <_printf_float+0x2dc>)
 80063b2:	2301      	movs	r3, #1
 80063b4:	4631      	mov	r1, r6
 80063b6:	4628      	mov	r0, r5
 80063b8:	47b8      	blx	r7
 80063ba:	3001      	adds	r0, #1
 80063bc:	f43f af1d 	beq.w	80061fa <_printf_float+0xb6>
 80063c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80063c4:	ea59 0303 	orrs.w	r3, r9, r3
 80063c8:	d102      	bne.n	80063d0 <_printf_float+0x28c>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	07d9      	lsls	r1, r3, #31
 80063ce:	d5d7      	bpl.n	8006380 <_printf_float+0x23c>
 80063d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063d4:	4631      	mov	r1, r6
 80063d6:	4628      	mov	r0, r5
 80063d8:	47b8      	blx	r7
 80063da:	3001      	adds	r0, #1
 80063dc:	f43f af0d 	beq.w	80061fa <_printf_float+0xb6>
 80063e0:	f04f 0a00 	mov.w	sl, #0
 80063e4:	f104 0b1a 	add.w	fp, r4, #26
 80063e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ea:	425b      	negs	r3, r3
 80063ec:	4553      	cmp	r3, sl
 80063ee:	dc01      	bgt.n	80063f4 <_printf_float+0x2b0>
 80063f0:	464b      	mov	r3, r9
 80063f2:	e793      	b.n	800631c <_printf_float+0x1d8>
 80063f4:	2301      	movs	r3, #1
 80063f6:	465a      	mov	r2, fp
 80063f8:	4631      	mov	r1, r6
 80063fa:	4628      	mov	r0, r5
 80063fc:	47b8      	blx	r7
 80063fe:	3001      	adds	r0, #1
 8006400:	f43f aefb 	beq.w	80061fa <_printf_float+0xb6>
 8006404:	f10a 0a01 	add.w	sl, sl, #1
 8006408:	e7ee      	b.n	80063e8 <_printf_float+0x2a4>
 800640a:	bf00      	nop
 800640c:	7fefffff 	.word	0x7fefffff
 8006410:	0800b858 	.word	0x0800b858
 8006414:	0800b85c 	.word	0x0800b85c
 8006418:	0800b860 	.word	0x0800b860
 800641c:	0800b864 	.word	0x0800b864
 8006420:	0800b868 	.word	0x0800b868
 8006424:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006426:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800642a:	4553      	cmp	r3, sl
 800642c:	bfa8      	it	ge
 800642e:	4653      	movge	r3, sl
 8006430:	2b00      	cmp	r3, #0
 8006432:	4699      	mov	r9, r3
 8006434:	dc36      	bgt.n	80064a4 <_printf_float+0x360>
 8006436:	f04f 0b00 	mov.w	fp, #0
 800643a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800643e:	f104 021a 	add.w	r2, r4, #26
 8006442:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006444:	9306      	str	r3, [sp, #24]
 8006446:	eba3 0309 	sub.w	r3, r3, r9
 800644a:	455b      	cmp	r3, fp
 800644c:	dc31      	bgt.n	80064b2 <_printf_float+0x36e>
 800644e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006450:	459a      	cmp	sl, r3
 8006452:	dc3a      	bgt.n	80064ca <_printf_float+0x386>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	07da      	lsls	r2, r3, #31
 8006458:	d437      	bmi.n	80064ca <_printf_float+0x386>
 800645a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800645c:	ebaa 0903 	sub.w	r9, sl, r3
 8006460:	9b06      	ldr	r3, [sp, #24]
 8006462:	ebaa 0303 	sub.w	r3, sl, r3
 8006466:	4599      	cmp	r9, r3
 8006468:	bfa8      	it	ge
 800646a:	4699      	movge	r9, r3
 800646c:	f1b9 0f00 	cmp.w	r9, #0
 8006470:	dc33      	bgt.n	80064da <_printf_float+0x396>
 8006472:	f04f 0800 	mov.w	r8, #0
 8006476:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800647a:	f104 0b1a 	add.w	fp, r4, #26
 800647e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006480:	ebaa 0303 	sub.w	r3, sl, r3
 8006484:	eba3 0309 	sub.w	r3, r3, r9
 8006488:	4543      	cmp	r3, r8
 800648a:	f77f af79 	ble.w	8006380 <_printf_float+0x23c>
 800648e:	2301      	movs	r3, #1
 8006490:	465a      	mov	r2, fp
 8006492:	4631      	mov	r1, r6
 8006494:	4628      	mov	r0, r5
 8006496:	47b8      	blx	r7
 8006498:	3001      	adds	r0, #1
 800649a:	f43f aeae 	beq.w	80061fa <_printf_float+0xb6>
 800649e:	f108 0801 	add.w	r8, r8, #1
 80064a2:	e7ec      	b.n	800647e <_printf_float+0x33a>
 80064a4:	4642      	mov	r2, r8
 80064a6:	4631      	mov	r1, r6
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	d1c2      	bne.n	8006436 <_printf_float+0x2f2>
 80064b0:	e6a3      	b.n	80061fa <_printf_float+0xb6>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4631      	mov	r1, r6
 80064b6:	4628      	mov	r0, r5
 80064b8:	9206      	str	r2, [sp, #24]
 80064ba:	47b8      	blx	r7
 80064bc:	3001      	adds	r0, #1
 80064be:	f43f ae9c 	beq.w	80061fa <_printf_float+0xb6>
 80064c2:	9a06      	ldr	r2, [sp, #24]
 80064c4:	f10b 0b01 	add.w	fp, fp, #1
 80064c8:	e7bb      	b.n	8006442 <_printf_float+0x2fe>
 80064ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ce:	4631      	mov	r1, r6
 80064d0:	4628      	mov	r0, r5
 80064d2:	47b8      	blx	r7
 80064d4:	3001      	adds	r0, #1
 80064d6:	d1c0      	bne.n	800645a <_printf_float+0x316>
 80064d8:	e68f      	b.n	80061fa <_printf_float+0xb6>
 80064da:	9a06      	ldr	r2, [sp, #24]
 80064dc:	464b      	mov	r3, r9
 80064de:	4442      	add	r2, r8
 80064e0:	4631      	mov	r1, r6
 80064e2:	4628      	mov	r0, r5
 80064e4:	47b8      	blx	r7
 80064e6:	3001      	adds	r0, #1
 80064e8:	d1c3      	bne.n	8006472 <_printf_float+0x32e>
 80064ea:	e686      	b.n	80061fa <_printf_float+0xb6>
 80064ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064f0:	f1ba 0f01 	cmp.w	sl, #1
 80064f4:	dc01      	bgt.n	80064fa <_printf_float+0x3b6>
 80064f6:	07db      	lsls	r3, r3, #31
 80064f8:	d536      	bpl.n	8006568 <_printf_float+0x424>
 80064fa:	2301      	movs	r3, #1
 80064fc:	4642      	mov	r2, r8
 80064fe:	4631      	mov	r1, r6
 8006500:	4628      	mov	r0, r5
 8006502:	47b8      	blx	r7
 8006504:	3001      	adds	r0, #1
 8006506:	f43f ae78 	beq.w	80061fa <_printf_float+0xb6>
 800650a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800650e:	4631      	mov	r1, r6
 8006510:	4628      	mov	r0, r5
 8006512:	47b8      	blx	r7
 8006514:	3001      	adds	r0, #1
 8006516:	f43f ae70 	beq.w	80061fa <_printf_float+0xb6>
 800651a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800651e:	2200      	movs	r2, #0
 8006520:	2300      	movs	r3, #0
 8006522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006526:	f7fa facf 	bl	8000ac8 <__aeabi_dcmpeq>
 800652a:	b9c0      	cbnz	r0, 800655e <_printf_float+0x41a>
 800652c:	4653      	mov	r3, sl
 800652e:	f108 0201 	add.w	r2, r8, #1
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	d10c      	bne.n	8006556 <_printf_float+0x412>
 800653c:	e65d      	b.n	80061fa <_printf_float+0xb6>
 800653e:	2301      	movs	r3, #1
 8006540:	465a      	mov	r2, fp
 8006542:	4631      	mov	r1, r6
 8006544:	4628      	mov	r0, r5
 8006546:	47b8      	blx	r7
 8006548:	3001      	adds	r0, #1
 800654a:	f43f ae56 	beq.w	80061fa <_printf_float+0xb6>
 800654e:	f108 0801 	add.w	r8, r8, #1
 8006552:	45d0      	cmp	r8, sl
 8006554:	dbf3      	blt.n	800653e <_printf_float+0x3fa>
 8006556:	464b      	mov	r3, r9
 8006558:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800655c:	e6df      	b.n	800631e <_printf_float+0x1da>
 800655e:	f04f 0800 	mov.w	r8, #0
 8006562:	f104 0b1a 	add.w	fp, r4, #26
 8006566:	e7f4      	b.n	8006552 <_printf_float+0x40e>
 8006568:	2301      	movs	r3, #1
 800656a:	4642      	mov	r2, r8
 800656c:	e7e1      	b.n	8006532 <_printf_float+0x3ee>
 800656e:	2301      	movs	r3, #1
 8006570:	464a      	mov	r2, r9
 8006572:	4631      	mov	r1, r6
 8006574:	4628      	mov	r0, r5
 8006576:	47b8      	blx	r7
 8006578:	3001      	adds	r0, #1
 800657a:	f43f ae3e 	beq.w	80061fa <_printf_float+0xb6>
 800657e:	f108 0801 	add.w	r8, r8, #1
 8006582:	68e3      	ldr	r3, [r4, #12]
 8006584:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006586:	1a5b      	subs	r3, r3, r1
 8006588:	4543      	cmp	r3, r8
 800658a:	dcf0      	bgt.n	800656e <_printf_float+0x42a>
 800658c:	e6fc      	b.n	8006388 <_printf_float+0x244>
 800658e:	f04f 0800 	mov.w	r8, #0
 8006592:	f104 0919 	add.w	r9, r4, #25
 8006596:	e7f4      	b.n	8006582 <_printf_float+0x43e>

08006598 <_printf_common>:
 8006598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800659c:	4616      	mov	r6, r2
 800659e:	4698      	mov	r8, r3
 80065a0:	688a      	ldr	r2, [r1, #8]
 80065a2:	690b      	ldr	r3, [r1, #16]
 80065a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065a8:	4293      	cmp	r3, r2
 80065aa:	bfb8      	it	lt
 80065ac:	4613      	movlt	r3, r2
 80065ae:	6033      	str	r3, [r6, #0]
 80065b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065b4:	4607      	mov	r7, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	b10a      	cbz	r2, 80065be <_printf_common+0x26>
 80065ba:	3301      	adds	r3, #1
 80065bc:	6033      	str	r3, [r6, #0]
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	0699      	lsls	r1, r3, #26
 80065c2:	bf42      	ittt	mi
 80065c4:	6833      	ldrmi	r3, [r6, #0]
 80065c6:	3302      	addmi	r3, #2
 80065c8:	6033      	strmi	r3, [r6, #0]
 80065ca:	6825      	ldr	r5, [r4, #0]
 80065cc:	f015 0506 	ands.w	r5, r5, #6
 80065d0:	d106      	bne.n	80065e0 <_printf_common+0x48>
 80065d2:	f104 0a19 	add.w	sl, r4, #25
 80065d6:	68e3      	ldr	r3, [r4, #12]
 80065d8:	6832      	ldr	r2, [r6, #0]
 80065da:	1a9b      	subs	r3, r3, r2
 80065dc:	42ab      	cmp	r3, r5
 80065de:	dc26      	bgt.n	800662e <_printf_common+0x96>
 80065e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065e4:	6822      	ldr	r2, [r4, #0]
 80065e6:	3b00      	subs	r3, #0
 80065e8:	bf18      	it	ne
 80065ea:	2301      	movne	r3, #1
 80065ec:	0692      	lsls	r2, r2, #26
 80065ee:	d42b      	bmi.n	8006648 <_printf_common+0xb0>
 80065f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065f4:	4641      	mov	r1, r8
 80065f6:	4638      	mov	r0, r7
 80065f8:	47c8      	blx	r9
 80065fa:	3001      	adds	r0, #1
 80065fc:	d01e      	beq.n	800663c <_printf_common+0xa4>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	6922      	ldr	r2, [r4, #16]
 8006602:	f003 0306 	and.w	r3, r3, #6
 8006606:	2b04      	cmp	r3, #4
 8006608:	bf02      	ittt	eq
 800660a:	68e5      	ldreq	r5, [r4, #12]
 800660c:	6833      	ldreq	r3, [r6, #0]
 800660e:	1aed      	subeq	r5, r5, r3
 8006610:	68a3      	ldr	r3, [r4, #8]
 8006612:	bf0c      	ite	eq
 8006614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006618:	2500      	movne	r5, #0
 800661a:	4293      	cmp	r3, r2
 800661c:	bfc4      	itt	gt
 800661e:	1a9b      	subgt	r3, r3, r2
 8006620:	18ed      	addgt	r5, r5, r3
 8006622:	2600      	movs	r6, #0
 8006624:	341a      	adds	r4, #26
 8006626:	42b5      	cmp	r5, r6
 8006628:	d11a      	bne.n	8006660 <_printf_common+0xc8>
 800662a:	2000      	movs	r0, #0
 800662c:	e008      	b.n	8006640 <_printf_common+0xa8>
 800662e:	2301      	movs	r3, #1
 8006630:	4652      	mov	r2, sl
 8006632:	4641      	mov	r1, r8
 8006634:	4638      	mov	r0, r7
 8006636:	47c8      	blx	r9
 8006638:	3001      	adds	r0, #1
 800663a:	d103      	bne.n	8006644 <_printf_common+0xac>
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006644:	3501      	adds	r5, #1
 8006646:	e7c6      	b.n	80065d6 <_printf_common+0x3e>
 8006648:	18e1      	adds	r1, r4, r3
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	2030      	movs	r0, #48	@ 0x30
 800664e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006652:	4422      	add	r2, r4
 8006654:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800665c:	3302      	adds	r3, #2
 800665e:	e7c7      	b.n	80065f0 <_printf_common+0x58>
 8006660:	2301      	movs	r3, #1
 8006662:	4622      	mov	r2, r4
 8006664:	4641      	mov	r1, r8
 8006666:	4638      	mov	r0, r7
 8006668:	47c8      	blx	r9
 800666a:	3001      	adds	r0, #1
 800666c:	d0e6      	beq.n	800663c <_printf_common+0xa4>
 800666e:	3601      	adds	r6, #1
 8006670:	e7d9      	b.n	8006626 <_printf_common+0x8e>
	...

08006674 <_printf_i>:
 8006674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006678:	7e0f      	ldrb	r7, [r1, #24]
 800667a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800667c:	2f78      	cmp	r7, #120	@ 0x78
 800667e:	4691      	mov	r9, r2
 8006680:	4680      	mov	r8, r0
 8006682:	460c      	mov	r4, r1
 8006684:	469a      	mov	sl, r3
 8006686:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800668a:	d807      	bhi.n	800669c <_printf_i+0x28>
 800668c:	2f62      	cmp	r7, #98	@ 0x62
 800668e:	d80a      	bhi.n	80066a6 <_printf_i+0x32>
 8006690:	2f00      	cmp	r7, #0
 8006692:	f000 80d2 	beq.w	800683a <_printf_i+0x1c6>
 8006696:	2f58      	cmp	r7, #88	@ 0x58
 8006698:	f000 80b9 	beq.w	800680e <_printf_i+0x19a>
 800669c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066a4:	e03a      	b.n	800671c <_printf_i+0xa8>
 80066a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066aa:	2b15      	cmp	r3, #21
 80066ac:	d8f6      	bhi.n	800669c <_printf_i+0x28>
 80066ae:	a101      	add	r1, pc, #4	@ (adr r1, 80066b4 <_printf_i+0x40>)
 80066b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066b4:	0800670d 	.word	0x0800670d
 80066b8:	08006721 	.word	0x08006721
 80066bc:	0800669d 	.word	0x0800669d
 80066c0:	0800669d 	.word	0x0800669d
 80066c4:	0800669d 	.word	0x0800669d
 80066c8:	0800669d 	.word	0x0800669d
 80066cc:	08006721 	.word	0x08006721
 80066d0:	0800669d 	.word	0x0800669d
 80066d4:	0800669d 	.word	0x0800669d
 80066d8:	0800669d 	.word	0x0800669d
 80066dc:	0800669d 	.word	0x0800669d
 80066e0:	08006821 	.word	0x08006821
 80066e4:	0800674b 	.word	0x0800674b
 80066e8:	080067db 	.word	0x080067db
 80066ec:	0800669d 	.word	0x0800669d
 80066f0:	0800669d 	.word	0x0800669d
 80066f4:	08006843 	.word	0x08006843
 80066f8:	0800669d 	.word	0x0800669d
 80066fc:	0800674b 	.word	0x0800674b
 8006700:	0800669d 	.word	0x0800669d
 8006704:	0800669d 	.word	0x0800669d
 8006708:	080067e3 	.word	0x080067e3
 800670c:	6833      	ldr	r3, [r6, #0]
 800670e:	1d1a      	adds	r2, r3, #4
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6032      	str	r2, [r6, #0]
 8006714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006718:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800671c:	2301      	movs	r3, #1
 800671e:	e09d      	b.n	800685c <_printf_i+0x1e8>
 8006720:	6833      	ldr	r3, [r6, #0]
 8006722:	6820      	ldr	r0, [r4, #0]
 8006724:	1d19      	adds	r1, r3, #4
 8006726:	6031      	str	r1, [r6, #0]
 8006728:	0606      	lsls	r6, r0, #24
 800672a:	d501      	bpl.n	8006730 <_printf_i+0xbc>
 800672c:	681d      	ldr	r5, [r3, #0]
 800672e:	e003      	b.n	8006738 <_printf_i+0xc4>
 8006730:	0645      	lsls	r5, r0, #25
 8006732:	d5fb      	bpl.n	800672c <_printf_i+0xb8>
 8006734:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006738:	2d00      	cmp	r5, #0
 800673a:	da03      	bge.n	8006744 <_printf_i+0xd0>
 800673c:	232d      	movs	r3, #45	@ 0x2d
 800673e:	426d      	negs	r5, r5
 8006740:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006744:	4859      	ldr	r0, [pc, #356]	@ (80068ac <_printf_i+0x238>)
 8006746:	230a      	movs	r3, #10
 8006748:	e011      	b.n	800676e <_printf_i+0xfa>
 800674a:	6821      	ldr	r1, [r4, #0]
 800674c:	6833      	ldr	r3, [r6, #0]
 800674e:	0608      	lsls	r0, r1, #24
 8006750:	f853 5b04 	ldr.w	r5, [r3], #4
 8006754:	d402      	bmi.n	800675c <_printf_i+0xe8>
 8006756:	0649      	lsls	r1, r1, #25
 8006758:	bf48      	it	mi
 800675a:	b2ad      	uxthmi	r5, r5
 800675c:	2f6f      	cmp	r7, #111	@ 0x6f
 800675e:	4853      	ldr	r0, [pc, #332]	@ (80068ac <_printf_i+0x238>)
 8006760:	6033      	str	r3, [r6, #0]
 8006762:	bf14      	ite	ne
 8006764:	230a      	movne	r3, #10
 8006766:	2308      	moveq	r3, #8
 8006768:	2100      	movs	r1, #0
 800676a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800676e:	6866      	ldr	r6, [r4, #4]
 8006770:	60a6      	str	r6, [r4, #8]
 8006772:	2e00      	cmp	r6, #0
 8006774:	bfa2      	ittt	ge
 8006776:	6821      	ldrge	r1, [r4, #0]
 8006778:	f021 0104 	bicge.w	r1, r1, #4
 800677c:	6021      	strge	r1, [r4, #0]
 800677e:	b90d      	cbnz	r5, 8006784 <_printf_i+0x110>
 8006780:	2e00      	cmp	r6, #0
 8006782:	d04b      	beq.n	800681c <_printf_i+0x1a8>
 8006784:	4616      	mov	r6, r2
 8006786:	fbb5 f1f3 	udiv	r1, r5, r3
 800678a:	fb03 5711 	mls	r7, r3, r1, r5
 800678e:	5dc7      	ldrb	r7, [r0, r7]
 8006790:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006794:	462f      	mov	r7, r5
 8006796:	42bb      	cmp	r3, r7
 8006798:	460d      	mov	r5, r1
 800679a:	d9f4      	bls.n	8006786 <_printf_i+0x112>
 800679c:	2b08      	cmp	r3, #8
 800679e:	d10b      	bne.n	80067b8 <_printf_i+0x144>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	07df      	lsls	r7, r3, #31
 80067a4:	d508      	bpl.n	80067b8 <_printf_i+0x144>
 80067a6:	6923      	ldr	r3, [r4, #16]
 80067a8:	6861      	ldr	r1, [r4, #4]
 80067aa:	4299      	cmp	r1, r3
 80067ac:	bfde      	ittt	le
 80067ae:	2330      	movle	r3, #48	@ 0x30
 80067b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067b8:	1b92      	subs	r2, r2, r6
 80067ba:	6122      	str	r2, [r4, #16]
 80067bc:	f8cd a000 	str.w	sl, [sp]
 80067c0:	464b      	mov	r3, r9
 80067c2:	aa03      	add	r2, sp, #12
 80067c4:	4621      	mov	r1, r4
 80067c6:	4640      	mov	r0, r8
 80067c8:	f7ff fee6 	bl	8006598 <_printf_common>
 80067cc:	3001      	adds	r0, #1
 80067ce:	d14a      	bne.n	8006866 <_printf_i+0x1f2>
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	b004      	add	sp, #16
 80067d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	f043 0320 	orr.w	r3, r3, #32
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	4833      	ldr	r0, [pc, #204]	@ (80068b0 <_printf_i+0x23c>)
 80067e4:	2778      	movs	r7, #120	@ 0x78
 80067e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	6831      	ldr	r1, [r6, #0]
 80067ee:	061f      	lsls	r7, r3, #24
 80067f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80067f4:	d402      	bmi.n	80067fc <_printf_i+0x188>
 80067f6:	065f      	lsls	r7, r3, #25
 80067f8:	bf48      	it	mi
 80067fa:	b2ad      	uxthmi	r5, r5
 80067fc:	6031      	str	r1, [r6, #0]
 80067fe:	07d9      	lsls	r1, r3, #31
 8006800:	bf44      	itt	mi
 8006802:	f043 0320 	orrmi.w	r3, r3, #32
 8006806:	6023      	strmi	r3, [r4, #0]
 8006808:	b11d      	cbz	r5, 8006812 <_printf_i+0x19e>
 800680a:	2310      	movs	r3, #16
 800680c:	e7ac      	b.n	8006768 <_printf_i+0xf4>
 800680e:	4827      	ldr	r0, [pc, #156]	@ (80068ac <_printf_i+0x238>)
 8006810:	e7e9      	b.n	80067e6 <_printf_i+0x172>
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	f023 0320 	bic.w	r3, r3, #32
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	e7f6      	b.n	800680a <_printf_i+0x196>
 800681c:	4616      	mov	r6, r2
 800681e:	e7bd      	b.n	800679c <_printf_i+0x128>
 8006820:	6833      	ldr	r3, [r6, #0]
 8006822:	6825      	ldr	r5, [r4, #0]
 8006824:	6961      	ldr	r1, [r4, #20]
 8006826:	1d18      	adds	r0, r3, #4
 8006828:	6030      	str	r0, [r6, #0]
 800682a:	062e      	lsls	r6, r5, #24
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	d501      	bpl.n	8006834 <_printf_i+0x1c0>
 8006830:	6019      	str	r1, [r3, #0]
 8006832:	e002      	b.n	800683a <_printf_i+0x1c6>
 8006834:	0668      	lsls	r0, r5, #25
 8006836:	d5fb      	bpl.n	8006830 <_printf_i+0x1bc>
 8006838:	8019      	strh	r1, [r3, #0]
 800683a:	2300      	movs	r3, #0
 800683c:	6123      	str	r3, [r4, #16]
 800683e:	4616      	mov	r6, r2
 8006840:	e7bc      	b.n	80067bc <_printf_i+0x148>
 8006842:	6833      	ldr	r3, [r6, #0]
 8006844:	1d1a      	adds	r2, r3, #4
 8006846:	6032      	str	r2, [r6, #0]
 8006848:	681e      	ldr	r6, [r3, #0]
 800684a:	6862      	ldr	r2, [r4, #4]
 800684c:	2100      	movs	r1, #0
 800684e:	4630      	mov	r0, r6
 8006850:	f7f9 fcbe 	bl	80001d0 <memchr>
 8006854:	b108      	cbz	r0, 800685a <_printf_i+0x1e6>
 8006856:	1b80      	subs	r0, r0, r6
 8006858:	6060      	str	r0, [r4, #4]
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	2300      	movs	r3, #0
 8006860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006864:	e7aa      	b.n	80067bc <_printf_i+0x148>
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	4632      	mov	r2, r6
 800686a:	4649      	mov	r1, r9
 800686c:	4640      	mov	r0, r8
 800686e:	47d0      	blx	sl
 8006870:	3001      	adds	r0, #1
 8006872:	d0ad      	beq.n	80067d0 <_printf_i+0x15c>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	079b      	lsls	r3, r3, #30
 8006878:	d413      	bmi.n	80068a2 <_printf_i+0x22e>
 800687a:	68e0      	ldr	r0, [r4, #12]
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	4298      	cmp	r0, r3
 8006880:	bfb8      	it	lt
 8006882:	4618      	movlt	r0, r3
 8006884:	e7a6      	b.n	80067d4 <_printf_i+0x160>
 8006886:	2301      	movs	r3, #1
 8006888:	4632      	mov	r2, r6
 800688a:	4649      	mov	r1, r9
 800688c:	4640      	mov	r0, r8
 800688e:	47d0      	blx	sl
 8006890:	3001      	adds	r0, #1
 8006892:	d09d      	beq.n	80067d0 <_printf_i+0x15c>
 8006894:	3501      	adds	r5, #1
 8006896:	68e3      	ldr	r3, [r4, #12]
 8006898:	9903      	ldr	r1, [sp, #12]
 800689a:	1a5b      	subs	r3, r3, r1
 800689c:	42ab      	cmp	r3, r5
 800689e:	dcf2      	bgt.n	8006886 <_printf_i+0x212>
 80068a0:	e7eb      	b.n	800687a <_printf_i+0x206>
 80068a2:	2500      	movs	r5, #0
 80068a4:	f104 0619 	add.w	r6, r4, #25
 80068a8:	e7f5      	b.n	8006896 <_printf_i+0x222>
 80068aa:	bf00      	nop
 80068ac:	0800b86a 	.word	0x0800b86a
 80068b0:	0800b87b 	.word	0x0800b87b

080068b4 <_scanf_float>:
 80068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	b087      	sub	sp, #28
 80068ba:	4617      	mov	r7, r2
 80068bc:	9303      	str	r3, [sp, #12]
 80068be:	688b      	ldr	r3, [r1, #8]
 80068c0:	1e5a      	subs	r2, r3, #1
 80068c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80068c6:	bf81      	itttt	hi
 80068c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80068cc:	eb03 0b05 	addhi.w	fp, r3, r5
 80068d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80068d4:	608b      	strhi	r3, [r1, #8]
 80068d6:	680b      	ldr	r3, [r1, #0]
 80068d8:	460a      	mov	r2, r1
 80068da:	f04f 0500 	mov.w	r5, #0
 80068de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80068e2:	f842 3b1c 	str.w	r3, [r2], #28
 80068e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80068ea:	4680      	mov	r8, r0
 80068ec:	460c      	mov	r4, r1
 80068ee:	bf98      	it	ls
 80068f0:	f04f 0b00 	movls.w	fp, #0
 80068f4:	9201      	str	r2, [sp, #4]
 80068f6:	4616      	mov	r6, r2
 80068f8:	46aa      	mov	sl, r5
 80068fa:	46a9      	mov	r9, r5
 80068fc:	9502      	str	r5, [sp, #8]
 80068fe:	68a2      	ldr	r2, [r4, #8]
 8006900:	b152      	cbz	r2, 8006918 <_scanf_float+0x64>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b4e      	cmp	r3, #78	@ 0x4e
 8006908:	d864      	bhi.n	80069d4 <_scanf_float+0x120>
 800690a:	2b40      	cmp	r3, #64	@ 0x40
 800690c:	d83c      	bhi.n	8006988 <_scanf_float+0xd4>
 800690e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006912:	b2c8      	uxtb	r0, r1
 8006914:	280e      	cmp	r0, #14
 8006916:	d93a      	bls.n	800698e <_scanf_float+0xda>
 8006918:	f1b9 0f00 	cmp.w	r9, #0
 800691c:	d003      	beq.n	8006926 <_scanf_float+0x72>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800692a:	f1ba 0f01 	cmp.w	sl, #1
 800692e:	f200 8117 	bhi.w	8006b60 <_scanf_float+0x2ac>
 8006932:	9b01      	ldr	r3, [sp, #4]
 8006934:	429e      	cmp	r6, r3
 8006936:	f200 8108 	bhi.w	8006b4a <_scanf_float+0x296>
 800693a:	2001      	movs	r0, #1
 800693c:	b007      	add	sp, #28
 800693e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006942:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006946:	2a0d      	cmp	r2, #13
 8006948:	d8e6      	bhi.n	8006918 <_scanf_float+0x64>
 800694a:	a101      	add	r1, pc, #4	@ (adr r1, 8006950 <_scanf_float+0x9c>)
 800694c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006950:	08006a97 	.word	0x08006a97
 8006954:	08006919 	.word	0x08006919
 8006958:	08006919 	.word	0x08006919
 800695c:	08006919 	.word	0x08006919
 8006960:	08006af7 	.word	0x08006af7
 8006964:	08006acf 	.word	0x08006acf
 8006968:	08006919 	.word	0x08006919
 800696c:	08006919 	.word	0x08006919
 8006970:	08006aa5 	.word	0x08006aa5
 8006974:	08006919 	.word	0x08006919
 8006978:	08006919 	.word	0x08006919
 800697c:	08006919 	.word	0x08006919
 8006980:	08006919 	.word	0x08006919
 8006984:	08006a5d 	.word	0x08006a5d
 8006988:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800698c:	e7db      	b.n	8006946 <_scanf_float+0x92>
 800698e:	290e      	cmp	r1, #14
 8006990:	d8c2      	bhi.n	8006918 <_scanf_float+0x64>
 8006992:	a001      	add	r0, pc, #4	@ (adr r0, 8006998 <_scanf_float+0xe4>)
 8006994:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006998:	08006a4d 	.word	0x08006a4d
 800699c:	08006919 	.word	0x08006919
 80069a0:	08006a4d 	.word	0x08006a4d
 80069a4:	08006ae3 	.word	0x08006ae3
 80069a8:	08006919 	.word	0x08006919
 80069ac:	080069f5 	.word	0x080069f5
 80069b0:	08006a33 	.word	0x08006a33
 80069b4:	08006a33 	.word	0x08006a33
 80069b8:	08006a33 	.word	0x08006a33
 80069bc:	08006a33 	.word	0x08006a33
 80069c0:	08006a33 	.word	0x08006a33
 80069c4:	08006a33 	.word	0x08006a33
 80069c8:	08006a33 	.word	0x08006a33
 80069cc:	08006a33 	.word	0x08006a33
 80069d0:	08006a33 	.word	0x08006a33
 80069d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80069d6:	d809      	bhi.n	80069ec <_scanf_float+0x138>
 80069d8:	2b60      	cmp	r3, #96	@ 0x60
 80069da:	d8b2      	bhi.n	8006942 <_scanf_float+0x8e>
 80069dc:	2b54      	cmp	r3, #84	@ 0x54
 80069de:	d07b      	beq.n	8006ad8 <_scanf_float+0x224>
 80069e0:	2b59      	cmp	r3, #89	@ 0x59
 80069e2:	d199      	bne.n	8006918 <_scanf_float+0x64>
 80069e4:	2d07      	cmp	r5, #7
 80069e6:	d197      	bne.n	8006918 <_scanf_float+0x64>
 80069e8:	2508      	movs	r5, #8
 80069ea:	e02c      	b.n	8006a46 <_scanf_float+0x192>
 80069ec:	2b74      	cmp	r3, #116	@ 0x74
 80069ee:	d073      	beq.n	8006ad8 <_scanf_float+0x224>
 80069f0:	2b79      	cmp	r3, #121	@ 0x79
 80069f2:	e7f6      	b.n	80069e2 <_scanf_float+0x12e>
 80069f4:	6821      	ldr	r1, [r4, #0]
 80069f6:	05c8      	lsls	r0, r1, #23
 80069f8:	d51b      	bpl.n	8006a32 <_scanf_float+0x17e>
 80069fa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80069fe:	6021      	str	r1, [r4, #0]
 8006a00:	f109 0901 	add.w	r9, r9, #1
 8006a04:	f1bb 0f00 	cmp.w	fp, #0
 8006a08:	d003      	beq.n	8006a12 <_scanf_float+0x15e>
 8006a0a:	3201      	adds	r2, #1
 8006a0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a10:	60a2      	str	r2, [r4, #8]
 8006a12:	68a3      	ldr	r3, [r4, #8]
 8006a14:	3b01      	subs	r3, #1
 8006a16:	60a3      	str	r3, [r4, #8]
 8006a18:	6923      	ldr	r3, [r4, #16]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	6123      	str	r3, [r4, #16]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]
 8006a26:	f340 8087 	ble.w	8006b38 <_scanf_float+0x284>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	e765      	b.n	80068fe <_scanf_float+0x4a>
 8006a32:	eb1a 0105 	adds.w	r1, sl, r5
 8006a36:	f47f af6f 	bne.w	8006918 <_scanf_float+0x64>
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006a40:	6022      	str	r2, [r4, #0]
 8006a42:	460d      	mov	r5, r1
 8006a44:	468a      	mov	sl, r1
 8006a46:	f806 3b01 	strb.w	r3, [r6], #1
 8006a4a:	e7e2      	b.n	8006a12 <_scanf_float+0x15e>
 8006a4c:	6822      	ldr	r2, [r4, #0]
 8006a4e:	0610      	lsls	r0, r2, #24
 8006a50:	f57f af62 	bpl.w	8006918 <_scanf_float+0x64>
 8006a54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a58:	6022      	str	r2, [r4, #0]
 8006a5a:	e7f4      	b.n	8006a46 <_scanf_float+0x192>
 8006a5c:	f1ba 0f00 	cmp.w	sl, #0
 8006a60:	d10e      	bne.n	8006a80 <_scanf_float+0x1cc>
 8006a62:	f1b9 0f00 	cmp.w	r9, #0
 8006a66:	d10e      	bne.n	8006a86 <_scanf_float+0x1d2>
 8006a68:	6822      	ldr	r2, [r4, #0]
 8006a6a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a6e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a72:	d108      	bne.n	8006a86 <_scanf_float+0x1d2>
 8006a74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a78:	6022      	str	r2, [r4, #0]
 8006a7a:	f04f 0a01 	mov.w	sl, #1
 8006a7e:	e7e2      	b.n	8006a46 <_scanf_float+0x192>
 8006a80:	f1ba 0f02 	cmp.w	sl, #2
 8006a84:	d055      	beq.n	8006b32 <_scanf_float+0x27e>
 8006a86:	2d01      	cmp	r5, #1
 8006a88:	d002      	beq.n	8006a90 <_scanf_float+0x1dc>
 8006a8a:	2d04      	cmp	r5, #4
 8006a8c:	f47f af44 	bne.w	8006918 <_scanf_float+0x64>
 8006a90:	3501      	adds	r5, #1
 8006a92:	b2ed      	uxtb	r5, r5
 8006a94:	e7d7      	b.n	8006a46 <_scanf_float+0x192>
 8006a96:	f1ba 0f01 	cmp.w	sl, #1
 8006a9a:	f47f af3d 	bne.w	8006918 <_scanf_float+0x64>
 8006a9e:	f04f 0a02 	mov.w	sl, #2
 8006aa2:	e7d0      	b.n	8006a46 <_scanf_float+0x192>
 8006aa4:	b97d      	cbnz	r5, 8006ac6 <_scanf_float+0x212>
 8006aa6:	f1b9 0f00 	cmp.w	r9, #0
 8006aaa:	f47f af38 	bne.w	800691e <_scanf_float+0x6a>
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006ab4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006ab8:	f040 8108 	bne.w	8006ccc <_scanf_float+0x418>
 8006abc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ac0:	6022      	str	r2, [r4, #0]
 8006ac2:	2501      	movs	r5, #1
 8006ac4:	e7bf      	b.n	8006a46 <_scanf_float+0x192>
 8006ac6:	2d03      	cmp	r5, #3
 8006ac8:	d0e2      	beq.n	8006a90 <_scanf_float+0x1dc>
 8006aca:	2d05      	cmp	r5, #5
 8006acc:	e7de      	b.n	8006a8c <_scanf_float+0x1d8>
 8006ace:	2d02      	cmp	r5, #2
 8006ad0:	f47f af22 	bne.w	8006918 <_scanf_float+0x64>
 8006ad4:	2503      	movs	r5, #3
 8006ad6:	e7b6      	b.n	8006a46 <_scanf_float+0x192>
 8006ad8:	2d06      	cmp	r5, #6
 8006ada:	f47f af1d 	bne.w	8006918 <_scanf_float+0x64>
 8006ade:	2507      	movs	r5, #7
 8006ae0:	e7b1      	b.n	8006a46 <_scanf_float+0x192>
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	0591      	lsls	r1, r2, #22
 8006ae6:	f57f af17 	bpl.w	8006918 <_scanf_float+0x64>
 8006aea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006aee:	6022      	str	r2, [r4, #0]
 8006af0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006af4:	e7a7      	b.n	8006a46 <_scanf_float+0x192>
 8006af6:	6822      	ldr	r2, [r4, #0]
 8006af8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006afc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006b00:	d006      	beq.n	8006b10 <_scanf_float+0x25c>
 8006b02:	0550      	lsls	r0, r2, #21
 8006b04:	f57f af08 	bpl.w	8006918 <_scanf_float+0x64>
 8006b08:	f1b9 0f00 	cmp.w	r9, #0
 8006b0c:	f000 80de 	beq.w	8006ccc <_scanf_float+0x418>
 8006b10:	0591      	lsls	r1, r2, #22
 8006b12:	bf58      	it	pl
 8006b14:	9902      	ldrpl	r1, [sp, #8]
 8006b16:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b1a:	bf58      	it	pl
 8006b1c:	eba9 0101 	subpl.w	r1, r9, r1
 8006b20:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006b24:	bf58      	it	pl
 8006b26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b2a:	6022      	str	r2, [r4, #0]
 8006b2c:	f04f 0900 	mov.w	r9, #0
 8006b30:	e789      	b.n	8006a46 <_scanf_float+0x192>
 8006b32:	f04f 0a03 	mov.w	sl, #3
 8006b36:	e786      	b.n	8006a46 <_scanf_float+0x192>
 8006b38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006b3c:	4639      	mov	r1, r7
 8006b3e:	4640      	mov	r0, r8
 8006b40:	4798      	blx	r3
 8006b42:	2800      	cmp	r0, #0
 8006b44:	f43f aedb 	beq.w	80068fe <_scanf_float+0x4a>
 8006b48:	e6e6      	b.n	8006918 <_scanf_float+0x64>
 8006b4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b52:	463a      	mov	r2, r7
 8006b54:	4640      	mov	r0, r8
 8006b56:	4798      	blx	r3
 8006b58:	6923      	ldr	r3, [r4, #16]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	6123      	str	r3, [r4, #16]
 8006b5e:	e6e8      	b.n	8006932 <_scanf_float+0x7e>
 8006b60:	1e6b      	subs	r3, r5, #1
 8006b62:	2b06      	cmp	r3, #6
 8006b64:	d824      	bhi.n	8006bb0 <_scanf_float+0x2fc>
 8006b66:	2d02      	cmp	r5, #2
 8006b68:	d836      	bhi.n	8006bd8 <_scanf_float+0x324>
 8006b6a:	9b01      	ldr	r3, [sp, #4]
 8006b6c:	429e      	cmp	r6, r3
 8006b6e:	f67f aee4 	bls.w	800693a <_scanf_float+0x86>
 8006b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b7a:	463a      	mov	r2, r7
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	4798      	blx	r3
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	6123      	str	r3, [r4, #16]
 8006b86:	e7f0      	b.n	8006b6a <_scanf_float+0x2b6>
 8006b88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b8c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006b90:	463a      	mov	r2, r7
 8006b92:	4640      	mov	r0, r8
 8006b94:	4798      	blx	r3
 8006b96:	6923      	ldr	r3, [r4, #16]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	6123      	str	r3, [r4, #16]
 8006b9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ba0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ba4:	f1ba 0f02 	cmp.w	sl, #2
 8006ba8:	d1ee      	bne.n	8006b88 <_scanf_float+0x2d4>
 8006baa:	3d03      	subs	r5, #3
 8006bac:	b2ed      	uxtb	r5, r5
 8006bae:	1b76      	subs	r6, r6, r5
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	05da      	lsls	r2, r3, #23
 8006bb4:	d530      	bpl.n	8006c18 <_scanf_float+0x364>
 8006bb6:	055b      	lsls	r3, r3, #21
 8006bb8:	d511      	bpl.n	8006bde <_scanf_float+0x32a>
 8006bba:	9b01      	ldr	r3, [sp, #4]
 8006bbc:	429e      	cmp	r6, r3
 8006bbe:	f67f aebc 	bls.w	800693a <_scanf_float+0x86>
 8006bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bca:	463a      	mov	r2, r7
 8006bcc:	4640      	mov	r0, r8
 8006bce:	4798      	blx	r3
 8006bd0:	6923      	ldr	r3, [r4, #16]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	6123      	str	r3, [r4, #16]
 8006bd6:	e7f0      	b.n	8006bba <_scanf_float+0x306>
 8006bd8:	46aa      	mov	sl, r5
 8006bda:	46b3      	mov	fp, r6
 8006bdc:	e7de      	b.n	8006b9c <_scanf_float+0x2e8>
 8006bde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006be2:	6923      	ldr	r3, [r4, #16]
 8006be4:	2965      	cmp	r1, #101	@ 0x65
 8006be6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bea:	f106 35ff 	add.w	r5, r6, #4294967295
 8006bee:	6123      	str	r3, [r4, #16]
 8006bf0:	d00c      	beq.n	8006c0c <_scanf_float+0x358>
 8006bf2:	2945      	cmp	r1, #69	@ 0x45
 8006bf4:	d00a      	beq.n	8006c0c <_scanf_float+0x358>
 8006bf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bfa:	463a      	mov	r2, r7
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	4798      	blx	r3
 8006c00:	6923      	ldr	r3, [r4, #16]
 8006c02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	1eb5      	subs	r5, r6, #2
 8006c0a:	6123      	str	r3, [r4, #16]
 8006c0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c10:	463a      	mov	r2, r7
 8006c12:	4640      	mov	r0, r8
 8006c14:	4798      	blx	r3
 8006c16:	462e      	mov	r6, r5
 8006c18:	6822      	ldr	r2, [r4, #0]
 8006c1a:	f012 0210 	ands.w	r2, r2, #16
 8006c1e:	d001      	beq.n	8006c24 <_scanf_float+0x370>
 8006c20:	2000      	movs	r0, #0
 8006c22:	e68b      	b.n	800693c <_scanf_float+0x88>
 8006c24:	7032      	strb	r2, [r6, #0]
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c30:	d11c      	bne.n	8006c6c <_scanf_float+0x3b8>
 8006c32:	9b02      	ldr	r3, [sp, #8]
 8006c34:	454b      	cmp	r3, r9
 8006c36:	eba3 0209 	sub.w	r2, r3, r9
 8006c3a:	d123      	bne.n	8006c84 <_scanf_float+0x3d0>
 8006c3c:	9901      	ldr	r1, [sp, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	4640      	mov	r0, r8
 8006c42:	f002 fbf9 	bl	8009438 <_strtod_r>
 8006c46:	9b03      	ldr	r3, [sp, #12]
 8006c48:	6821      	ldr	r1, [r4, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f011 0f02 	tst.w	r1, #2
 8006c50:	ec57 6b10 	vmov	r6, r7, d0
 8006c54:	f103 0204 	add.w	r2, r3, #4
 8006c58:	d01f      	beq.n	8006c9a <_scanf_float+0x3e6>
 8006c5a:	9903      	ldr	r1, [sp, #12]
 8006c5c:	600a      	str	r2, [r1, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	e9c3 6700 	strd	r6, r7, [r3]
 8006c64:	68e3      	ldr	r3, [r4, #12]
 8006c66:	3301      	adds	r3, #1
 8006c68:	60e3      	str	r3, [r4, #12]
 8006c6a:	e7d9      	b.n	8006c20 <_scanf_float+0x36c>
 8006c6c:	9b04      	ldr	r3, [sp, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0e4      	beq.n	8006c3c <_scanf_float+0x388>
 8006c72:	9905      	ldr	r1, [sp, #20]
 8006c74:	230a      	movs	r3, #10
 8006c76:	3101      	adds	r1, #1
 8006c78:	4640      	mov	r0, r8
 8006c7a:	f002 fc5d 	bl	8009538 <_strtol_r>
 8006c7e:	9b04      	ldr	r3, [sp, #16]
 8006c80:	9e05      	ldr	r6, [sp, #20]
 8006c82:	1ac2      	subs	r2, r0, r3
 8006c84:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006c88:	429e      	cmp	r6, r3
 8006c8a:	bf28      	it	cs
 8006c8c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006c90:	4910      	ldr	r1, [pc, #64]	@ (8006cd4 <_scanf_float+0x420>)
 8006c92:	4630      	mov	r0, r6
 8006c94:	f000 f8e4 	bl	8006e60 <siprintf>
 8006c98:	e7d0      	b.n	8006c3c <_scanf_float+0x388>
 8006c9a:	f011 0f04 	tst.w	r1, #4
 8006c9e:	9903      	ldr	r1, [sp, #12]
 8006ca0:	600a      	str	r2, [r1, #0]
 8006ca2:	d1dc      	bne.n	8006c5e <_scanf_float+0x3aa>
 8006ca4:	681d      	ldr	r5, [r3, #0]
 8006ca6:	4632      	mov	r2, r6
 8006ca8:	463b      	mov	r3, r7
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 ff3d 	bl	8000b2c <__aeabi_dcmpun>
 8006cb2:	b128      	cbz	r0, 8006cc0 <_scanf_float+0x40c>
 8006cb4:	4808      	ldr	r0, [pc, #32]	@ (8006cd8 <_scanf_float+0x424>)
 8006cb6:	f000 f9b7 	bl	8007028 <nanf>
 8006cba:	ed85 0a00 	vstr	s0, [r5]
 8006cbe:	e7d1      	b.n	8006c64 <_scanf_float+0x3b0>
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	f7f9 ff90 	bl	8000be8 <__aeabi_d2f>
 8006cc8:	6028      	str	r0, [r5, #0]
 8006cca:	e7cb      	b.n	8006c64 <_scanf_float+0x3b0>
 8006ccc:	f04f 0900 	mov.w	r9, #0
 8006cd0:	e629      	b.n	8006926 <_scanf_float+0x72>
 8006cd2:	bf00      	nop
 8006cd4:	0800b88c 	.word	0x0800b88c
 8006cd8:	0800bc25 	.word	0x0800bc25

08006cdc <std>:
 8006cdc:	2300      	movs	r3, #0
 8006cde:	b510      	push	{r4, lr}
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cea:	6083      	str	r3, [r0, #8]
 8006cec:	8181      	strh	r1, [r0, #12]
 8006cee:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cf0:	81c2      	strh	r2, [r0, #14]
 8006cf2:	6183      	str	r3, [r0, #24]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	2208      	movs	r2, #8
 8006cf8:	305c      	adds	r0, #92	@ 0x5c
 8006cfa:	f000 f914 	bl	8006f26 <memset>
 8006cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006d34 <std+0x58>)
 8006d00:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d02:	4b0d      	ldr	r3, [pc, #52]	@ (8006d38 <std+0x5c>)
 8006d04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d06:	4b0d      	ldr	r3, [pc, #52]	@ (8006d3c <std+0x60>)
 8006d08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d40 <std+0x64>)
 8006d0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d44 <std+0x68>)
 8006d10:	6224      	str	r4, [r4, #32]
 8006d12:	429c      	cmp	r4, r3
 8006d14:	d006      	beq.n	8006d24 <std+0x48>
 8006d16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d1a:	4294      	cmp	r4, r2
 8006d1c:	d002      	beq.n	8006d24 <std+0x48>
 8006d1e:	33d0      	adds	r3, #208	@ 0xd0
 8006d20:	429c      	cmp	r4, r3
 8006d22:	d105      	bne.n	8006d30 <std+0x54>
 8006d24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d2c:	f000 b978 	b.w	8007020 <__retarget_lock_init_recursive>
 8006d30:	bd10      	pop	{r4, pc}
 8006d32:	bf00      	nop
 8006d34:	08006ea1 	.word	0x08006ea1
 8006d38:	08006ec3 	.word	0x08006ec3
 8006d3c:	08006efb 	.word	0x08006efb
 8006d40:	08006f1f 	.word	0x08006f1f
 8006d44:	200007bc 	.word	0x200007bc

08006d48 <stdio_exit_handler>:
 8006d48:	4a02      	ldr	r2, [pc, #8]	@ (8006d54 <stdio_exit_handler+0xc>)
 8006d4a:	4903      	ldr	r1, [pc, #12]	@ (8006d58 <stdio_exit_handler+0x10>)
 8006d4c:	4803      	ldr	r0, [pc, #12]	@ (8006d5c <stdio_exit_handler+0x14>)
 8006d4e:	f000 b869 	b.w	8006e24 <_fwalk_sglue>
 8006d52:	bf00      	nop
 8006d54:	2000000c 	.word	0x2000000c
 8006d58:	080098f5 	.word	0x080098f5
 8006d5c:	2000001c 	.word	0x2000001c

08006d60 <cleanup_stdio>:
 8006d60:	6841      	ldr	r1, [r0, #4]
 8006d62:	4b0c      	ldr	r3, [pc, #48]	@ (8006d94 <cleanup_stdio+0x34>)
 8006d64:	4299      	cmp	r1, r3
 8006d66:	b510      	push	{r4, lr}
 8006d68:	4604      	mov	r4, r0
 8006d6a:	d001      	beq.n	8006d70 <cleanup_stdio+0x10>
 8006d6c:	f002 fdc2 	bl	80098f4 <_fflush_r>
 8006d70:	68a1      	ldr	r1, [r4, #8]
 8006d72:	4b09      	ldr	r3, [pc, #36]	@ (8006d98 <cleanup_stdio+0x38>)
 8006d74:	4299      	cmp	r1, r3
 8006d76:	d002      	beq.n	8006d7e <cleanup_stdio+0x1e>
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f002 fdbb 	bl	80098f4 <_fflush_r>
 8006d7e:	68e1      	ldr	r1, [r4, #12]
 8006d80:	4b06      	ldr	r3, [pc, #24]	@ (8006d9c <cleanup_stdio+0x3c>)
 8006d82:	4299      	cmp	r1, r3
 8006d84:	d004      	beq.n	8006d90 <cleanup_stdio+0x30>
 8006d86:	4620      	mov	r0, r4
 8006d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d8c:	f002 bdb2 	b.w	80098f4 <_fflush_r>
 8006d90:	bd10      	pop	{r4, pc}
 8006d92:	bf00      	nop
 8006d94:	200007bc 	.word	0x200007bc
 8006d98:	20000824 	.word	0x20000824
 8006d9c:	2000088c 	.word	0x2000088c

08006da0 <global_stdio_init.part.0>:
 8006da0:	b510      	push	{r4, lr}
 8006da2:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd0 <global_stdio_init.part.0+0x30>)
 8006da4:	4c0b      	ldr	r4, [pc, #44]	@ (8006dd4 <global_stdio_init.part.0+0x34>)
 8006da6:	4a0c      	ldr	r2, [pc, #48]	@ (8006dd8 <global_stdio_init.part.0+0x38>)
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	4620      	mov	r0, r4
 8006dac:	2200      	movs	r2, #0
 8006dae:	2104      	movs	r1, #4
 8006db0:	f7ff ff94 	bl	8006cdc <std>
 8006db4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006db8:	2201      	movs	r2, #1
 8006dba:	2109      	movs	r1, #9
 8006dbc:	f7ff ff8e 	bl	8006cdc <std>
 8006dc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dca:	2112      	movs	r1, #18
 8006dcc:	f7ff bf86 	b.w	8006cdc <std>
 8006dd0:	200008f4 	.word	0x200008f4
 8006dd4:	200007bc 	.word	0x200007bc
 8006dd8:	08006d49 	.word	0x08006d49

08006ddc <__sfp_lock_acquire>:
 8006ddc:	4801      	ldr	r0, [pc, #4]	@ (8006de4 <__sfp_lock_acquire+0x8>)
 8006dde:	f000 b920 	b.w	8007022 <__retarget_lock_acquire_recursive>
 8006de2:	bf00      	nop
 8006de4:	200008fd 	.word	0x200008fd

08006de8 <__sfp_lock_release>:
 8006de8:	4801      	ldr	r0, [pc, #4]	@ (8006df0 <__sfp_lock_release+0x8>)
 8006dea:	f000 b91b 	b.w	8007024 <__retarget_lock_release_recursive>
 8006dee:	bf00      	nop
 8006df0:	200008fd 	.word	0x200008fd

08006df4 <__sinit>:
 8006df4:	b510      	push	{r4, lr}
 8006df6:	4604      	mov	r4, r0
 8006df8:	f7ff fff0 	bl	8006ddc <__sfp_lock_acquire>
 8006dfc:	6a23      	ldr	r3, [r4, #32]
 8006dfe:	b11b      	cbz	r3, 8006e08 <__sinit+0x14>
 8006e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e04:	f7ff bff0 	b.w	8006de8 <__sfp_lock_release>
 8006e08:	4b04      	ldr	r3, [pc, #16]	@ (8006e1c <__sinit+0x28>)
 8006e0a:	6223      	str	r3, [r4, #32]
 8006e0c:	4b04      	ldr	r3, [pc, #16]	@ (8006e20 <__sinit+0x2c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f5      	bne.n	8006e00 <__sinit+0xc>
 8006e14:	f7ff ffc4 	bl	8006da0 <global_stdio_init.part.0>
 8006e18:	e7f2      	b.n	8006e00 <__sinit+0xc>
 8006e1a:	bf00      	nop
 8006e1c:	08006d61 	.word	0x08006d61
 8006e20:	200008f4 	.word	0x200008f4

08006e24 <_fwalk_sglue>:
 8006e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e28:	4607      	mov	r7, r0
 8006e2a:	4688      	mov	r8, r1
 8006e2c:	4614      	mov	r4, r2
 8006e2e:	2600      	movs	r6, #0
 8006e30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e34:	f1b9 0901 	subs.w	r9, r9, #1
 8006e38:	d505      	bpl.n	8006e46 <_fwalk_sglue+0x22>
 8006e3a:	6824      	ldr	r4, [r4, #0]
 8006e3c:	2c00      	cmp	r4, #0
 8006e3e:	d1f7      	bne.n	8006e30 <_fwalk_sglue+0xc>
 8006e40:	4630      	mov	r0, r6
 8006e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e46:	89ab      	ldrh	r3, [r5, #12]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d907      	bls.n	8006e5c <_fwalk_sglue+0x38>
 8006e4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e50:	3301      	adds	r3, #1
 8006e52:	d003      	beq.n	8006e5c <_fwalk_sglue+0x38>
 8006e54:	4629      	mov	r1, r5
 8006e56:	4638      	mov	r0, r7
 8006e58:	47c0      	blx	r8
 8006e5a:	4306      	orrs	r6, r0
 8006e5c:	3568      	adds	r5, #104	@ 0x68
 8006e5e:	e7e9      	b.n	8006e34 <_fwalk_sglue+0x10>

08006e60 <siprintf>:
 8006e60:	b40e      	push	{r1, r2, r3}
 8006e62:	b500      	push	{lr}
 8006e64:	b09c      	sub	sp, #112	@ 0x70
 8006e66:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e68:	9002      	str	r0, [sp, #8]
 8006e6a:	9006      	str	r0, [sp, #24]
 8006e6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e70:	4809      	ldr	r0, [pc, #36]	@ (8006e98 <siprintf+0x38>)
 8006e72:	9107      	str	r1, [sp, #28]
 8006e74:	9104      	str	r1, [sp, #16]
 8006e76:	4909      	ldr	r1, [pc, #36]	@ (8006e9c <siprintf+0x3c>)
 8006e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e7c:	9105      	str	r1, [sp, #20]
 8006e7e:	6800      	ldr	r0, [r0, #0]
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	a902      	add	r1, sp, #8
 8006e84:	f002 fbb6 	bl	80095f4 <_svfiprintf_r>
 8006e88:	9b02      	ldr	r3, [sp, #8]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	701a      	strb	r2, [r3, #0]
 8006e8e:	b01c      	add	sp, #112	@ 0x70
 8006e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e94:	b003      	add	sp, #12
 8006e96:	4770      	bx	lr
 8006e98:	20000018 	.word	0x20000018
 8006e9c:	ffff0208 	.word	0xffff0208

08006ea0 <__sread>:
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea8:	f000 f86c 	bl	8006f84 <_read_r>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	bfab      	itete	ge
 8006eb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006eb2:	89a3      	ldrhlt	r3, [r4, #12]
 8006eb4:	181b      	addge	r3, r3, r0
 8006eb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006eba:	bfac      	ite	ge
 8006ebc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ebe:	81a3      	strhlt	r3, [r4, #12]
 8006ec0:	bd10      	pop	{r4, pc}

08006ec2 <__swrite>:
 8006ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec6:	461f      	mov	r7, r3
 8006ec8:	898b      	ldrh	r3, [r1, #12]
 8006eca:	05db      	lsls	r3, r3, #23
 8006ecc:	4605      	mov	r5, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	4616      	mov	r6, r2
 8006ed2:	d505      	bpl.n	8006ee0 <__swrite+0x1e>
 8006ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed8:	2302      	movs	r3, #2
 8006eda:	2200      	movs	r2, #0
 8006edc:	f000 f840 	bl	8006f60 <_lseek_r>
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ee6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006eea:	81a3      	strh	r3, [r4, #12]
 8006eec:	4632      	mov	r2, r6
 8006eee:	463b      	mov	r3, r7
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef6:	f000 b857 	b.w	8006fa8 <_write_r>

08006efa <__sseek>:
 8006efa:	b510      	push	{r4, lr}
 8006efc:	460c      	mov	r4, r1
 8006efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f02:	f000 f82d 	bl	8006f60 <_lseek_r>
 8006f06:	1c43      	adds	r3, r0, #1
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	bf15      	itete	ne
 8006f0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f16:	81a3      	strheq	r3, [r4, #12]
 8006f18:	bf18      	it	ne
 8006f1a:	81a3      	strhne	r3, [r4, #12]
 8006f1c:	bd10      	pop	{r4, pc}

08006f1e <__sclose>:
 8006f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f22:	f000 b80d 	b.w	8006f40 <_close_r>

08006f26 <memset>:
 8006f26:	4402      	add	r2, r0
 8006f28:	4603      	mov	r3, r0
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d100      	bne.n	8006f30 <memset+0xa>
 8006f2e:	4770      	bx	lr
 8006f30:	f803 1b01 	strb.w	r1, [r3], #1
 8006f34:	e7f9      	b.n	8006f2a <memset+0x4>
	...

08006f38 <_localeconv_r>:
 8006f38:	4800      	ldr	r0, [pc, #0]	@ (8006f3c <_localeconv_r+0x4>)
 8006f3a:	4770      	bx	lr
 8006f3c:	20000158 	.word	0x20000158

08006f40 <_close_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d06      	ldr	r5, [pc, #24]	@ (8006f5c <_close_r+0x1c>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	f7fa fea0 	bl	8001c90 <_close>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_close_r+0x1a>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_close_r+0x1a>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	200008f8 	.word	0x200008f8

08006f60 <_lseek_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d07      	ldr	r5, [pc, #28]	@ (8006f80 <_lseek_r+0x20>)
 8006f64:	4604      	mov	r4, r0
 8006f66:	4608      	mov	r0, r1
 8006f68:	4611      	mov	r1, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	602a      	str	r2, [r5, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f7fa feb5 	bl	8001cde <_lseek>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_lseek_r+0x1e>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_lseek_r+0x1e>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	200008f8 	.word	0x200008f8

08006f84 <_read_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d07      	ldr	r5, [pc, #28]	@ (8006fa4 <_read_r+0x20>)
 8006f88:	4604      	mov	r4, r0
 8006f8a:	4608      	mov	r0, r1
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	602a      	str	r2, [r5, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	f7fa fe43 	bl	8001c1e <_read>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_read_r+0x1e>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_read_r+0x1e>
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	200008f8 	.word	0x200008f8

08006fa8 <_write_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d07      	ldr	r5, [pc, #28]	@ (8006fc8 <_write_r+0x20>)
 8006fac:	4604      	mov	r4, r0
 8006fae:	4608      	mov	r0, r1
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	602a      	str	r2, [r5, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f7fa fe4e 	bl	8001c58 <_write>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d102      	bne.n	8006fc6 <_write_r+0x1e>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	b103      	cbz	r3, 8006fc6 <_write_r+0x1e>
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	bd38      	pop	{r3, r4, r5, pc}
 8006fc8:	200008f8 	.word	0x200008f8

08006fcc <__errno>:
 8006fcc:	4b01      	ldr	r3, [pc, #4]	@ (8006fd4 <__errno+0x8>)
 8006fce:	6818      	ldr	r0, [r3, #0]
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	20000018 	.word	0x20000018

08006fd8 <__libc_init_array>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	4d0d      	ldr	r5, [pc, #52]	@ (8007010 <__libc_init_array+0x38>)
 8006fdc:	4c0d      	ldr	r4, [pc, #52]	@ (8007014 <__libc_init_array+0x3c>)
 8006fde:	1b64      	subs	r4, r4, r5
 8006fe0:	10a4      	asrs	r4, r4, #2
 8006fe2:	2600      	movs	r6, #0
 8006fe4:	42a6      	cmp	r6, r4
 8006fe6:	d109      	bne.n	8006ffc <__libc_init_array+0x24>
 8006fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8007018 <__libc_init_array+0x40>)
 8006fea:	4c0c      	ldr	r4, [pc, #48]	@ (800701c <__libc_init_array+0x44>)
 8006fec:	f004 fbf8 	bl	800b7e0 <_init>
 8006ff0:	1b64      	subs	r4, r4, r5
 8006ff2:	10a4      	asrs	r4, r4, #2
 8006ff4:	2600      	movs	r6, #0
 8006ff6:	42a6      	cmp	r6, r4
 8006ff8:	d105      	bne.n	8007006 <__libc_init_array+0x2e>
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
 8006ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007000:	4798      	blx	r3
 8007002:	3601      	adds	r6, #1
 8007004:	e7ee      	b.n	8006fe4 <__libc_init_array+0xc>
 8007006:	f855 3b04 	ldr.w	r3, [r5], #4
 800700a:	4798      	blx	r3
 800700c:	3601      	adds	r6, #1
 800700e:	e7f2      	b.n	8006ff6 <__libc_init_array+0x1e>
 8007010:	0800be68 	.word	0x0800be68
 8007014:	0800be68 	.word	0x0800be68
 8007018:	0800be68 	.word	0x0800be68
 800701c:	0800be6c 	.word	0x0800be6c

08007020 <__retarget_lock_init_recursive>:
 8007020:	4770      	bx	lr

08007022 <__retarget_lock_acquire_recursive>:
 8007022:	4770      	bx	lr

08007024 <__retarget_lock_release_recursive>:
 8007024:	4770      	bx	lr
	...

08007028 <nanf>:
 8007028:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007030 <nanf+0x8>
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	7fc00000 	.word	0x7fc00000

08007034 <quorem>:
 8007034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007038:	6903      	ldr	r3, [r0, #16]
 800703a:	690c      	ldr	r4, [r1, #16]
 800703c:	42a3      	cmp	r3, r4
 800703e:	4607      	mov	r7, r0
 8007040:	db7e      	blt.n	8007140 <quorem+0x10c>
 8007042:	3c01      	subs	r4, #1
 8007044:	f101 0814 	add.w	r8, r1, #20
 8007048:	00a3      	lsls	r3, r4, #2
 800704a:	f100 0514 	add.w	r5, r0, #20
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800705a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800705e:	3301      	adds	r3, #1
 8007060:	429a      	cmp	r2, r3
 8007062:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007066:	fbb2 f6f3 	udiv	r6, r2, r3
 800706a:	d32e      	bcc.n	80070ca <quorem+0x96>
 800706c:	f04f 0a00 	mov.w	sl, #0
 8007070:	46c4      	mov	ip, r8
 8007072:	46ae      	mov	lr, r5
 8007074:	46d3      	mov	fp, sl
 8007076:	f85c 3b04 	ldr.w	r3, [ip], #4
 800707a:	b298      	uxth	r0, r3
 800707c:	fb06 a000 	mla	r0, r6, r0, sl
 8007080:	0c02      	lsrs	r2, r0, #16
 8007082:	0c1b      	lsrs	r3, r3, #16
 8007084:	fb06 2303 	mla	r3, r6, r3, r2
 8007088:	f8de 2000 	ldr.w	r2, [lr]
 800708c:	b280      	uxth	r0, r0
 800708e:	b292      	uxth	r2, r2
 8007090:	1a12      	subs	r2, r2, r0
 8007092:	445a      	add	r2, fp
 8007094:	f8de 0000 	ldr.w	r0, [lr]
 8007098:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800709c:	b29b      	uxth	r3, r3
 800709e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80070a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80070a6:	b292      	uxth	r2, r2
 80070a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80070ac:	45e1      	cmp	r9, ip
 80070ae:	f84e 2b04 	str.w	r2, [lr], #4
 80070b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80070b6:	d2de      	bcs.n	8007076 <quorem+0x42>
 80070b8:	9b00      	ldr	r3, [sp, #0]
 80070ba:	58eb      	ldr	r3, [r5, r3]
 80070bc:	b92b      	cbnz	r3, 80070ca <quorem+0x96>
 80070be:	9b01      	ldr	r3, [sp, #4]
 80070c0:	3b04      	subs	r3, #4
 80070c2:	429d      	cmp	r5, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	d32f      	bcc.n	8007128 <quorem+0xf4>
 80070c8:	613c      	str	r4, [r7, #16]
 80070ca:	4638      	mov	r0, r7
 80070cc:	f001 f9c4 	bl	8008458 <__mcmp>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	db25      	blt.n	8007120 <quorem+0xec>
 80070d4:	4629      	mov	r1, r5
 80070d6:	2000      	movs	r0, #0
 80070d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80070dc:	f8d1 c000 	ldr.w	ip, [r1]
 80070e0:	fa1f fe82 	uxth.w	lr, r2
 80070e4:	fa1f f38c 	uxth.w	r3, ip
 80070e8:	eba3 030e 	sub.w	r3, r3, lr
 80070ec:	4403      	add	r3, r0
 80070ee:	0c12      	lsrs	r2, r2, #16
 80070f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80070f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070fe:	45c1      	cmp	r9, r8
 8007100:	f841 3b04 	str.w	r3, [r1], #4
 8007104:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007108:	d2e6      	bcs.n	80070d8 <quorem+0xa4>
 800710a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800710e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007112:	b922      	cbnz	r2, 800711e <quorem+0xea>
 8007114:	3b04      	subs	r3, #4
 8007116:	429d      	cmp	r5, r3
 8007118:	461a      	mov	r2, r3
 800711a:	d30b      	bcc.n	8007134 <quorem+0x100>
 800711c:	613c      	str	r4, [r7, #16]
 800711e:	3601      	adds	r6, #1
 8007120:	4630      	mov	r0, r6
 8007122:	b003      	add	sp, #12
 8007124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	3b04      	subs	r3, #4
 800712c:	2a00      	cmp	r2, #0
 800712e:	d1cb      	bne.n	80070c8 <quorem+0x94>
 8007130:	3c01      	subs	r4, #1
 8007132:	e7c6      	b.n	80070c2 <quorem+0x8e>
 8007134:	6812      	ldr	r2, [r2, #0]
 8007136:	3b04      	subs	r3, #4
 8007138:	2a00      	cmp	r2, #0
 800713a:	d1ef      	bne.n	800711c <quorem+0xe8>
 800713c:	3c01      	subs	r4, #1
 800713e:	e7ea      	b.n	8007116 <quorem+0xe2>
 8007140:	2000      	movs	r0, #0
 8007142:	e7ee      	b.n	8007122 <quorem+0xee>
 8007144:	0000      	movs	r0, r0
	...

08007148 <_dtoa_r>:
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	69c7      	ldr	r7, [r0, #28]
 800714e:	b099      	sub	sp, #100	@ 0x64
 8007150:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007154:	ec55 4b10 	vmov	r4, r5, d0
 8007158:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800715a:	9109      	str	r1, [sp, #36]	@ 0x24
 800715c:	4683      	mov	fp, r0
 800715e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007160:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007162:	b97f      	cbnz	r7, 8007184 <_dtoa_r+0x3c>
 8007164:	2010      	movs	r0, #16
 8007166:	f000 fdfd 	bl	8007d64 <malloc>
 800716a:	4602      	mov	r2, r0
 800716c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007170:	b920      	cbnz	r0, 800717c <_dtoa_r+0x34>
 8007172:	4ba7      	ldr	r3, [pc, #668]	@ (8007410 <_dtoa_r+0x2c8>)
 8007174:	21ef      	movs	r1, #239	@ 0xef
 8007176:	48a7      	ldr	r0, [pc, #668]	@ (8007414 <_dtoa_r+0x2cc>)
 8007178:	f002 fc36 	bl	80099e8 <__assert_func>
 800717c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007180:	6007      	str	r7, [r0, #0]
 8007182:	60c7      	str	r7, [r0, #12]
 8007184:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007188:	6819      	ldr	r1, [r3, #0]
 800718a:	b159      	cbz	r1, 80071a4 <_dtoa_r+0x5c>
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	604a      	str	r2, [r1, #4]
 8007190:	2301      	movs	r3, #1
 8007192:	4093      	lsls	r3, r2
 8007194:	608b      	str	r3, [r1, #8]
 8007196:	4658      	mov	r0, fp
 8007198:	f000 feda 	bl	8007f50 <_Bfree>
 800719c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	1e2b      	subs	r3, r5, #0
 80071a6:	bfb9      	ittee	lt
 80071a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80071ac:	9303      	strlt	r3, [sp, #12]
 80071ae:	2300      	movge	r3, #0
 80071b0:	6033      	strge	r3, [r6, #0]
 80071b2:	9f03      	ldr	r7, [sp, #12]
 80071b4:	4b98      	ldr	r3, [pc, #608]	@ (8007418 <_dtoa_r+0x2d0>)
 80071b6:	bfbc      	itt	lt
 80071b8:	2201      	movlt	r2, #1
 80071ba:	6032      	strlt	r2, [r6, #0]
 80071bc:	43bb      	bics	r3, r7
 80071be:	d112      	bne.n	80071e6 <_dtoa_r+0x9e>
 80071c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80071c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071cc:	4323      	orrs	r3, r4
 80071ce:	f000 854d 	beq.w	8007c6c <_dtoa_r+0xb24>
 80071d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80071d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800742c <_dtoa_r+0x2e4>
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f000 854f 	beq.w	8007c7c <_dtoa_r+0xb34>
 80071de:	f10a 0303 	add.w	r3, sl, #3
 80071e2:	f000 bd49 	b.w	8007c78 <_dtoa_r+0xb30>
 80071e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071ea:	2200      	movs	r2, #0
 80071ec:	ec51 0b17 	vmov	r0, r1, d7
 80071f0:	2300      	movs	r3, #0
 80071f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80071f6:	f7f9 fc67 	bl	8000ac8 <__aeabi_dcmpeq>
 80071fa:	4680      	mov	r8, r0
 80071fc:	b158      	cbz	r0, 8007216 <_dtoa_r+0xce>
 80071fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007200:	2301      	movs	r3, #1
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007206:	b113      	cbz	r3, 800720e <_dtoa_r+0xc6>
 8007208:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800720a:	4b84      	ldr	r3, [pc, #528]	@ (800741c <_dtoa_r+0x2d4>)
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007430 <_dtoa_r+0x2e8>
 8007212:	f000 bd33 	b.w	8007c7c <_dtoa_r+0xb34>
 8007216:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800721a:	aa16      	add	r2, sp, #88	@ 0x58
 800721c:	a917      	add	r1, sp, #92	@ 0x5c
 800721e:	4658      	mov	r0, fp
 8007220:	f001 fa3a 	bl	8008698 <__d2b>
 8007224:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007228:	4681      	mov	r9, r0
 800722a:	2e00      	cmp	r6, #0
 800722c:	d077      	beq.n	800731e <_dtoa_r+0x1d6>
 800722e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007230:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800723c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007240:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007244:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007248:	4619      	mov	r1, r3
 800724a:	2200      	movs	r2, #0
 800724c:	4b74      	ldr	r3, [pc, #464]	@ (8007420 <_dtoa_r+0x2d8>)
 800724e:	f7f9 f81b 	bl	8000288 <__aeabi_dsub>
 8007252:	a369      	add	r3, pc, #420	@ (adr r3, 80073f8 <_dtoa_r+0x2b0>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f7f9 f9ce 	bl	80005f8 <__aeabi_dmul>
 800725c:	a368      	add	r3, pc, #416	@ (adr r3, 8007400 <_dtoa_r+0x2b8>)
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f7f9 f813 	bl	800028c <__adddf3>
 8007266:	4604      	mov	r4, r0
 8007268:	4630      	mov	r0, r6
 800726a:	460d      	mov	r5, r1
 800726c:	f7f9 f95a 	bl	8000524 <__aeabi_i2d>
 8007270:	a365      	add	r3, pc, #404	@ (adr r3, 8007408 <_dtoa_r+0x2c0>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f9 f9bf 	bl	80005f8 <__aeabi_dmul>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4620      	mov	r0, r4
 8007280:	4629      	mov	r1, r5
 8007282:	f7f9 f803 	bl	800028c <__adddf3>
 8007286:	4604      	mov	r4, r0
 8007288:	460d      	mov	r5, r1
 800728a:	f7f9 fc65 	bl	8000b58 <__aeabi_d2iz>
 800728e:	2200      	movs	r2, #0
 8007290:	4607      	mov	r7, r0
 8007292:	2300      	movs	r3, #0
 8007294:	4620      	mov	r0, r4
 8007296:	4629      	mov	r1, r5
 8007298:	f7f9 fc20 	bl	8000adc <__aeabi_dcmplt>
 800729c:	b140      	cbz	r0, 80072b0 <_dtoa_r+0x168>
 800729e:	4638      	mov	r0, r7
 80072a0:	f7f9 f940 	bl	8000524 <__aeabi_i2d>
 80072a4:	4622      	mov	r2, r4
 80072a6:	462b      	mov	r3, r5
 80072a8:	f7f9 fc0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ac:	b900      	cbnz	r0, 80072b0 <_dtoa_r+0x168>
 80072ae:	3f01      	subs	r7, #1
 80072b0:	2f16      	cmp	r7, #22
 80072b2:	d851      	bhi.n	8007358 <_dtoa_r+0x210>
 80072b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007424 <_dtoa_r+0x2dc>)
 80072b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072c2:	f7f9 fc0b 	bl	8000adc <__aeabi_dcmplt>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d048      	beq.n	800735c <_dtoa_r+0x214>
 80072ca:	3f01      	subs	r7, #1
 80072cc:	2300      	movs	r3, #0
 80072ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80072d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072d2:	1b9b      	subs	r3, r3, r6
 80072d4:	1e5a      	subs	r2, r3, #1
 80072d6:	bf44      	itt	mi
 80072d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80072dc:	2300      	movmi	r3, #0
 80072de:	9208      	str	r2, [sp, #32]
 80072e0:	bf54      	ite	pl
 80072e2:	f04f 0800 	movpl.w	r8, #0
 80072e6:	9308      	strmi	r3, [sp, #32]
 80072e8:	2f00      	cmp	r7, #0
 80072ea:	db39      	blt.n	8007360 <_dtoa_r+0x218>
 80072ec:	9b08      	ldr	r3, [sp, #32]
 80072ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80072f0:	443b      	add	r3, r7
 80072f2:	9308      	str	r3, [sp, #32]
 80072f4:	2300      	movs	r3, #0
 80072f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fa:	2b09      	cmp	r3, #9
 80072fc:	d864      	bhi.n	80073c8 <_dtoa_r+0x280>
 80072fe:	2b05      	cmp	r3, #5
 8007300:	bfc4      	itt	gt
 8007302:	3b04      	subgt	r3, #4
 8007304:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007308:	f1a3 0302 	sub.w	r3, r3, #2
 800730c:	bfcc      	ite	gt
 800730e:	2400      	movgt	r4, #0
 8007310:	2401      	movle	r4, #1
 8007312:	2b03      	cmp	r3, #3
 8007314:	d863      	bhi.n	80073de <_dtoa_r+0x296>
 8007316:	e8df f003 	tbb	[pc, r3]
 800731a:	372a      	.short	0x372a
 800731c:	5535      	.short	0x5535
 800731e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007322:	441e      	add	r6, r3
 8007324:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007328:	2b20      	cmp	r3, #32
 800732a:	bfc1      	itttt	gt
 800732c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007330:	409f      	lslgt	r7, r3
 8007332:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007336:	fa24 f303 	lsrgt.w	r3, r4, r3
 800733a:	bfd6      	itet	le
 800733c:	f1c3 0320 	rsble	r3, r3, #32
 8007340:	ea47 0003 	orrgt.w	r0, r7, r3
 8007344:	fa04 f003 	lslle.w	r0, r4, r3
 8007348:	f7f9 f8dc 	bl	8000504 <__aeabi_ui2d>
 800734c:	2201      	movs	r2, #1
 800734e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007352:	3e01      	subs	r6, #1
 8007354:	9214      	str	r2, [sp, #80]	@ 0x50
 8007356:	e777      	b.n	8007248 <_dtoa_r+0x100>
 8007358:	2301      	movs	r3, #1
 800735a:	e7b8      	b.n	80072ce <_dtoa_r+0x186>
 800735c:	9012      	str	r0, [sp, #72]	@ 0x48
 800735e:	e7b7      	b.n	80072d0 <_dtoa_r+0x188>
 8007360:	427b      	negs	r3, r7
 8007362:	930a      	str	r3, [sp, #40]	@ 0x28
 8007364:	2300      	movs	r3, #0
 8007366:	eba8 0807 	sub.w	r8, r8, r7
 800736a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800736c:	e7c4      	b.n	80072f8 <_dtoa_r+0x1b0>
 800736e:	2300      	movs	r3, #0
 8007370:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007374:	2b00      	cmp	r3, #0
 8007376:	dc35      	bgt.n	80073e4 <_dtoa_r+0x29c>
 8007378:	2301      	movs	r3, #1
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	9307      	str	r3, [sp, #28]
 800737e:	461a      	mov	r2, r3
 8007380:	920e      	str	r2, [sp, #56]	@ 0x38
 8007382:	e00b      	b.n	800739c <_dtoa_r+0x254>
 8007384:	2301      	movs	r3, #1
 8007386:	e7f3      	b.n	8007370 <_dtoa_r+0x228>
 8007388:	2300      	movs	r3, #0
 800738a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800738c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800738e:	18fb      	adds	r3, r7, r3
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	3301      	adds	r3, #1
 8007394:	2b01      	cmp	r3, #1
 8007396:	9307      	str	r3, [sp, #28]
 8007398:	bfb8      	it	lt
 800739a:	2301      	movlt	r3, #1
 800739c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80073a0:	2100      	movs	r1, #0
 80073a2:	2204      	movs	r2, #4
 80073a4:	f102 0514 	add.w	r5, r2, #20
 80073a8:	429d      	cmp	r5, r3
 80073aa:	d91f      	bls.n	80073ec <_dtoa_r+0x2a4>
 80073ac:	6041      	str	r1, [r0, #4]
 80073ae:	4658      	mov	r0, fp
 80073b0:	f000 fd8e 	bl	8007ed0 <_Balloc>
 80073b4:	4682      	mov	sl, r0
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d13c      	bne.n	8007434 <_dtoa_r+0x2ec>
 80073ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007428 <_dtoa_r+0x2e0>)
 80073bc:	4602      	mov	r2, r0
 80073be:	f240 11af 	movw	r1, #431	@ 0x1af
 80073c2:	e6d8      	b.n	8007176 <_dtoa_r+0x2e>
 80073c4:	2301      	movs	r3, #1
 80073c6:	e7e0      	b.n	800738a <_dtoa_r+0x242>
 80073c8:	2401      	movs	r4, #1
 80073ca:	2300      	movs	r3, #0
 80073cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80073d0:	f04f 33ff 	mov.w	r3, #4294967295
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	9307      	str	r3, [sp, #28]
 80073d8:	2200      	movs	r2, #0
 80073da:	2312      	movs	r3, #18
 80073dc:	e7d0      	b.n	8007380 <_dtoa_r+0x238>
 80073de:	2301      	movs	r3, #1
 80073e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073e2:	e7f5      	b.n	80073d0 <_dtoa_r+0x288>
 80073e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	9307      	str	r3, [sp, #28]
 80073ea:	e7d7      	b.n	800739c <_dtoa_r+0x254>
 80073ec:	3101      	adds	r1, #1
 80073ee:	0052      	lsls	r2, r2, #1
 80073f0:	e7d8      	b.n	80073a4 <_dtoa_r+0x25c>
 80073f2:	bf00      	nop
 80073f4:	f3af 8000 	nop.w
 80073f8:	636f4361 	.word	0x636f4361
 80073fc:	3fd287a7 	.word	0x3fd287a7
 8007400:	8b60c8b3 	.word	0x8b60c8b3
 8007404:	3fc68a28 	.word	0x3fc68a28
 8007408:	509f79fb 	.word	0x509f79fb
 800740c:	3fd34413 	.word	0x3fd34413
 8007410:	0800b89e 	.word	0x0800b89e
 8007414:	0800b8b5 	.word	0x0800b8b5
 8007418:	7ff00000 	.word	0x7ff00000
 800741c:	0800b869 	.word	0x0800b869
 8007420:	3ff80000 	.word	0x3ff80000
 8007424:	0800b9b0 	.word	0x0800b9b0
 8007428:	0800b90d 	.word	0x0800b90d
 800742c:	0800b89a 	.word	0x0800b89a
 8007430:	0800b868 	.word	0x0800b868
 8007434:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007438:	6018      	str	r0, [r3, #0]
 800743a:	9b07      	ldr	r3, [sp, #28]
 800743c:	2b0e      	cmp	r3, #14
 800743e:	f200 80a4 	bhi.w	800758a <_dtoa_r+0x442>
 8007442:	2c00      	cmp	r4, #0
 8007444:	f000 80a1 	beq.w	800758a <_dtoa_r+0x442>
 8007448:	2f00      	cmp	r7, #0
 800744a:	dd33      	ble.n	80074b4 <_dtoa_r+0x36c>
 800744c:	4bad      	ldr	r3, [pc, #692]	@ (8007704 <_dtoa_r+0x5bc>)
 800744e:	f007 020f 	and.w	r2, r7, #15
 8007452:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007456:	ed93 7b00 	vldr	d7, [r3]
 800745a:	05f8      	lsls	r0, r7, #23
 800745c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007460:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007464:	d516      	bpl.n	8007494 <_dtoa_r+0x34c>
 8007466:	4ba8      	ldr	r3, [pc, #672]	@ (8007708 <_dtoa_r+0x5c0>)
 8007468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800746c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007470:	f7f9 f9ec 	bl	800084c <__aeabi_ddiv>
 8007474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007478:	f004 040f 	and.w	r4, r4, #15
 800747c:	2603      	movs	r6, #3
 800747e:	4da2      	ldr	r5, [pc, #648]	@ (8007708 <_dtoa_r+0x5c0>)
 8007480:	b954      	cbnz	r4, 8007498 <_dtoa_r+0x350>
 8007482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800748a:	f7f9 f9df 	bl	800084c <__aeabi_ddiv>
 800748e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007492:	e028      	b.n	80074e6 <_dtoa_r+0x39e>
 8007494:	2602      	movs	r6, #2
 8007496:	e7f2      	b.n	800747e <_dtoa_r+0x336>
 8007498:	07e1      	lsls	r1, r4, #31
 800749a:	d508      	bpl.n	80074ae <_dtoa_r+0x366>
 800749c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074a4:	f7f9 f8a8 	bl	80005f8 <__aeabi_dmul>
 80074a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074ac:	3601      	adds	r6, #1
 80074ae:	1064      	asrs	r4, r4, #1
 80074b0:	3508      	adds	r5, #8
 80074b2:	e7e5      	b.n	8007480 <_dtoa_r+0x338>
 80074b4:	f000 80d2 	beq.w	800765c <_dtoa_r+0x514>
 80074b8:	427c      	negs	r4, r7
 80074ba:	4b92      	ldr	r3, [pc, #584]	@ (8007704 <_dtoa_r+0x5bc>)
 80074bc:	4d92      	ldr	r5, [pc, #584]	@ (8007708 <_dtoa_r+0x5c0>)
 80074be:	f004 020f 	and.w	r2, r4, #15
 80074c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074ce:	f7f9 f893 	bl	80005f8 <__aeabi_dmul>
 80074d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074d6:	1124      	asrs	r4, r4, #4
 80074d8:	2300      	movs	r3, #0
 80074da:	2602      	movs	r6, #2
 80074dc:	2c00      	cmp	r4, #0
 80074de:	f040 80b2 	bne.w	8007646 <_dtoa_r+0x4fe>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1d3      	bne.n	800748e <_dtoa_r+0x346>
 80074e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 80b7 	beq.w	8007660 <_dtoa_r+0x518>
 80074f2:	4b86      	ldr	r3, [pc, #536]	@ (800770c <_dtoa_r+0x5c4>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	4620      	mov	r0, r4
 80074f8:	4629      	mov	r1, r5
 80074fa:	f7f9 faef 	bl	8000adc <__aeabi_dcmplt>
 80074fe:	2800      	cmp	r0, #0
 8007500:	f000 80ae 	beq.w	8007660 <_dtoa_r+0x518>
 8007504:	9b07      	ldr	r3, [sp, #28]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 80aa 	beq.w	8007660 <_dtoa_r+0x518>
 800750c:	9b00      	ldr	r3, [sp, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	dd37      	ble.n	8007582 <_dtoa_r+0x43a>
 8007512:	1e7b      	subs	r3, r7, #1
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	4620      	mov	r0, r4
 8007518:	4b7d      	ldr	r3, [pc, #500]	@ (8007710 <_dtoa_r+0x5c8>)
 800751a:	2200      	movs	r2, #0
 800751c:	4629      	mov	r1, r5
 800751e:	f7f9 f86b 	bl	80005f8 <__aeabi_dmul>
 8007522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007526:	9c00      	ldr	r4, [sp, #0]
 8007528:	3601      	adds	r6, #1
 800752a:	4630      	mov	r0, r6
 800752c:	f7f8 fffa 	bl	8000524 <__aeabi_i2d>
 8007530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007534:	f7f9 f860 	bl	80005f8 <__aeabi_dmul>
 8007538:	4b76      	ldr	r3, [pc, #472]	@ (8007714 <_dtoa_r+0x5cc>)
 800753a:	2200      	movs	r2, #0
 800753c:	f7f8 fea6 	bl	800028c <__adddf3>
 8007540:	4605      	mov	r5, r0
 8007542:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007546:	2c00      	cmp	r4, #0
 8007548:	f040 808d 	bne.w	8007666 <_dtoa_r+0x51e>
 800754c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007550:	4b71      	ldr	r3, [pc, #452]	@ (8007718 <_dtoa_r+0x5d0>)
 8007552:	2200      	movs	r2, #0
 8007554:	f7f8 fe98 	bl	8000288 <__aeabi_dsub>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007560:	462a      	mov	r2, r5
 8007562:	4633      	mov	r3, r6
 8007564:	f7f9 fad8 	bl	8000b18 <__aeabi_dcmpgt>
 8007568:	2800      	cmp	r0, #0
 800756a:	f040 828b 	bne.w	8007a84 <_dtoa_r+0x93c>
 800756e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007572:	462a      	mov	r2, r5
 8007574:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007578:	f7f9 fab0 	bl	8000adc <__aeabi_dcmplt>
 800757c:	2800      	cmp	r0, #0
 800757e:	f040 8128 	bne.w	80077d2 <_dtoa_r+0x68a>
 8007582:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007586:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800758a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800758c:	2b00      	cmp	r3, #0
 800758e:	f2c0 815a 	blt.w	8007846 <_dtoa_r+0x6fe>
 8007592:	2f0e      	cmp	r7, #14
 8007594:	f300 8157 	bgt.w	8007846 <_dtoa_r+0x6fe>
 8007598:	4b5a      	ldr	r3, [pc, #360]	@ (8007704 <_dtoa_r+0x5bc>)
 800759a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800759e:	ed93 7b00 	vldr	d7, [r3]
 80075a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	ed8d 7b00 	vstr	d7, [sp]
 80075aa:	da03      	bge.n	80075b4 <_dtoa_r+0x46c>
 80075ac:	9b07      	ldr	r3, [sp, #28]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f340 8101 	ble.w	80077b6 <_dtoa_r+0x66e>
 80075b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075b8:	4656      	mov	r6, sl
 80075ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075be:	4620      	mov	r0, r4
 80075c0:	4629      	mov	r1, r5
 80075c2:	f7f9 f943 	bl	800084c <__aeabi_ddiv>
 80075c6:	f7f9 fac7 	bl	8000b58 <__aeabi_d2iz>
 80075ca:	4680      	mov	r8, r0
 80075cc:	f7f8 ffaa 	bl	8000524 <__aeabi_i2d>
 80075d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075d4:	f7f9 f810 	bl	80005f8 <__aeabi_dmul>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4620      	mov	r0, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80075e4:	f7f8 fe50 	bl	8000288 <__aeabi_dsub>
 80075e8:	f806 4b01 	strb.w	r4, [r6], #1
 80075ec:	9d07      	ldr	r5, [sp, #28]
 80075ee:	eba6 040a 	sub.w	r4, r6, sl
 80075f2:	42a5      	cmp	r5, r4
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	f040 8117 	bne.w	800782a <_dtoa_r+0x6e2>
 80075fc:	f7f8 fe46 	bl	800028c <__adddf3>
 8007600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007604:	4604      	mov	r4, r0
 8007606:	460d      	mov	r5, r1
 8007608:	f7f9 fa86 	bl	8000b18 <__aeabi_dcmpgt>
 800760c:	2800      	cmp	r0, #0
 800760e:	f040 80f9 	bne.w	8007804 <_dtoa_r+0x6bc>
 8007612:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f9 fa55 	bl	8000ac8 <__aeabi_dcmpeq>
 800761e:	b118      	cbz	r0, 8007628 <_dtoa_r+0x4e0>
 8007620:	f018 0f01 	tst.w	r8, #1
 8007624:	f040 80ee 	bne.w	8007804 <_dtoa_r+0x6bc>
 8007628:	4649      	mov	r1, r9
 800762a:	4658      	mov	r0, fp
 800762c:	f000 fc90 	bl	8007f50 <_Bfree>
 8007630:	2300      	movs	r3, #0
 8007632:	7033      	strb	r3, [r6, #0]
 8007634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007636:	3701      	adds	r7, #1
 8007638:	601f      	str	r7, [r3, #0]
 800763a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 831d 	beq.w	8007c7c <_dtoa_r+0xb34>
 8007642:	601e      	str	r6, [r3, #0]
 8007644:	e31a      	b.n	8007c7c <_dtoa_r+0xb34>
 8007646:	07e2      	lsls	r2, r4, #31
 8007648:	d505      	bpl.n	8007656 <_dtoa_r+0x50e>
 800764a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800764e:	f7f8 ffd3 	bl	80005f8 <__aeabi_dmul>
 8007652:	3601      	adds	r6, #1
 8007654:	2301      	movs	r3, #1
 8007656:	1064      	asrs	r4, r4, #1
 8007658:	3508      	adds	r5, #8
 800765a:	e73f      	b.n	80074dc <_dtoa_r+0x394>
 800765c:	2602      	movs	r6, #2
 800765e:	e742      	b.n	80074e6 <_dtoa_r+0x39e>
 8007660:	9c07      	ldr	r4, [sp, #28]
 8007662:	9704      	str	r7, [sp, #16]
 8007664:	e761      	b.n	800752a <_dtoa_r+0x3e2>
 8007666:	4b27      	ldr	r3, [pc, #156]	@ (8007704 <_dtoa_r+0x5bc>)
 8007668:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800766a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800766e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007672:	4454      	add	r4, sl
 8007674:	2900      	cmp	r1, #0
 8007676:	d053      	beq.n	8007720 <_dtoa_r+0x5d8>
 8007678:	4928      	ldr	r1, [pc, #160]	@ (800771c <_dtoa_r+0x5d4>)
 800767a:	2000      	movs	r0, #0
 800767c:	f7f9 f8e6 	bl	800084c <__aeabi_ddiv>
 8007680:	4633      	mov	r3, r6
 8007682:	462a      	mov	r2, r5
 8007684:	f7f8 fe00 	bl	8000288 <__aeabi_dsub>
 8007688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800768c:	4656      	mov	r6, sl
 800768e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007692:	f7f9 fa61 	bl	8000b58 <__aeabi_d2iz>
 8007696:	4605      	mov	r5, r0
 8007698:	f7f8 ff44 	bl	8000524 <__aeabi_i2d>
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a4:	f7f8 fdf0 	bl	8000288 <__aeabi_dsub>
 80076a8:	3530      	adds	r5, #48	@ 0x30
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076b2:	f806 5b01 	strb.w	r5, [r6], #1
 80076b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076ba:	f7f9 fa0f 	bl	8000adc <__aeabi_dcmplt>
 80076be:	2800      	cmp	r0, #0
 80076c0:	d171      	bne.n	80077a6 <_dtoa_r+0x65e>
 80076c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076c6:	4911      	ldr	r1, [pc, #68]	@ (800770c <_dtoa_r+0x5c4>)
 80076c8:	2000      	movs	r0, #0
 80076ca:	f7f8 fddd 	bl	8000288 <__aeabi_dsub>
 80076ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076d2:	f7f9 fa03 	bl	8000adc <__aeabi_dcmplt>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	f040 8095 	bne.w	8007806 <_dtoa_r+0x6be>
 80076dc:	42a6      	cmp	r6, r4
 80076de:	f43f af50 	beq.w	8007582 <_dtoa_r+0x43a>
 80076e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007710 <_dtoa_r+0x5c8>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	f7f8 ff85 	bl	80005f8 <__aeabi_dmul>
 80076ee:	4b08      	ldr	r3, [pc, #32]	@ (8007710 <_dtoa_r+0x5c8>)
 80076f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076f4:	2200      	movs	r2, #0
 80076f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076fa:	f7f8 ff7d 	bl	80005f8 <__aeabi_dmul>
 80076fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007702:	e7c4      	b.n	800768e <_dtoa_r+0x546>
 8007704:	0800b9b0 	.word	0x0800b9b0
 8007708:	0800b988 	.word	0x0800b988
 800770c:	3ff00000 	.word	0x3ff00000
 8007710:	40240000 	.word	0x40240000
 8007714:	401c0000 	.word	0x401c0000
 8007718:	40140000 	.word	0x40140000
 800771c:	3fe00000 	.word	0x3fe00000
 8007720:	4631      	mov	r1, r6
 8007722:	4628      	mov	r0, r5
 8007724:	f7f8 ff68 	bl	80005f8 <__aeabi_dmul>
 8007728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800772c:	9415      	str	r4, [sp, #84]	@ 0x54
 800772e:	4656      	mov	r6, sl
 8007730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007734:	f7f9 fa10 	bl	8000b58 <__aeabi_d2iz>
 8007738:	4605      	mov	r5, r0
 800773a:	f7f8 fef3 	bl	8000524 <__aeabi_i2d>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007746:	f7f8 fd9f 	bl	8000288 <__aeabi_dsub>
 800774a:	3530      	adds	r5, #48	@ 0x30
 800774c:	f806 5b01 	strb.w	r5, [r6], #1
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	42a6      	cmp	r6, r4
 8007756:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800775a:	f04f 0200 	mov.w	r2, #0
 800775e:	d124      	bne.n	80077aa <_dtoa_r+0x662>
 8007760:	4bac      	ldr	r3, [pc, #688]	@ (8007a14 <_dtoa_r+0x8cc>)
 8007762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007766:	f7f8 fd91 	bl	800028c <__adddf3>
 800776a:	4602      	mov	r2, r0
 800776c:	460b      	mov	r3, r1
 800776e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007772:	f7f9 f9d1 	bl	8000b18 <__aeabi_dcmpgt>
 8007776:	2800      	cmp	r0, #0
 8007778:	d145      	bne.n	8007806 <_dtoa_r+0x6be>
 800777a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800777e:	49a5      	ldr	r1, [pc, #660]	@ (8007a14 <_dtoa_r+0x8cc>)
 8007780:	2000      	movs	r0, #0
 8007782:	f7f8 fd81 	bl	8000288 <__aeabi_dsub>
 8007786:	4602      	mov	r2, r0
 8007788:	460b      	mov	r3, r1
 800778a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800778e:	f7f9 f9a5 	bl	8000adc <__aeabi_dcmplt>
 8007792:	2800      	cmp	r0, #0
 8007794:	f43f aef5 	beq.w	8007582 <_dtoa_r+0x43a>
 8007798:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800779a:	1e73      	subs	r3, r6, #1
 800779c:	9315      	str	r3, [sp, #84]	@ 0x54
 800779e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077a2:	2b30      	cmp	r3, #48	@ 0x30
 80077a4:	d0f8      	beq.n	8007798 <_dtoa_r+0x650>
 80077a6:	9f04      	ldr	r7, [sp, #16]
 80077a8:	e73e      	b.n	8007628 <_dtoa_r+0x4e0>
 80077aa:	4b9b      	ldr	r3, [pc, #620]	@ (8007a18 <_dtoa_r+0x8d0>)
 80077ac:	f7f8 ff24 	bl	80005f8 <__aeabi_dmul>
 80077b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b4:	e7bc      	b.n	8007730 <_dtoa_r+0x5e8>
 80077b6:	d10c      	bne.n	80077d2 <_dtoa_r+0x68a>
 80077b8:	4b98      	ldr	r3, [pc, #608]	@ (8007a1c <_dtoa_r+0x8d4>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077c0:	f7f8 ff1a 	bl	80005f8 <__aeabi_dmul>
 80077c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077c8:	f7f9 f99c 	bl	8000b04 <__aeabi_dcmpge>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	f000 8157 	beq.w	8007a80 <_dtoa_r+0x938>
 80077d2:	2400      	movs	r4, #0
 80077d4:	4625      	mov	r5, r4
 80077d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077d8:	43db      	mvns	r3, r3
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	4656      	mov	r6, sl
 80077de:	2700      	movs	r7, #0
 80077e0:	4621      	mov	r1, r4
 80077e2:	4658      	mov	r0, fp
 80077e4:	f000 fbb4 	bl	8007f50 <_Bfree>
 80077e8:	2d00      	cmp	r5, #0
 80077ea:	d0dc      	beq.n	80077a6 <_dtoa_r+0x65e>
 80077ec:	b12f      	cbz	r7, 80077fa <_dtoa_r+0x6b2>
 80077ee:	42af      	cmp	r7, r5
 80077f0:	d003      	beq.n	80077fa <_dtoa_r+0x6b2>
 80077f2:	4639      	mov	r1, r7
 80077f4:	4658      	mov	r0, fp
 80077f6:	f000 fbab 	bl	8007f50 <_Bfree>
 80077fa:	4629      	mov	r1, r5
 80077fc:	4658      	mov	r0, fp
 80077fe:	f000 fba7 	bl	8007f50 <_Bfree>
 8007802:	e7d0      	b.n	80077a6 <_dtoa_r+0x65e>
 8007804:	9704      	str	r7, [sp, #16]
 8007806:	4633      	mov	r3, r6
 8007808:	461e      	mov	r6, r3
 800780a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800780e:	2a39      	cmp	r2, #57	@ 0x39
 8007810:	d107      	bne.n	8007822 <_dtoa_r+0x6da>
 8007812:	459a      	cmp	sl, r3
 8007814:	d1f8      	bne.n	8007808 <_dtoa_r+0x6c0>
 8007816:	9a04      	ldr	r2, [sp, #16]
 8007818:	3201      	adds	r2, #1
 800781a:	9204      	str	r2, [sp, #16]
 800781c:	2230      	movs	r2, #48	@ 0x30
 800781e:	f88a 2000 	strb.w	r2, [sl]
 8007822:	781a      	ldrb	r2, [r3, #0]
 8007824:	3201      	adds	r2, #1
 8007826:	701a      	strb	r2, [r3, #0]
 8007828:	e7bd      	b.n	80077a6 <_dtoa_r+0x65e>
 800782a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a18 <_dtoa_r+0x8d0>)
 800782c:	2200      	movs	r2, #0
 800782e:	f7f8 fee3 	bl	80005f8 <__aeabi_dmul>
 8007832:	2200      	movs	r2, #0
 8007834:	2300      	movs	r3, #0
 8007836:	4604      	mov	r4, r0
 8007838:	460d      	mov	r5, r1
 800783a:	f7f9 f945 	bl	8000ac8 <__aeabi_dcmpeq>
 800783e:	2800      	cmp	r0, #0
 8007840:	f43f aebb 	beq.w	80075ba <_dtoa_r+0x472>
 8007844:	e6f0      	b.n	8007628 <_dtoa_r+0x4e0>
 8007846:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007848:	2a00      	cmp	r2, #0
 800784a:	f000 80db 	beq.w	8007a04 <_dtoa_r+0x8bc>
 800784e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007850:	2a01      	cmp	r2, #1
 8007852:	f300 80bf 	bgt.w	80079d4 <_dtoa_r+0x88c>
 8007856:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007858:	2a00      	cmp	r2, #0
 800785a:	f000 80b7 	beq.w	80079cc <_dtoa_r+0x884>
 800785e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007862:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007864:	4646      	mov	r6, r8
 8007866:	9a08      	ldr	r2, [sp, #32]
 8007868:	2101      	movs	r1, #1
 800786a:	441a      	add	r2, r3
 800786c:	4658      	mov	r0, fp
 800786e:	4498      	add	r8, r3
 8007870:	9208      	str	r2, [sp, #32]
 8007872:	f000 fc6b 	bl	800814c <__i2b>
 8007876:	4605      	mov	r5, r0
 8007878:	b15e      	cbz	r6, 8007892 <_dtoa_r+0x74a>
 800787a:	9b08      	ldr	r3, [sp, #32]
 800787c:	2b00      	cmp	r3, #0
 800787e:	dd08      	ble.n	8007892 <_dtoa_r+0x74a>
 8007880:	42b3      	cmp	r3, r6
 8007882:	9a08      	ldr	r2, [sp, #32]
 8007884:	bfa8      	it	ge
 8007886:	4633      	movge	r3, r6
 8007888:	eba8 0803 	sub.w	r8, r8, r3
 800788c:	1af6      	subs	r6, r6, r3
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	9308      	str	r3, [sp, #32]
 8007892:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007894:	b1f3      	cbz	r3, 80078d4 <_dtoa_r+0x78c>
 8007896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 80b7 	beq.w	8007a0c <_dtoa_r+0x8c4>
 800789e:	b18c      	cbz	r4, 80078c4 <_dtoa_r+0x77c>
 80078a0:	4629      	mov	r1, r5
 80078a2:	4622      	mov	r2, r4
 80078a4:	4658      	mov	r0, fp
 80078a6:	f000 fd11 	bl	80082cc <__pow5mult>
 80078aa:	464a      	mov	r2, r9
 80078ac:	4601      	mov	r1, r0
 80078ae:	4605      	mov	r5, r0
 80078b0:	4658      	mov	r0, fp
 80078b2:	f000 fc61 	bl	8008178 <__multiply>
 80078b6:	4649      	mov	r1, r9
 80078b8:	9004      	str	r0, [sp, #16]
 80078ba:	4658      	mov	r0, fp
 80078bc:	f000 fb48 	bl	8007f50 <_Bfree>
 80078c0:	9b04      	ldr	r3, [sp, #16]
 80078c2:	4699      	mov	r9, r3
 80078c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078c6:	1b1a      	subs	r2, r3, r4
 80078c8:	d004      	beq.n	80078d4 <_dtoa_r+0x78c>
 80078ca:	4649      	mov	r1, r9
 80078cc:	4658      	mov	r0, fp
 80078ce:	f000 fcfd 	bl	80082cc <__pow5mult>
 80078d2:	4681      	mov	r9, r0
 80078d4:	2101      	movs	r1, #1
 80078d6:	4658      	mov	r0, fp
 80078d8:	f000 fc38 	bl	800814c <__i2b>
 80078dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078de:	4604      	mov	r4, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 81cf 	beq.w	8007c84 <_dtoa_r+0xb3c>
 80078e6:	461a      	mov	r2, r3
 80078e8:	4601      	mov	r1, r0
 80078ea:	4658      	mov	r0, fp
 80078ec:	f000 fcee 	bl	80082cc <__pow5mult>
 80078f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	4604      	mov	r4, r0
 80078f6:	f300 8095 	bgt.w	8007a24 <_dtoa_r+0x8dc>
 80078fa:	9b02      	ldr	r3, [sp, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f040 8087 	bne.w	8007a10 <_dtoa_r+0x8c8>
 8007902:	9b03      	ldr	r3, [sp, #12]
 8007904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007908:	2b00      	cmp	r3, #0
 800790a:	f040 8089 	bne.w	8007a20 <_dtoa_r+0x8d8>
 800790e:	9b03      	ldr	r3, [sp, #12]
 8007910:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007914:	0d1b      	lsrs	r3, r3, #20
 8007916:	051b      	lsls	r3, r3, #20
 8007918:	b12b      	cbz	r3, 8007926 <_dtoa_r+0x7de>
 800791a:	9b08      	ldr	r3, [sp, #32]
 800791c:	3301      	adds	r3, #1
 800791e:	9308      	str	r3, [sp, #32]
 8007920:	f108 0801 	add.w	r8, r8, #1
 8007924:	2301      	movs	r3, #1
 8007926:	930a      	str	r3, [sp, #40]	@ 0x28
 8007928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 81b0 	beq.w	8007c90 <_dtoa_r+0xb48>
 8007930:	6923      	ldr	r3, [r4, #16]
 8007932:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007936:	6918      	ldr	r0, [r3, #16]
 8007938:	f000 fbbc 	bl	80080b4 <__hi0bits>
 800793c:	f1c0 0020 	rsb	r0, r0, #32
 8007940:	9b08      	ldr	r3, [sp, #32]
 8007942:	4418      	add	r0, r3
 8007944:	f010 001f 	ands.w	r0, r0, #31
 8007948:	d077      	beq.n	8007a3a <_dtoa_r+0x8f2>
 800794a:	f1c0 0320 	rsb	r3, r0, #32
 800794e:	2b04      	cmp	r3, #4
 8007950:	dd6b      	ble.n	8007a2a <_dtoa_r+0x8e2>
 8007952:	9b08      	ldr	r3, [sp, #32]
 8007954:	f1c0 001c 	rsb	r0, r0, #28
 8007958:	4403      	add	r3, r0
 800795a:	4480      	add	r8, r0
 800795c:	4406      	add	r6, r0
 800795e:	9308      	str	r3, [sp, #32]
 8007960:	f1b8 0f00 	cmp.w	r8, #0
 8007964:	dd05      	ble.n	8007972 <_dtoa_r+0x82a>
 8007966:	4649      	mov	r1, r9
 8007968:	4642      	mov	r2, r8
 800796a:	4658      	mov	r0, fp
 800796c:	f000 fd08 	bl	8008380 <__lshift>
 8007970:	4681      	mov	r9, r0
 8007972:	9b08      	ldr	r3, [sp, #32]
 8007974:	2b00      	cmp	r3, #0
 8007976:	dd05      	ble.n	8007984 <_dtoa_r+0x83c>
 8007978:	4621      	mov	r1, r4
 800797a:	461a      	mov	r2, r3
 800797c:	4658      	mov	r0, fp
 800797e:	f000 fcff 	bl	8008380 <__lshift>
 8007982:	4604      	mov	r4, r0
 8007984:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007986:	2b00      	cmp	r3, #0
 8007988:	d059      	beq.n	8007a3e <_dtoa_r+0x8f6>
 800798a:	4621      	mov	r1, r4
 800798c:	4648      	mov	r0, r9
 800798e:	f000 fd63 	bl	8008458 <__mcmp>
 8007992:	2800      	cmp	r0, #0
 8007994:	da53      	bge.n	8007a3e <_dtoa_r+0x8f6>
 8007996:	1e7b      	subs	r3, r7, #1
 8007998:	9304      	str	r3, [sp, #16]
 800799a:	4649      	mov	r1, r9
 800799c:	2300      	movs	r3, #0
 800799e:	220a      	movs	r2, #10
 80079a0:	4658      	mov	r0, fp
 80079a2:	f000 faf7 	bl	8007f94 <__multadd>
 80079a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079a8:	4681      	mov	r9, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8172 	beq.w	8007c94 <_dtoa_r+0xb4c>
 80079b0:	2300      	movs	r3, #0
 80079b2:	4629      	mov	r1, r5
 80079b4:	220a      	movs	r2, #10
 80079b6:	4658      	mov	r0, fp
 80079b8:	f000 faec 	bl	8007f94 <__multadd>
 80079bc:	9b00      	ldr	r3, [sp, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	4605      	mov	r5, r0
 80079c2:	dc67      	bgt.n	8007a94 <_dtoa_r+0x94c>
 80079c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	dc41      	bgt.n	8007a4e <_dtoa_r+0x906>
 80079ca:	e063      	b.n	8007a94 <_dtoa_r+0x94c>
 80079cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80079ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80079d2:	e746      	b.n	8007862 <_dtoa_r+0x71a>
 80079d4:	9b07      	ldr	r3, [sp, #28]
 80079d6:	1e5c      	subs	r4, r3, #1
 80079d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079da:	42a3      	cmp	r3, r4
 80079dc:	bfbf      	itttt	lt
 80079de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80079e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80079e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80079e4:	1ae3      	sublt	r3, r4, r3
 80079e6:	bfb4      	ite	lt
 80079e8:	18d2      	addlt	r2, r2, r3
 80079ea:	1b1c      	subge	r4, r3, r4
 80079ec:	9b07      	ldr	r3, [sp, #28]
 80079ee:	bfbc      	itt	lt
 80079f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80079f2:	2400      	movlt	r4, #0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bfb5      	itete	lt
 80079f8:	eba8 0603 	sublt.w	r6, r8, r3
 80079fc:	9b07      	ldrge	r3, [sp, #28]
 80079fe:	2300      	movlt	r3, #0
 8007a00:	4646      	movge	r6, r8
 8007a02:	e730      	b.n	8007866 <_dtoa_r+0x71e>
 8007a04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007a08:	4646      	mov	r6, r8
 8007a0a:	e735      	b.n	8007878 <_dtoa_r+0x730>
 8007a0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a0e:	e75c      	b.n	80078ca <_dtoa_r+0x782>
 8007a10:	2300      	movs	r3, #0
 8007a12:	e788      	b.n	8007926 <_dtoa_r+0x7de>
 8007a14:	3fe00000 	.word	0x3fe00000
 8007a18:	40240000 	.word	0x40240000
 8007a1c:	40140000 	.word	0x40140000
 8007a20:	9b02      	ldr	r3, [sp, #8]
 8007a22:	e780      	b.n	8007926 <_dtoa_r+0x7de>
 8007a24:	2300      	movs	r3, #0
 8007a26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a28:	e782      	b.n	8007930 <_dtoa_r+0x7e8>
 8007a2a:	d099      	beq.n	8007960 <_dtoa_r+0x818>
 8007a2c:	9a08      	ldr	r2, [sp, #32]
 8007a2e:	331c      	adds	r3, #28
 8007a30:	441a      	add	r2, r3
 8007a32:	4498      	add	r8, r3
 8007a34:	441e      	add	r6, r3
 8007a36:	9208      	str	r2, [sp, #32]
 8007a38:	e792      	b.n	8007960 <_dtoa_r+0x818>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	e7f6      	b.n	8007a2c <_dtoa_r+0x8e4>
 8007a3e:	9b07      	ldr	r3, [sp, #28]
 8007a40:	9704      	str	r7, [sp, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dc20      	bgt.n	8007a88 <_dtoa_r+0x940>
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	dd1e      	ble.n	8007a8c <_dtoa_r+0x944>
 8007a4e:	9b00      	ldr	r3, [sp, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f47f aec0 	bne.w	80077d6 <_dtoa_r+0x68e>
 8007a56:	4621      	mov	r1, r4
 8007a58:	2205      	movs	r2, #5
 8007a5a:	4658      	mov	r0, fp
 8007a5c:	f000 fa9a 	bl	8007f94 <__multadd>
 8007a60:	4601      	mov	r1, r0
 8007a62:	4604      	mov	r4, r0
 8007a64:	4648      	mov	r0, r9
 8007a66:	f000 fcf7 	bl	8008458 <__mcmp>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f77f aeb3 	ble.w	80077d6 <_dtoa_r+0x68e>
 8007a70:	4656      	mov	r6, sl
 8007a72:	2331      	movs	r3, #49	@ 0x31
 8007a74:	f806 3b01 	strb.w	r3, [r6], #1
 8007a78:	9b04      	ldr	r3, [sp, #16]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	9304      	str	r3, [sp, #16]
 8007a7e:	e6ae      	b.n	80077de <_dtoa_r+0x696>
 8007a80:	9c07      	ldr	r4, [sp, #28]
 8007a82:	9704      	str	r7, [sp, #16]
 8007a84:	4625      	mov	r5, r4
 8007a86:	e7f3      	b.n	8007a70 <_dtoa_r+0x928>
 8007a88:	9b07      	ldr	r3, [sp, #28]
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 8104 	beq.w	8007c9c <_dtoa_r+0xb54>
 8007a94:	2e00      	cmp	r6, #0
 8007a96:	dd05      	ble.n	8007aa4 <_dtoa_r+0x95c>
 8007a98:	4629      	mov	r1, r5
 8007a9a:	4632      	mov	r2, r6
 8007a9c:	4658      	mov	r0, fp
 8007a9e:	f000 fc6f 	bl	8008380 <__lshift>
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d05a      	beq.n	8007b60 <_dtoa_r+0xa18>
 8007aaa:	6869      	ldr	r1, [r5, #4]
 8007aac:	4658      	mov	r0, fp
 8007aae:	f000 fa0f 	bl	8007ed0 <_Balloc>
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	b928      	cbnz	r0, 8007ac2 <_dtoa_r+0x97a>
 8007ab6:	4b84      	ldr	r3, [pc, #528]	@ (8007cc8 <_dtoa_r+0xb80>)
 8007ab8:	4602      	mov	r2, r0
 8007aba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007abe:	f7ff bb5a 	b.w	8007176 <_dtoa_r+0x2e>
 8007ac2:	692a      	ldr	r2, [r5, #16]
 8007ac4:	3202      	adds	r2, #2
 8007ac6:	0092      	lsls	r2, r2, #2
 8007ac8:	f105 010c 	add.w	r1, r5, #12
 8007acc:	300c      	adds	r0, #12
 8007ace:	f001 ff75 	bl	80099bc <memcpy>
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4658      	mov	r0, fp
 8007ad8:	f000 fc52 	bl	8008380 <__lshift>
 8007adc:	f10a 0301 	add.w	r3, sl, #1
 8007ae0:	9307      	str	r3, [sp, #28]
 8007ae2:	9b00      	ldr	r3, [sp, #0]
 8007ae4:	4453      	add	r3, sl
 8007ae6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ae8:	9b02      	ldr	r3, [sp, #8]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	462f      	mov	r7, r5
 8007af0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007af2:	4605      	mov	r5, r0
 8007af4:	9b07      	ldr	r3, [sp, #28]
 8007af6:	4621      	mov	r1, r4
 8007af8:	3b01      	subs	r3, #1
 8007afa:	4648      	mov	r0, r9
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	f7ff fa99 	bl	8007034 <quorem>
 8007b02:	4639      	mov	r1, r7
 8007b04:	9002      	str	r0, [sp, #8]
 8007b06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b0a:	4648      	mov	r0, r9
 8007b0c:	f000 fca4 	bl	8008458 <__mcmp>
 8007b10:	462a      	mov	r2, r5
 8007b12:	9008      	str	r0, [sp, #32]
 8007b14:	4621      	mov	r1, r4
 8007b16:	4658      	mov	r0, fp
 8007b18:	f000 fcba 	bl	8008490 <__mdiff>
 8007b1c:	68c2      	ldr	r2, [r0, #12]
 8007b1e:	4606      	mov	r6, r0
 8007b20:	bb02      	cbnz	r2, 8007b64 <_dtoa_r+0xa1c>
 8007b22:	4601      	mov	r1, r0
 8007b24:	4648      	mov	r0, r9
 8007b26:	f000 fc97 	bl	8008458 <__mcmp>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4658      	mov	r0, fp
 8007b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b32:	f000 fa0d 	bl	8007f50 <_Bfree>
 8007b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b3a:	9e07      	ldr	r6, [sp, #28]
 8007b3c:	ea43 0102 	orr.w	r1, r3, r2
 8007b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b42:	4319      	orrs	r1, r3
 8007b44:	d110      	bne.n	8007b68 <_dtoa_r+0xa20>
 8007b46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b4a:	d029      	beq.n	8007ba0 <_dtoa_r+0xa58>
 8007b4c:	9b08      	ldr	r3, [sp, #32]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	dd02      	ble.n	8007b58 <_dtoa_r+0xa10>
 8007b52:	9b02      	ldr	r3, [sp, #8]
 8007b54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007b58:	9b00      	ldr	r3, [sp, #0]
 8007b5a:	f883 8000 	strb.w	r8, [r3]
 8007b5e:	e63f      	b.n	80077e0 <_dtoa_r+0x698>
 8007b60:	4628      	mov	r0, r5
 8007b62:	e7bb      	b.n	8007adc <_dtoa_r+0x994>
 8007b64:	2201      	movs	r2, #1
 8007b66:	e7e1      	b.n	8007b2c <_dtoa_r+0x9e4>
 8007b68:	9b08      	ldr	r3, [sp, #32]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	db04      	blt.n	8007b78 <_dtoa_r+0xa30>
 8007b6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b70:	430b      	orrs	r3, r1
 8007b72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b74:	430b      	orrs	r3, r1
 8007b76:	d120      	bne.n	8007bba <_dtoa_r+0xa72>
 8007b78:	2a00      	cmp	r2, #0
 8007b7a:	dded      	ble.n	8007b58 <_dtoa_r+0xa10>
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	2201      	movs	r2, #1
 8007b80:	4658      	mov	r0, fp
 8007b82:	f000 fbfd 	bl	8008380 <__lshift>
 8007b86:	4621      	mov	r1, r4
 8007b88:	4681      	mov	r9, r0
 8007b8a:	f000 fc65 	bl	8008458 <__mcmp>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	dc03      	bgt.n	8007b9a <_dtoa_r+0xa52>
 8007b92:	d1e1      	bne.n	8007b58 <_dtoa_r+0xa10>
 8007b94:	f018 0f01 	tst.w	r8, #1
 8007b98:	d0de      	beq.n	8007b58 <_dtoa_r+0xa10>
 8007b9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b9e:	d1d8      	bne.n	8007b52 <_dtoa_r+0xa0a>
 8007ba0:	9a00      	ldr	r2, [sp, #0]
 8007ba2:	2339      	movs	r3, #57	@ 0x39
 8007ba4:	7013      	strb	r3, [r2, #0]
 8007ba6:	4633      	mov	r3, r6
 8007ba8:	461e      	mov	r6, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007bb0:	2a39      	cmp	r2, #57	@ 0x39
 8007bb2:	d052      	beq.n	8007c5a <_dtoa_r+0xb12>
 8007bb4:	3201      	adds	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	e612      	b.n	80077e0 <_dtoa_r+0x698>
 8007bba:	2a00      	cmp	r2, #0
 8007bbc:	dd07      	ble.n	8007bce <_dtoa_r+0xa86>
 8007bbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bc2:	d0ed      	beq.n	8007ba0 <_dtoa_r+0xa58>
 8007bc4:	9a00      	ldr	r2, [sp, #0]
 8007bc6:	f108 0301 	add.w	r3, r8, #1
 8007bca:	7013      	strb	r3, [r2, #0]
 8007bcc:	e608      	b.n	80077e0 <_dtoa_r+0x698>
 8007bce:	9b07      	ldr	r3, [sp, #28]
 8007bd0:	9a07      	ldr	r2, [sp, #28]
 8007bd2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007bd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d028      	beq.n	8007c2e <_dtoa_r+0xae6>
 8007bdc:	4649      	mov	r1, r9
 8007bde:	2300      	movs	r3, #0
 8007be0:	220a      	movs	r2, #10
 8007be2:	4658      	mov	r0, fp
 8007be4:	f000 f9d6 	bl	8007f94 <__multadd>
 8007be8:	42af      	cmp	r7, r5
 8007bea:	4681      	mov	r9, r0
 8007bec:	f04f 0300 	mov.w	r3, #0
 8007bf0:	f04f 020a 	mov.w	r2, #10
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	4658      	mov	r0, fp
 8007bf8:	d107      	bne.n	8007c0a <_dtoa_r+0xac2>
 8007bfa:	f000 f9cb 	bl	8007f94 <__multadd>
 8007bfe:	4607      	mov	r7, r0
 8007c00:	4605      	mov	r5, r0
 8007c02:	9b07      	ldr	r3, [sp, #28]
 8007c04:	3301      	adds	r3, #1
 8007c06:	9307      	str	r3, [sp, #28]
 8007c08:	e774      	b.n	8007af4 <_dtoa_r+0x9ac>
 8007c0a:	f000 f9c3 	bl	8007f94 <__multadd>
 8007c0e:	4629      	mov	r1, r5
 8007c10:	4607      	mov	r7, r0
 8007c12:	2300      	movs	r3, #0
 8007c14:	220a      	movs	r2, #10
 8007c16:	4658      	mov	r0, fp
 8007c18:	f000 f9bc 	bl	8007f94 <__multadd>
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	e7f0      	b.n	8007c02 <_dtoa_r+0xaba>
 8007c20:	9b00      	ldr	r3, [sp, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	bfcc      	ite	gt
 8007c26:	461e      	movgt	r6, r3
 8007c28:	2601      	movle	r6, #1
 8007c2a:	4456      	add	r6, sl
 8007c2c:	2700      	movs	r7, #0
 8007c2e:	4649      	mov	r1, r9
 8007c30:	2201      	movs	r2, #1
 8007c32:	4658      	mov	r0, fp
 8007c34:	f000 fba4 	bl	8008380 <__lshift>
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4681      	mov	r9, r0
 8007c3c:	f000 fc0c 	bl	8008458 <__mcmp>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	dcb0      	bgt.n	8007ba6 <_dtoa_r+0xa5e>
 8007c44:	d102      	bne.n	8007c4c <_dtoa_r+0xb04>
 8007c46:	f018 0f01 	tst.w	r8, #1
 8007c4a:	d1ac      	bne.n	8007ba6 <_dtoa_r+0xa5e>
 8007c4c:	4633      	mov	r3, r6
 8007c4e:	461e      	mov	r6, r3
 8007c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c54:	2a30      	cmp	r2, #48	@ 0x30
 8007c56:	d0fa      	beq.n	8007c4e <_dtoa_r+0xb06>
 8007c58:	e5c2      	b.n	80077e0 <_dtoa_r+0x698>
 8007c5a:	459a      	cmp	sl, r3
 8007c5c:	d1a4      	bne.n	8007ba8 <_dtoa_r+0xa60>
 8007c5e:	9b04      	ldr	r3, [sp, #16]
 8007c60:	3301      	adds	r3, #1
 8007c62:	9304      	str	r3, [sp, #16]
 8007c64:	2331      	movs	r3, #49	@ 0x31
 8007c66:	f88a 3000 	strb.w	r3, [sl]
 8007c6a:	e5b9      	b.n	80077e0 <_dtoa_r+0x698>
 8007c6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007ccc <_dtoa_r+0xb84>
 8007c72:	b11b      	cbz	r3, 8007c7c <_dtoa_r+0xb34>
 8007c74:	f10a 0308 	add.w	r3, sl, #8
 8007c78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c7a:	6013      	str	r3, [r2, #0]
 8007c7c:	4650      	mov	r0, sl
 8007c7e:	b019      	add	sp, #100	@ 0x64
 8007c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	f77f ae37 	ble.w	80078fa <_dtoa_r+0x7b2>
 8007c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c90:	2001      	movs	r0, #1
 8007c92:	e655      	b.n	8007940 <_dtoa_r+0x7f8>
 8007c94:	9b00      	ldr	r3, [sp, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f77f aed6 	ble.w	8007a48 <_dtoa_r+0x900>
 8007c9c:	4656      	mov	r6, sl
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	f7ff f9c7 	bl	8007034 <quorem>
 8007ca6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007caa:	f806 8b01 	strb.w	r8, [r6], #1
 8007cae:	9b00      	ldr	r3, [sp, #0]
 8007cb0:	eba6 020a 	sub.w	r2, r6, sl
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	ddb3      	ble.n	8007c20 <_dtoa_r+0xad8>
 8007cb8:	4649      	mov	r1, r9
 8007cba:	2300      	movs	r3, #0
 8007cbc:	220a      	movs	r2, #10
 8007cbe:	4658      	mov	r0, fp
 8007cc0:	f000 f968 	bl	8007f94 <__multadd>
 8007cc4:	4681      	mov	r9, r0
 8007cc6:	e7ea      	b.n	8007c9e <_dtoa_r+0xb56>
 8007cc8:	0800b90d 	.word	0x0800b90d
 8007ccc:	0800b891 	.word	0x0800b891

08007cd0 <_free_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	2900      	cmp	r1, #0
 8007cd6:	d041      	beq.n	8007d5c <_free_r+0x8c>
 8007cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cdc:	1f0c      	subs	r4, r1, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	bfb8      	it	lt
 8007ce2:	18e4      	addlt	r4, r4, r3
 8007ce4:	f000 f8e8 	bl	8007eb8 <__malloc_lock>
 8007ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d60 <_free_r+0x90>)
 8007cea:	6813      	ldr	r3, [r2, #0]
 8007cec:	b933      	cbnz	r3, 8007cfc <_free_r+0x2c>
 8007cee:	6063      	str	r3, [r4, #4]
 8007cf0:	6014      	str	r4, [r2, #0]
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cf8:	f000 b8e4 	b.w	8007ec4 <__malloc_unlock>
 8007cfc:	42a3      	cmp	r3, r4
 8007cfe:	d908      	bls.n	8007d12 <_free_r+0x42>
 8007d00:	6820      	ldr	r0, [r4, #0]
 8007d02:	1821      	adds	r1, r4, r0
 8007d04:	428b      	cmp	r3, r1
 8007d06:	bf01      	itttt	eq
 8007d08:	6819      	ldreq	r1, [r3, #0]
 8007d0a:	685b      	ldreq	r3, [r3, #4]
 8007d0c:	1809      	addeq	r1, r1, r0
 8007d0e:	6021      	streq	r1, [r4, #0]
 8007d10:	e7ed      	b.n	8007cee <_free_r+0x1e>
 8007d12:	461a      	mov	r2, r3
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	b10b      	cbz	r3, 8007d1c <_free_r+0x4c>
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	d9fa      	bls.n	8007d12 <_free_r+0x42>
 8007d1c:	6811      	ldr	r1, [r2, #0]
 8007d1e:	1850      	adds	r0, r2, r1
 8007d20:	42a0      	cmp	r0, r4
 8007d22:	d10b      	bne.n	8007d3c <_free_r+0x6c>
 8007d24:	6820      	ldr	r0, [r4, #0]
 8007d26:	4401      	add	r1, r0
 8007d28:	1850      	adds	r0, r2, r1
 8007d2a:	4283      	cmp	r3, r0
 8007d2c:	6011      	str	r1, [r2, #0]
 8007d2e:	d1e0      	bne.n	8007cf2 <_free_r+0x22>
 8007d30:	6818      	ldr	r0, [r3, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	6053      	str	r3, [r2, #4]
 8007d36:	4408      	add	r0, r1
 8007d38:	6010      	str	r0, [r2, #0]
 8007d3a:	e7da      	b.n	8007cf2 <_free_r+0x22>
 8007d3c:	d902      	bls.n	8007d44 <_free_r+0x74>
 8007d3e:	230c      	movs	r3, #12
 8007d40:	602b      	str	r3, [r5, #0]
 8007d42:	e7d6      	b.n	8007cf2 <_free_r+0x22>
 8007d44:	6820      	ldr	r0, [r4, #0]
 8007d46:	1821      	adds	r1, r4, r0
 8007d48:	428b      	cmp	r3, r1
 8007d4a:	bf04      	itt	eq
 8007d4c:	6819      	ldreq	r1, [r3, #0]
 8007d4e:	685b      	ldreq	r3, [r3, #4]
 8007d50:	6063      	str	r3, [r4, #4]
 8007d52:	bf04      	itt	eq
 8007d54:	1809      	addeq	r1, r1, r0
 8007d56:	6021      	streq	r1, [r4, #0]
 8007d58:	6054      	str	r4, [r2, #4]
 8007d5a:	e7ca      	b.n	8007cf2 <_free_r+0x22>
 8007d5c:	bd38      	pop	{r3, r4, r5, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000904 	.word	0x20000904

08007d64 <malloc>:
 8007d64:	4b02      	ldr	r3, [pc, #8]	@ (8007d70 <malloc+0xc>)
 8007d66:	4601      	mov	r1, r0
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	f000 b825 	b.w	8007db8 <_malloc_r>
 8007d6e:	bf00      	nop
 8007d70:	20000018 	.word	0x20000018

08007d74 <sbrk_aligned>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	4e0f      	ldr	r6, [pc, #60]	@ (8007db4 <sbrk_aligned+0x40>)
 8007d78:	460c      	mov	r4, r1
 8007d7a:	6831      	ldr	r1, [r6, #0]
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	b911      	cbnz	r1, 8007d86 <sbrk_aligned+0x12>
 8007d80:	f001 fe0c 	bl	800999c <_sbrk_r>
 8007d84:	6030      	str	r0, [r6, #0]
 8007d86:	4621      	mov	r1, r4
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f001 fe07 	bl	800999c <_sbrk_r>
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	d103      	bne.n	8007d9a <sbrk_aligned+0x26>
 8007d92:	f04f 34ff 	mov.w	r4, #4294967295
 8007d96:	4620      	mov	r0, r4
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
 8007d9a:	1cc4      	adds	r4, r0, #3
 8007d9c:	f024 0403 	bic.w	r4, r4, #3
 8007da0:	42a0      	cmp	r0, r4
 8007da2:	d0f8      	beq.n	8007d96 <sbrk_aligned+0x22>
 8007da4:	1a21      	subs	r1, r4, r0
 8007da6:	4628      	mov	r0, r5
 8007da8:	f001 fdf8 	bl	800999c <_sbrk_r>
 8007dac:	3001      	adds	r0, #1
 8007dae:	d1f2      	bne.n	8007d96 <sbrk_aligned+0x22>
 8007db0:	e7ef      	b.n	8007d92 <sbrk_aligned+0x1e>
 8007db2:	bf00      	nop
 8007db4:	20000900 	.word	0x20000900

08007db8 <_malloc_r>:
 8007db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dbc:	1ccd      	adds	r5, r1, #3
 8007dbe:	f025 0503 	bic.w	r5, r5, #3
 8007dc2:	3508      	adds	r5, #8
 8007dc4:	2d0c      	cmp	r5, #12
 8007dc6:	bf38      	it	cc
 8007dc8:	250c      	movcc	r5, #12
 8007dca:	2d00      	cmp	r5, #0
 8007dcc:	4606      	mov	r6, r0
 8007dce:	db01      	blt.n	8007dd4 <_malloc_r+0x1c>
 8007dd0:	42a9      	cmp	r1, r5
 8007dd2:	d904      	bls.n	8007dde <_malloc_r+0x26>
 8007dd4:	230c      	movs	r3, #12
 8007dd6:	6033      	str	r3, [r6, #0]
 8007dd8:	2000      	movs	r0, #0
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007eb4 <_malloc_r+0xfc>
 8007de2:	f000 f869 	bl	8007eb8 <__malloc_lock>
 8007de6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dea:	461c      	mov	r4, r3
 8007dec:	bb44      	cbnz	r4, 8007e40 <_malloc_r+0x88>
 8007dee:	4629      	mov	r1, r5
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7ff ffbf 	bl	8007d74 <sbrk_aligned>
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	4604      	mov	r4, r0
 8007dfa:	d158      	bne.n	8007eae <_malloc_r+0xf6>
 8007dfc:	f8d8 4000 	ldr.w	r4, [r8]
 8007e00:	4627      	mov	r7, r4
 8007e02:	2f00      	cmp	r7, #0
 8007e04:	d143      	bne.n	8007e8e <_malloc_r+0xd6>
 8007e06:	2c00      	cmp	r4, #0
 8007e08:	d04b      	beq.n	8007ea2 <_malloc_r+0xea>
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	4630      	mov	r0, r6
 8007e10:	eb04 0903 	add.w	r9, r4, r3
 8007e14:	f001 fdc2 	bl	800999c <_sbrk_r>
 8007e18:	4581      	cmp	r9, r0
 8007e1a:	d142      	bne.n	8007ea2 <_malloc_r+0xea>
 8007e1c:	6821      	ldr	r1, [r4, #0]
 8007e1e:	1a6d      	subs	r5, r5, r1
 8007e20:	4629      	mov	r1, r5
 8007e22:	4630      	mov	r0, r6
 8007e24:	f7ff ffa6 	bl	8007d74 <sbrk_aligned>
 8007e28:	3001      	adds	r0, #1
 8007e2a:	d03a      	beq.n	8007ea2 <_malloc_r+0xea>
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	442b      	add	r3, r5
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	f8d8 3000 	ldr.w	r3, [r8]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	bb62      	cbnz	r2, 8007e94 <_malloc_r+0xdc>
 8007e3a:	f8c8 7000 	str.w	r7, [r8]
 8007e3e:	e00f      	b.n	8007e60 <_malloc_r+0xa8>
 8007e40:	6822      	ldr	r2, [r4, #0]
 8007e42:	1b52      	subs	r2, r2, r5
 8007e44:	d420      	bmi.n	8007e88 <_malloc_r+0xd0>
 8007e46:	2a0b      	cmp	r2, #11
 8007e48:	d917      	bls.n	8007e7a <_malloc_r+0xc2>
 8007e4a:	1961      	adds	r1, r4, r5
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	6025      	str	r5, [r4, #0]
 8007e50:	bf18      	it	ne
 8007e52:	6059      	strne	r1, [r3, #4]
 8007e54:	6863      	ldr	r3, [r4, #4]
 8007e56:	bf08      	it	eq
 8007e58:	f8c8 1000 	streq.w	r1, [r8]
 8007e5c:	5162      	str	r2, [r4, r5]
 8007e5e:	604b      	str	r3, [r1, #4]
 8007e60:	4630      	mov	r0, r6
 8007e62:	f000 f82f 	bl	8007ec4 <__malloc_unlock>
 8007e66:	f104 000b 	add.w	r0, r4, #11
 8007e6a:	1d23      	adds	r3, r4, #4
 8007e6c:	f020 0007 	bic.w	r0, r0, #7
 8007e70:	1ac2      	subs	r2, r0, r3
 8007e72:	bf1c      	itt	ne
 8007e74:	1a1b      	subne	r3, r3, r0
 8007e76:	50a3      	strne	r3, [r4, r2]
 8007e78:	e7af      	b.n	8007dda <_malloc_r+0x22>
 8007e7a:	6862      	ldr	r2, [r4, #4]
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	bf0c      	ite	eq
 8007e80:	f8c8 2000 	streq.w	r2, [r8]
 8007e84:	605a      	strne	r2, [r3, #4]
 8007e86:	e7eb      	b.n	8007e60 <_malloc_r+0xa8>
 8007e88:	4623      	mov	r3, r4
 8007e8a:	6864      	ldr	r4, [r4, #4]
 8007e8c:	e7ae      	b.n	8007dec <_malloc_r+0x34>
 8007e8e:	463c      	mov	r4, r7
 8007e90:	687f      	ldr	r7, [r7, #4]
 8007e92:	e7b6      	b.n	8007e02 <_malloc_r+0x4a>
 8007e94:	461a      	mov	r2, r3
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d1fb      	bne.n	8007e94 <_malloc_r+0xdc>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	6053      	str	r3, [r2, #4]
 8007ea0:	e7de      	b.n	8007e60 <_malloc_r+0xa8>
 8007ea2:	230c      	movs	r3, #12
 8007ea4:	6033      	str	r3, [r6, #0]
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f000 f80c 	bl	8007ec4 <__malloc_unlock>
 8007eac:	e794      	b.n	8007dd8 <_malloc_r+0x20>
 8007eae:	6005      	str	r5, [r0, #0]
 8007eb0:	e7d6      	b.n	8007e60 <_malloc_r+0xa8>
 8007eb2:	bf00      	nop
 8007eb4:	20000904 	.word	0x20000904

08007eb8 <__malloc_lock>:
 8007eb8:	4801      	ldr	r0, [pc, #4]	@ (8007ec0 <__malloc_lock+0x8>)
 8007eba:	f7ff b8b2 	b.w	8007022 <__retarget_lock_acquire_recursive>
 8007ebe:	bf00      	nop
 8007ec0:	200008fc 	.word	0x200008fc

08007ec4 <__malloc_unlock>:
 8007ec4:	4801      	ldr	r0, [pc, #4]	@ (8007ecc <__malloc_unlock+0x8>)
 8007ec6:	f7ff b8ad 	b.w	8007024 <__retarget_lock_release_recursive>
 8007eca:	bf00      	nop
 8007ecc:	200008fc 	.word	0x200008fc

08007ed0 <_Balloc>:
 8007ed0:	b570      	push	{r4, r5, r6, lr}
 8007ed2:	69c6      	ldr	r6, [r0, #28]
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	460d      	mov	r5, r1
 8007ed8:	b976      	cbnz	r6, 8007ef8 <_Balloc+0x28>
 8007eda:	2010      	movs	r0, #16
 8007edc:	f7ff ff42 	bl	8007d64 <malloc>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	61e0      	str	r0, [r4, #28]
 8007ee4:	b920      	cbnz	r0, 8007ef0 <_Balloc+0x20>
 8007ee6:	4b18      	ldr	r3, [pc, #96]	@ (8007f48 <_Balloc+0x78>)
 8007ee8:	4818      	ldr	r0, [pc, #96]	@ (8007f4c <_Balloc+0x7c>)
 8007eea:	216b      	movs	r1, #107	@ 0x6b
 8007eec:	f001 fd7c 	bl	80099e8 <__assert_func>
 8007ef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ef4:	6006      	str	r6, [r0, #0]
 8007ef6:	60c6      	str	r6, [r0, #12]
 8007ef8:	69e6      	ldr	r6, [r4, #28]
 8007efa:	68f3      	ldr	r3, [r6, #12]
 8007efc:	b183      	cbz	r3, 8007f20 <_Balloc+0x50>
 8007efe:	69e3      	ldr	r3, [r4, #28]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f06:	b9b8      	cbnz	r0, 8007f38 <_Balloc+0x68>
 8007f08:	2101      	movs	r1, #1
 8007f0a:	fa01 f605 	lsl.w	r6, r1, r5
 8007f0e:	1d72      	adds	r2, r6, #5
 8007f10:	0092      	lsls	r2, r2, #2
 8007f12:	4620      	mov	r0, r4
 8007f14:	f001 fd86 	bl	8009a24 <_calloc_r>
 8007f18:	b160      	cbz	r0, 8007f34 <_Balloc+0x64>
 8007f1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f1e:	e00e      	b.n	8007f3e <_Balloc+0x6e>
 8007f20:	2221      	movs	r2, #33	@ 0x21
 8007f22:	2104      	movs	r1, #4
 8007f24:	4620      	mov	r0, r4
 8007f26:	f001 fd7d 	bl	8009a24 <_calloc_r>
 8007f2a:	69e3      	ldr	r3, [r4, #28]
 8007f2c:	60f0      	str	r0, [r6, #12]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e4      	bne.n	8007efe <_Balloc+0x2e>
 8007f34:	2000      	movs	r0, #0
 8007f36:	bd70      	pop	{r4, r5, r6, pc}
 8007f38:	6802      	ldr	r2, [r0, #0]
 8007f3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f44:	e7f7      	b.n	8007f36 <_Balloc+0x66>
 8007f46:	bf00      	nop
 8007f48:	0800b89e 	.word	0x0800b89e
 8007f4c:	0800b91e 	.word	0x0800b91e

08007f50 <_Bfree>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	69c6      	ldr	r6, [r0, #28]
 8007f54:	4605      	mov	r5, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	b976      	cbnz	r6, 8007f78 <_Bfree+0x28>
 8007f5a:	2010      	movs	r0, #16
 8007f5c:	f7ff ff02 	bl	8007d64 <malloc>
 8007f60:	4602      	mov	r2, r0
 8007f62:	61e8      	str	r0, [r5, #28]
 8007f64:	b920      	cbnz	r0, 8007f70 <_Bfree+0x20>
 8007f66:	4b09      	ldr	r3, [pc, #36]	@ (8007f8c <_Bfree+0x3c>)
 8007f68:	4809      	ldr	r0, [pc, #36]	@ (8007f90 <_Bfree+0x40>)
 8007f6a:	218f      	movs	r1, #143	@ 0x8f
 8007f6c:	f001 fd3c 	bl	80099e8 <__assert_func>
 8007f70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f74:	6006      	str	r6, [r0, #0]
 8007f76:	60c6      	str	r6, [r0, #12]
 8007f78:	b13c      	cbz	r4, 8007f8a <_Bfree+0x3a>
 8007f7a:	69eb      	ldr	r3, [r5, #28]
 8007f7c:	6862      	ldr	r2, [r4, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f84:	6021      	str	r1, [r4, #0]
 8007f86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
 8007f8c:	0800b89e 	.word	0x0800b89e
 8007f90:	0800b91e 	.word	0x0800b91e

08007f94 <__multadd>:
 8007f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f98:	690d      	ldr	r5, [r1, #16]
 8007f9a:	4607      	mov	r7, r0
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	461e      	mov	r6, r3
 8007fa0:	f101 0c14 	add.w	ip, r1, #20
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	f8dc 3000 	ldr.w	r3, [ip]
 8007faa:	b299      	uxth	r1, r3
 8007fac:	fb02 6101 	mla	r1, r2, r1, r6
 8007fb0:	0c1e      	lsrs	r6, r3, #16
 8007fb2:	0c0b      	lsrs	r3, r1, #16
 8007fb4:	fb02 3306 	mla	r3, r2, r6, r3
 8007fb8:	b289      	uxth	r1, r1
 8007fba:	3001      	adds	r0, #1
 8007fbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fc0:	4285      	cmp	r5, r0
 8007fc2:	f84c 1b04 	str.w	r1, [ip], #4
 8007fc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fca:	dcec      	bgt.n	8007fa6 <__multadd+0x12>
 8007fcc:	b30e      	cbz	r6, 8008012 <__multadd+0x7e>
 8007fce:	68a3      	ldr	r3, [r4, #8]
 8007fd0:	42ab      	cmp	r3, r5
 8007fd2:	dc19      	bgt.n	8008008 <__multadd+0x74>
 8007fd4:	6861      	ldr	r1, [r4, #4]
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	3101      	adds	r1, #1
 8007fda:	f7ff ff79 	bl	8007ed0 <_Balloc>
 8007fde:	4680      	mov	r8, r0
 8007fe0:	b928      	cbnz	r0, 8007fee <__multadd+0x5a>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8008018 <__multadd+0x84>)
 8007fe6:	480d      	ldr	r0, [pc, #52]	@ (800801c <__multadd+0x88>)
 8007fe8:	21ba      	movs	r1, #186	@ 0xba
 8007fea:	f001 fcfd 	bl	80099e8 <__assert_func>
 8007fee:	6922      	ldr	r2, [r4, #16]
 8007ff0:	3202      	adds	r2, #2
 8007ff2:	f104 010c 	add.w	r1, r4, #12
 8007ff6:	0092      	lsls	r2, r2, #2
 8007ff8:	300c      	adds	r0, #12
 8007ffa:	f001 fcdf 	bl	80099bc <memcpy>
 8007ffe:	4621      	mov	r1, r4
 8008000:	4638      	mov	r0, r7
 8008002:	f7ff ffa5 	bl	8007f50 <_Bfree>
 8008006:	4644      	mov	r4, r8
 8008008:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800800c:	3501      	adds	r5, #1
 800800e:	615e      	str	r6, [r3, #20]
 8008010:	6125      	str	r5, [r4, #16]
 8008012:	4620      	mov	r0, r4
 8008014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008018:	0800b90d 	.word	0x0800b90d
 800801c:	0800b91e 	.word	0x0800b91e

08008020 <__s2b>:
 8008020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008024:	460c      	mov	r4, r1
 8008026:	4615      	mov	r5, r2
 8008028:	461f      	mov	r7, r3
 800802a:	2209      	movs	r2, #9
 800802c:	3308      	adds	r3, #8
 800802e:	4606      	mov	r6, r0
 8008030:	fb93 f3f2 	sdiv	r3, r3, r2
 8008034:	2100      	movs	r1, #0
 8008036:	2201      	movs	r2, #1
 8008038:	429a      	cmp	r2, r3
 800803a:	db09      	blt.n	8008050 <__s2b+0x30>
 800803c:	4630      	mov	r0, r6
 800803e:	f7ff ff47 	bl	8007ed0 <_Balloc>
 8008042:	b940      	cbnz	r0, 8008056 <__s2b+0x36>
 8008044:	4602      	mov	r2, r0
 8008046:	4b19      	ldr	r3, [pc, #100]	@ (80080ac <__s2b+0x8c>)
 8008048:	4819      	ldr	r0, [pc, #100]	@ (80080b0 <__s2b+0x90>)
 800804a:	21d3      	movs	r1, #211	@ 0xd3
 800804c:	f001 fccc 	bl	80099e8 <__assert_func>
 8008050:	0052      	lsls	r2, r2, #1
 8008052:	3101      	adds	r1, #1
 8008054:	e7f0      	b.n	8008038 <__s2b+0x18>
 8008056:	9b08      	ldr	r3, [sp, #32]
 8008058:	6143      	str	r3, [r0, #20]
 800805a:	2d09      	cmp	r5, #9
 800805c:	f04f 0301 	mov.w	r3, #1
 8008060:	6103      	str	r3, [r0, #16]
 8008062:	dd16      	ble.n	8008092 <__s2b+0x72>
 8008064:	f104 0909 	add.w	r9, r4, #9
 8008068:	46c8      	mov	r8, r9
 800806a:	442c      	add	r4, r5
 800806c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008070:	4601      	mov	r1, r0
 8008072:	3b30      	subs	r3, #48	@ 0x30
 8008074:	220a      	movs	r2, #10
 8008076:	4630      	mov	r0, r6
 8008078:	f7ff ff8c 	bl	8007f94 <__multadd>
 800807c:	45a0      	cmp	r8, r4
 800807e:	d1f5      	bne.n	800806c <__s2b+0x4c>
 8008080:	f1a5 0408 	sub.w	r4, r5, #8
 8008084:	444c      	add	r4, r9
 8008086:	1b2d      	subs	r5, r5, r4
 8008088:	1963      	adds	r3, r4, r5
 800808a:	42bb      	cmp	r3, r7
 800808c:	db04      	blt.n	8008098 <__s2b+0x78>
 800808e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008092:	340a      	adds	r4, #10
 8008094:	2509      	movs	r5, #9
 8008096:	e7f6      	b.n	8008086 <__s2b+0x66>
 8008098:	f814 3b01 	ldrb.w	r3, [r4], #1
 800809c:	4601      	mov	r1, r0
 800809e:	3b30      	subs	r3, #48	@ 0x30
 80080a0:	220a      	movs	r2, #10
 80080a2:	4630      	mov	r0, r6
 80080a4:	f7ff ff76 	bl	8007f94 <__multadd>
 80080a8:	e7ee      	b.n	8008088 <__s2b+0x68>
 80080aa:	bf00      	nop
 80080ac:	0800b90d 	.word	0x0800b90d
 80080b0:	0800b91e 	.word	0x0800b91e

080080b4 <__hi0bits>:
 80080b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080b8:	4603      	mov	r3, r0
 80080ba:	bf36      	itet	cc
 80080bc:	0403      	lslcc	r3, r0, #16
 80080be:	2000      	movcs	r0, #0
 80080c0:	2010      	movcc	r0, #16
 80080c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080c6:	bf3c      	itt	cc
 80080c8:	021b      	lslcc	r3, r3, #8
 80080ca:	3008      	addcc	r0, #8
 80080cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080d0:	bf3c      	itt	cc
 80080d2:	011b      	lslcc	r3, r3, #4
 80080d4:	3004      	addcc	r0, #4
 80080d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080da:	bf3c      	itt	cc
 80080dc:	009b      	lslcc	r3, r3, #2
 80080de:	3002      	addcc	r0, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	db05      	blt.n	80080f0 <__hi0bits+0x3c>
 80080e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080e8:	f100 0001 	add.w	r0, r0, #1
 80080ec:	bf08      	it	eq
 80080ee:	2020      	moveq	r0, #32
 80080f0:	4770      	bx	lr

080080f2 <__lo0bits>:
 80080f2:	6803      	ldr	r3, [r0, #0]
 80080f4:	4602      	mov	r2, r0
 80080f6:	f013 0007 	ands.w	r0, r3, #7
 80080fa:	d00b      	beq.n	8008114 <__lo0bits+0x22>
 80080fc:	07d9      	lsls	r1, r3, #31
 80080fe:	d421      	bmi.n	8008144 <__lo0bits+0x52>
 8008100:	0798      	lsls	r0, r3, #30
 8008102:	bf49      	itett	mi
 8008104:	085b      	lsrmi	r3, r3, #1
 8008106:	089b      	lsrpl	r3, r3, #2
 8008108:	2001      	movmi	r0, #1
 800810a:	6013      	strmi	r3, [r2, #0]
 800810c:	bf5c      	itt	pl
 800810e:	6013      	strpl	r3, [r2, #0]
 8008110:	2002      	movpl	r0, #2
 8008112:	4770      	bx	lr
 8008114:	b299      	uxth	r1, r3
 8008116:	b909      	cbnz	r1, 800811c <__lo0bits+0x2a>
 8008118:	0c1b      	lsrs	r3, r3, #16
 800811a:	2010      	movs	r0, #16
 800811c:	b2d9      	uxtb	r1, r3
 800811e:	b909      	cbnz	r1, 8008124 <__lo0bits+0x32>
 8008120:	3008      	adds	r0, #8
 8008122:	0a1b      	lsrs	r3, r3, #8
 8008124:	0719      	lsls	r1, r3, #28
 8008126:	bf04      	itt	eq
 8008128:	091b      	lsreq	r3, r3, #4
 800812a:	3004      	addeq	r0, #4
 800812c:	0799      	lsls	r1, r3, #30
 800812e:	bf04      	itt	eq
 8008130:	089b      	lsreq	r3, r3, #2
 8008132:	3002      	addeq	r0, #2
 8008134:	07d9      	lsls	r1, r3, #31
 8008136:	d403      	bmi.n	8008140 <__lo0bits+0x4e>
 8008138:	085b      	lsrs	r3, r3, #1
 800813a:	f100 0001 	add.w	r0, r0, #1
 800813e:	d003      	beq.n	8008148 <__lo0bits+0x56>
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	4770      	bx	lr
 8008144:	2000      	movs	r0, #0
 8008146:	4770      	bx	lr
 8008148:	2020      	movs	r0, #32
 800814a:	4770      	bx	lr

0800814c <__i2b>:
 800814c:	b510      	push	{r4, lr}
 800814e:	460c      	mov	r4, r1
 8008150:	2101      	movs	r1, #1
 8008152:	f7ff febd 	bl	8007ed0 <_Balloc>
 8008156:	4602      	mov	r2, r0
 8008158:	b928      	cbnz	r0, 8008166 <__i2b+0x1a>
 800815a:	4b05      	ldr	r3, [pc, #20]	@ (8008170 <__i2b+0x24>)
 800815c:	4805      	ldr	r0, [pc, #20]	@ (8008174 <__i2b+0x28>)
 800815e:	f240 1145 	movw	r1, #325	@ 0x145
 8008162:	f001 fc41 	bl	80099e8 <__assert_func>
 8008166:	2301      	movs	r3, #1
 8008168:	6144      	str	r4, [r0, #20]
 800816a:	6103      	str	r3, [r0, #16]
 800816c:	bd10      	pop	{r4, pc}
 800816e:	bf00      	nop
 8008170:	0800b90d 	.word	0x0800b90d
 8008174:	0800b91e 	.word	0x0800b91e

08008178 <__multiply>:
 8008178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817c:	4614      	mov	r4, r2
 800817e:	690a      	ldr	r2, [r1, #16]
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	429a      	cmp	r2, r3
 8008184:	bfa8      	it	ge
 8008186:	4623      	movge	r3, r4
 8008188:	460f      	mov	r7, r1
 800818a:	bfa4      	itt	ge
 800818c:	460c      	movge	r4, r1
 800818e:	461f      	movge	r7, r3
 8008190:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008194:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008198:	68a3      	ldr	r3, [r4, #8]
 800819a:	6861      	ldr	r1, [r4, #4]
 800819c:	eb0a 0609 	add.w	r6, sl, r9
 80081a0:	42b3      	cmp	r3, r6
 80081a2:	b085      	sub	sp, #20
 80081a4:	bfb8      	it	lt
 80081a6:	3101      	addlt	r1, #1
 80081a8:	f7ff fe92 	bl	8007ed0 <_Balloc>
 80081ac:	b930      	cbnz	r0, 80081bc <__multiply+0x44>
 80081ae:	4602      	mov	r2, r0
 80081b0:	4b44      	ldr	r3, [pc, #272]	@ (80082c4 <__multiply+0x14c>)
 80081b2:	4845      	ldr	r0, [pc, #276]	@ (80082c8 <__multiply+0x150>)
 80081b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081b8:	f001 fc16 	bl	80099e8 <__assert_func>
 80081bc:	f100 0514 	add.w	r5, r0, #20
 80081c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081c4:	462b      	mov	r3, r5
 80081c6:	2200      	movs	r2, #0
 80081c8:	4543      	cmp	r3, r8
 80081ca:	d321      	bcc.n	8008210 <__multiply+0x98>
 80081cc:	f107 0114 	add.w	r1, r7, #20
 80081d0:	f104 0214 	add.w	r2, r4, #20
 80081d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80081d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081dc:	9302      	str	r3, [sp, #8]
 80081de:	1b13      	subs	r3, r2, r4
 80081e0:	3b15      	subs	r3, #21
 80081e2:	f023 0303 	bic.w	r3, r3, #3
 80081e6:	3304      	adds	r3, #4
 80081e8:	f104 0715 	add.w	r7, r4, #21
 80081ec:	42ba      	cmp	r2, r7
 80081ee:	bf38      	it	cc
 80081f0:	2304      	movcc	r3, #4
 80081f2:	9301      	str	r3, [sp, #4]
 80081f4:	9b02      	ldr	r3, [sp, #8]
 80081f6:	9103      	str	r1, [sp, #12]
 80081f8:	428b      	cmp	r3, r1
 80081fa:	d80c      	bhi.n	8008216 <__multiply+0x9e>
 80081fc:	2e00      	cmp	r6, #0
 80081fe:	dd03      	ble.n	8008208 <__multiply+0x90>
 8008200:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008204:	2b00      	cmp	r3, #0
 8008206:	d05b      	beq.n	80082c0 <__multiply+0x148>
 8008208:	6106      	str	r6, [r0, #16]
 800820a:	b005      	add	sp, #20
 800820c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008210:	f843 2b04 	str.w	r2, [r3], #4
 8008214:	e7d8      	b.n	80081c8 <__multiply+0x50>
 8008216:	f8b1 a000 	ldrh.w	sl, [r1]
 800821a:	f1ba 0f00 	cmp.w	sl, #0
 800821e:	d024      	beq.n	800826a <__multiply+0xf2>
 8008220:	f104 0e14 	add.w	lr, r4, #20
 8008224:	46a9      	mov	r9, r5
 8008226:	f04f 0c00 	mov.w	ip, #0
 800822a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800822e:	f8d9 3000 	ldr.w	r3, [r9]
 8008232:	fa1f fb87 	uxth.w	fp, r7
 8008236:	b29b      	uxth	r3, r3
 8008238:	fb0a 330b 	mla	r3, sl, fp, r3
 800823c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008240:	f8d9 7000 	ldr.w	r7, [r9]
 8008244:	4463      	add	r3, ip
 8008246:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800824a:	fb0a c70b 	mla	r7, sl, fp, ip
 800824e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008252:	b29b      	uxth	r3, r3
 8008254:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008258:	4572      	cmp	r2, lr
 800825a:	f849 3b04 	str.w	r3, [r9], #4
 800825e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008262:	d8e2      	bhi.n	800822a <__multiply+0xb2>
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	f845 c003 	str.w	ip, [r5, r3]
 800826a:	9b03      	ldr	r3, [sp, #12]
 800826c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008270:	3104      	adds	r1, #4
 8008272:	f1b9 0f00 	cmp.w	r9, #0
 8008276:	d021      	beq.n	80082bc <__multiply+0x144>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	f104 0c14 	add.w	ip, r4, #20
 800827e:	46ae      	mov	lr, r5
 8008280:	f04f 0a00 	mov.w	sl, #0
 8008284:	f8bc b000 	ldrh.w	fp, [ip]
 8008288:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800828c:	fb09 770b 	mla	r7, r9, fp, r7
 8008290:	4457      	add	r7, sl
 8008292:	b29b      	uxth	r3, r3
 8008294:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008298:	f84e 3b04 	str.w	r3, [lr], #4
 800829c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082a4:	f8be 3000 	ldrh.w	r3, [lr]
 80082a8:	fb09 330a 	mla	r3, r9, sl, r3
 80082ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80082b0:	4562      	cmp	r2, ip
 80082b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082b6:	d8e5      	bhi.n	8008284 <__multiply+0x10c>
 80082b8:	9f01      	ldr	r7, [sp, #4]
 80082ba:	51eb      	str	r3, [r5, r7]
 80082bc:	3504      	adds	r5, #4
 80082be:	e799      	b.n	80081f4 <__multiply+0x7c>
 80082c0:	3e01      	subs	r6, #1
 80082c2:	e79b      	b.n	80081fc <__multiply+0x84>
 80082c4:	0800b90d 	.word	0x0800b90d
 80082c8:	0800b91e 	.word	0x0800b91e

080082cc <__pow5mult>:
 80082cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d0:	4615      	mov	r5, r2
 80082d2:	f012 0203 	ands.w	r2, r2, #3
 80082d6:	4607      	mov	r7, r0
 80082d8:	460e      	mov	r6, r1
 80082da:	d007      	beq.n	80082ec <__pow5mult+0x20>
 80082dc:	4c25      	ldr	r4, [pc, #148]	@ (8008374 <__pow5mult+0xa8>)
 80082de:	3a01      	subs	r2, #1
 80082e0:	2300      	movs	r3, #0
 80082e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082e6:	f7ff fe55 	bl	8007f94 <__multadd>
 80082ea:	4606      	mov	r6, r0
 80082ec:	10ad      	asrs	r5, r5, #2
 80082ee:	d03d      	beq.n	800836c <__pow5mult+0xa0>
 80082f0:	69fc      	ldr	r4, [r7, #28]
 80082f2:	b97c      	cbnz	r4, 8008314 <__pow5mult+0x48>
 80082f4:	2010      	movs	r0, #16
 80082f6:	f7ff fd35 	bl	8007d64 <malloc>
 80082fa:	4602      	mov	r2, r0
 80082fc:	61f8      	str	r0, [r7, #28]
 80082fe:	b928      	cbnz	r0, 800830c <__pow5mult+0x40>
 8008300:	4b1d      	ldr	r3, [pc, #116]	@ (8008378 <__pow5mult+0xac>)
 8008302:	481e      	ldr	r0, [pc, #120]	@ (800837c <__pow5mult+0xb0>)
 8008304:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008308:	f001 fb6e 	bl	80099e8 <__assert_func>
 800830c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008310:	6004      	str	r4, [r0, #0]
 8008312:	60c4      	str	r4, [r0, #12]
 8008314:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008318:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800831c:	b94c      	cbnz	r4, 8008332 <__pow5mult+0x66>
 800831e:	f240 2171 	movw	r1, #625	@ 0x271
 8008322:	4638      	mov	r0, r7
 8008324:	f7ff ff12 	bl	800814c <__i2b>
 8008328:	2300      	movs	r3, #0
 800832a:	f8c8 0008 	str.w	r0, [r8, #8]
 800832e:	4604      	mov	r4, r0
 8008330:	6003      	str	r3, [r0, #0]
 8008332:	f04f 0900 	mov.w	r9, #0
 8008336:	07eb      	lsls	r3, r5, #31
 8008338:	d50a      	bpl.n	8008350 <__pow5mult+0x84>
 800833a:	4631      	mov	r1, r6
 800833c:	4622      	mov	r2, r4
 800833e:	4638      	mov	r0, r7
 8008340:	f7ff ff1a 	bl	8008178 <__multiply>
 8008344:	4631      	mov	r1, r6
 8008346:	4680      	mov	r8, r0
 8008348:	4638      	mov	r0, r7
 800834a:	f7ff fe01 	bl	8007f50 <_Bfree>
 800834e:	4646      	mov	r6, r8
 8008350:	106d      	asrs	r5, r5, #1
 8008352:	d00b      	beq.n	800836c <__pow5mult+0xa0>
 8008354:	6820      	ldr	r0, [r4, #0]
 8008356:	b938      	cbnz	r0, 8008368 <__pow5mult+0x9c>
 8008358:	4622      	mov	r2, r4
 800835a:	4621      	mov	r1, r4
 800835c:	4638      	mov	r0, r7
 800835e:	f7ff ff0b 	bl	8008178 <__multiply>
 8008362:	6020      	str	r0, [r4, #0]
 8008364:	f8c0 9000 	str.w	r9, [r0]
 8008368:	4604      	mov	r4, r0
 800836a:	e7e4      	b.n	8008336 <__pow5mult+0x6a>
 800836c:	4630      	mov	r0, r6
 800836e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008372:	bf00      	nop
 8008374:	0800b978 	.word	0x0800b978
 8008378:	0800b89e 	.word	0x0800b89e
 800837c:	0800b91e 	.word	0x0800b91e

08008380 <__lshift>:
 8008380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	460c      	mov	r4, r1
 8008386:	6849      	ldr	r1, [r1, #4]
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800838e:	68a3      	ldr	r3, [r4, #8]
 8008390:	4607      	mov	r7, r0
 8008392:	4691      	mov	r9, r2
 8008394:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008398:	f108 0601 	add.w	r6, r8, #1
 800839c:	42b3      	cmp	r3, r6
 800839e:	db0b      	blt.n	80083b8 <__lshift+0x38>
 80083a0:	4638      	mov	r0, r7
 80083a2:	f7ff fd95 	bl	8007ed0 <_Balloc>
 80083a6:	4605      	mov	r5, r0
 80083a8:	b948      	cbnz	r0, 80083be <__lshift+0x3e>
 80083aa:	4602      	mov	r2, r0
 80083ac:	4b28      	ldr	r3, [pc, #160]	@ (8008450 <__lshift+0xd0>)
 80083ae:	4829      	ldr	r0, [pc, #164]	@ (8008454 <__lshift+0xd4>)
 80083b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083b4:	f001 fb18 	bl	80099e8 <__assert_func>
 80083b8:	3101      	adds	r1, #1
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	e7ee      	b.n	800839c <__lshift+0x1c>
 80083be:	2300      	movs	r3, #0
 80083c0:	f100 0114 	add.w	r1, r0, #20
 80083c4:	f100 0210 	add.w	r2, r0, #16
 80083c8:	4618      	mov	r0, r3
 80083ca:	4553      	cmp	r3, sl
 80083cc:	db33      	blt.n	8008436 <__lshift+0xb6>
 80083ce:	6920      	ldr	r0, [r4, #16]
 80083d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083d4:	f104 0314 	add.w	r3, r4, #20
 80083d8:	f019 091f 	ands.w	r9, r9, #31
 80083dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083e4:	d02b      	beq.n	800843e <__lshift+0xbe>
 80083e6:	f1c9 0e20 	rsb	lr, r9, #32
 80083ea:	468a      	mov	sl, r1
 80083ec:	2200      	movs	r2, #0
 80083ee:	6818      	ldr	r0, [r3, #0]
 80083f0:	fa00 f009 	lsl.w	r0, r0, r9
 80083f4:	4310      	orrs	r0, r2
 80083f6:	f84a 0b04 	str.w	r0, [sl], #4
 80083fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80083fe:	459c      	cmp	ip, r3
 8008400:	fa22 f20e 	lsr.w	r2, r2, lr
 8008404:	d8f3      	bhi.n	80083ee <__lshift+0x6e>
 8008406:	ebac 0304 	sub.w	r3, ip, r4
 800840a:	3b15      	subs	r3, #21
 800840c:	f023 0303 	bic.w	r3, r3, #3
 8008410:	3304      	adds	r3, #4
 8008412:	f104 0015 	add.w	r0, r4, #21
 8008416:	4584      	cmp	ip, r0
 8008418:	bf38      	it	cc
 800841a:	2304      	movcc	r3, #4
 800841c:	50ca      	str	r2, [r1, r3]
 800841e:	b10a      	cbz	r2, 8008424 <__lshift+0xa4>
 8008420:	f108 0602 	add.w	r6, r8, #2
 8008424:	3e01      	subs	r6, #1
 8008426:	4638      	mov	r0, r7
 8008428:	612e      	str	r6, [r5, #16]
 800842a:	4621      	mov	r1, r4
 800842c:	f7ff fd90 	bl	8007f50 <_Bfree>
 8008430:	4628      	mov	r0, r5
 8008432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008436:	f842 0f04 	str.w	r0, [r2, #4]!
 800843a:	3301      	adds	r3, #1
 800843c:	e7c5      	b.n	80083ca <__lshift+0x4a>
 800843e:	3904      	subs	r1, #4
 8008440:	f853 2b04 	ldr.w	r2, [r3], #4
 8008444:	f841 2f04 	str.w	r2, [r1, #4]!
 8008448:	459c      	cmp	ip, r3
 800844a:	d8f9      	bhi.n	8008440 <__lshift+0xc0>
 800844c:	e7ea      	b.n	8008424 <__lshift+0xa4>
 800844e:	bf00      	nop
 8008450:	0800b90d 	.word	0x0800b90d
 8008454:	0800b91e 	.word	0x0800b91e

08008458 <__mcmp>:
 8008458:	690a      	ldr	r2, [r1, #16]
 800845a:	4603      	mov	r3, r0
 800845c:	6900      	ldr	r0, [r0, #16]
 800845e:	1a80      	subs	r0, r0, r2
 8008460:	b530      	push	{r4, r5, lr}
 8008462:	d10e      	bne.n	8008482 <__mcmp+0x2a>
 8008464:	3314      	adds	r3, #20
 8008466:	3114      	adds	r1, #20
 8008468:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800846c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008470:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008474:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008478:	4295      	cmp	r5, r2
 800847a:	d003      	beq.n	8008484 <__mcmp+0x2c>
 800847c:	d205      	bcs.n	800848a <__mcmp+0x32>
 800847e:	f04f 30ff 	mov.w	r0, #4294967295
 8008482:	bd30      	pop	{r4, r5, pc}
 8008484:	42a3      	cmp	r3, r4
 8008486:	d3f3      	bcc.n	8008470 <__mcmp+0x18>
 8008488:	e7fb      	b.n	8008482 <__mcmp+0x2a>
 800848a:	2001      	movs	r0, #1
 800848c:	e7f9      	b.n	8008482 <__mcmp+0x2a>
	...

08008490 <__mdiff>:
 8008490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008494:	4689      	mov	r9, r1
 8008496:	4606      	mov	r6, r0
 8008498:	4611      	mov	r1, r2
 800849a:	4648      	mov	r0, r9
 800849c:	4614      	mov	r4, r2
 800849e:	f7ff ffdb 	bl	8008458 <__mcmp>
 80084a2:	1e05      	subs	r5, r0, #0
 80084a4:	d112      	bne.n	80084cc <__mdiff+0x3c>
 80084a6:	4629      	mov	r1, r5
 80084a8:	4630      	mov	r0, r6
 80084aa:	f7ff fd11 	bl	8007ed0 <_Balloc>
 80084ae:	4602      	mov	r2, r0
 80084b0:	b928      	cbnz	r0, 80084be <__mdiff+0x2e>
 80084b2:	4b3f      	ldr	r3, [pc, #252]	@ (80085b0 <__mdiff+0x120>)
 80084b4:	f240 2137 	movw	r1, #567	@ 0x237
 80084b8:	483e      	ldr	r0, [pc, #248]	@ (80085b4 <__mdiff+0x124>)
 80084ba:	f001 fa95 	bl	80099e8 <__assert_func>
 80084be:	2301      	movs	r3, #1
 80084c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084c4:	4610      	mov	r0, r2
 80084c6:	b003      	add	sp, #12
 80084c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084cc:	bfbc      	itt	lt
 80084ce:	464b      	movlt	r3, r9
 80084d0:	46a1      	movlt	r9, r4
 80084d2:	4630      	mov	r0, r6
 80084d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084d8:	bfba      	itte	lt
 80084da:	461c      	movlt	r4, r3
 80084dc:	2501      	movlt	r5, #1
 80084de:	2500      	movge	r5, #0
 80084e0:	f7ff fcf6 	bl	8007ed0 <_Balloc>
 80084e4:	4602      	mov	r2, r0
 80084e6:	b918      	cbnz	r0, 80084f0 <__mdiff+0x60>
 80084e8:	4b31      	ldr	r3, [pc, #196]	@ (80085b0 <__mdiff+0x120>)
 80084ea:	f240 2145 	movw	r1, #581	@ 0x245
 80084ee:	e7e3      	b.n	80084b8 <__mdiff+0x28>
 80084f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084f4:	6926      	ldr	r6, [r4, #16]
 80084f6:	60c5      	str	r5, [r0, #12]
 80084f8:	f109 0310 	add.w	r3, r9, #16
 80084fc:	f109 0514 	add.w	r5, r9, #20
 8008500:	f104 0e14 	add.w	lr, r4, #20
 8008504:	f100 0b14 	add.w	fp, r0, #20
 8008508:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800850c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	46d9      	mov	r9, fp
 8008514:	f04f 0c00 	mov.w	ip, #0
 8008518:	9b01      	ldr	r3, [sp, #4]
 800851a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800851e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008522:	9301      	str	r3, [sp, #4]
 8008524:	fa1f f38a 	uxth.w	r3, sl
 8008528:	4619      	mov	r1, r3
 800852a:	b283      	uxth	r3, r0
 800852c:	1acb      	subs	r3, r1, r3
 800852e:	0c00      	lsrs	r0, r0, #16
 8008530:	4463      	add	r3, ip
 8008532:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008536:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800853a:	b29b      	uxth	r3, r3
 800853c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008540:	4576      	cmp	r6, lr
 8008542:	f849 3b04 	str.w	r3, [r9], #4
 8008546:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800854a:	d8e5      	bhi.n	8008518 <__mdiff+0x88>
 800854c:	1b33      	subs	r3, r6, r4
 800854e:	3b15      	subs	r3, #21
 8008550:	f023 0303 	bic.w	r3, r3, #3
 8008554:	3415      	adds	r4, #21
 8008556:	3304      	adds	r3, #4
 8008558:	42a6      	cmp	r6, r4
 800855a:	bf38      	it	cc
 800855c:	2304      	movcc	r3, #4
 800855e:	441d      	add	r5, r3
 8008560:	445b      	add	r3, fp
 8008562:	461e      	mov	r6, r3
 8008564:	462c      	mov	r4, r5
 8008566:	4544      	cmp	r4, r8
 8008568:	d30e      	bcc.n	8008588 <__mdiff+0xf8>
 800856a:	f108 0103 	add.w	r1, r8, #3
 800856e:	1b49      	subs	r1, r1, r5
 8008570:	f021 0103 	bic.w	r1, r1, #3
 8008574:	3d03      	subs	r5, #3
 8008576:	45a8      	cmp	r8, r5
 8008578:	bf38      	it	cc
 800857a:	2100      	movcc	r1, #0
 800857c:	440b      	add	r3, r1
 800857e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008582:	b191      	cbz	r1, 80085aa <__mdiff+0x11a>
 8008584:	6117      	str	r7, [r2, #16]
 8008586:	e79d      	b.n	80084c4 <__mdiff+0x34>
 8008588:	f854 1b04 	ldr.w	r1, [r4], #4
 800858c:	46e6      	mov	lr, ip
 800858e:	0c08      	lsrs	r0, r1, #16
 8008590:	fa1c fc81 	uxtah	ip, ip, r1
 8008594:	4471      	add	r1, lr
 8008596:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800859a:	b289      	uxth	r1, r1
 800859c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085a0:	f846 1b04 	str.w	r1, [r6], #4
 80085a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085a8:	e7dd      	b.n	8008566 <__mdiff+0xd6>
 80085aa:	3f01      	subs	r7, #1
 80085ac:	e7e7      	b.n	800857e <__mdiff+0xee>
 80085ae:	bf00      	nop
 80085b0:	0800b90d 	.word	0x0800b90d
 80085b4:	0800b91e 	.word	0x0800b91e

080085b8 <__ulp>:
 80085b8:	b082      	sub	sp, #8
 80085ba:	ed8d 0b00 	vstr	d0, [sp]
 80085be:	9a01      	ldr	r2, [sp, #4]
 80085c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008600 <__ulp+0x48>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dc08      	bgt.n	80085de <__ulp+0x26>
 80085cc:	425b      	negs	r3, r3
 80085ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80085d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80085d6:	da04      	bge.n	80085e2 <__ulp+0x2a>
 80085d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80085dc:	4113      	asrs	r3, r2
 80085de:	2200      	movs	r2, #0
 80085e0:	e008      	b.n	80085f4 <__ulp+0x3c>
 80085e2:	f1a2 0314 	sub.w	r3, r2, #20
 80085e6:	2b1e      	cmp	r3, #30
 80085e8:	bfda      	itte	le
 80085ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80085ee:	40da      	lsrle	r2, r3
 80085f0:	2201      	movgt	r2, #1
 80085f2:	2300      	movs	r3, #0
 80085f4:	4619      	mov	r1, r3
 80085f6:	4610      	mov	r0, r2
 80085f8:	ec41 0b10 	vmov	d0, r0, r1
 80085fc:	b002      	add	sp, #8
 80085fe:	4770      	bx	lr
 8008600:	7ff00000 	.word	0x7ff00000

08008604 <__b2d>:
 8008604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008608:	6906      	ldr	r6, [r0, #16]
 800860a:	f100 0814 	add.w	r8, r0, #20
 800860e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008612:	1f37      	subs	r7, r6, #4
 8008614:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008618:	4610      	mov	r0, r2
 800861a:	f7ff fd4b 	bl	80080b4 <__hi0bits>
 800861e:	f1c0 0320 	rsb	r3, r0, #32
 8008622:	280a      	cmp	r0, #10
 8008624:	600b      	str	r3, [r1, #0]
 8008626:	491b      	ldr	r1, [pc, #108]	@ (8008694 <__b2d+0x90>)
 8008628:	dc15      	bgt.n	8008656 <__b2d+0x52>
 800862a:	f1c0 0c0b 	rsb	ip, r0, #11
 800862e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008632:	45b8      	cmp	r8, r7
 8008634:	ea43 0501 	orr.w	r5, r3, r1
 8008638:	bf34      	ite	cc
 800863a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800863e:	2300      	movcs	r3, #0
 8008640:	3015      	adds	r0, #21
 8008642:	fa02 f000 	lsl.w	r0, r2, r0
 8008646:	fa23 f30c 	lsr.w	r3, r3, ip
 800864a:	4303      	orrs	r3, r0
 800864c:	461c      	mov	r4, r3
 800864e:	ec45 4b10 	vmov	d0, r4, r5
 8008652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008656:	45b8      	cmp	r8, r7
 8008658:	bf3a      	itte	cc
 800865a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800865e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008662:	2300      	movcs	r3, #0
 8008664:	380b      	subs	r0, #11
 8008666:	d012      	beq.n	800868e <__b2d+0x8a>
 8008668:	f1c0 0120 	rsb	r1, r0, #32
 800866c:	fa23 f401 	lsr.w	r4, r3, r1
 8008670:	4082      	lsls	r2, r0
 8008672:	4322      	orrs	r2, r4
 8008674:	4547      	cmp	r7, r8
 8008676:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800867a:	bf8c      	ite	hi
 800867c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008680:	2200      	movls	r2, #0
 8008682:	4083      	lsls	r3, r0
 8008684:	40ca      	lsrs	r2, r1
 8008686:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800868a:	4313      	orrs	r3, r2
 800868c:	e7de      	b.n	800864c <__b2d+0x48>
 800868e:	ea42 0501 	orr.w	r5, r2, r1
 8008692:	e7db      	b.n	800864c <__b2d+0x48>
 8008694:	3ff00000 	.word	0x3ff00000

08008698 <__d2b>:
 8008698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800869c:	460f      	mov	r7, r1
 800869e:	2101      	movs	r1, #1
 80086a0:	ec59 8b10 	vmov	r8, r9, d0
 80086a4:	4616      	mov	r6, r2
 80086a6:	f7ff fc13 	bl	8007ed0 <_Balloc>
 80086aa:	4604      	mov	r4, r0
 80086ac:	b930      	cbnz	r0, 80086bc <__d2b+0x24>
 80086ae:	4602      	mov	r2, r0
 80086b0:	4b23      	ldr	r3, [pc, #140]	@ (8008740 <__d2b+0xa8>)
 80086b2:	4824      	ldr	r0, [pc, #144]	@ (8008744 <__d2b+0xac>)
 80086b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80086b8:	f001 f996 	bl	80099e8 <__assert_func>
 80086bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086c4:	b10d      	cbz	r5, 80086ca <__d2b+0x32>
 80086c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	f1b8 0300 	subs.w	r3, r8, #0
 80086d0:	d023      	beq.n	800871a <__d2b+0x82>
 80086d2:	4668      	mov	r0, sp
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	f7ff fd0c 	bl	80080f2 <__lo0bits>
 80086da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086de:	b1d0      	cbz	r0, 8008716 <__d2b+0x7e>
 80086e0:	f1c0 0320 	rsb	r3, r0, #32
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	430b      	orrs	r3, r1
 80086ea:	40c2      	lsrs	r2, r0
 80086ec:	6163      	str	r3, [r4, #20]
 80086ee:	9201      	str	r2, [sp, #4]
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	61a3      	str	r3, [r4, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bf0c      	ite	eq
 80086f8:	2201      	moveq	r2, #1
 80086fa:	2202      	movne	r2, #2
 80086fc:	6122      	str	r2, [r4, #16]
 80086fe:	b1a5      	cbz	r5, 800872a <__d2b+0x92>
 8008700:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008704:	4405      	add	r5, r0
 8008706:	603d      	str	r5, [r7, #0]
 8008708:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800870c:	6030      	str	r0, [r6, #0]
 800870e:	4620      	mov	r0, r4
 8008710:	b003      	add	sp, #12
 8008712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008716:	6161      	str	r1, [r4, #20]
 8008718:	e7ea      	b.n	80086f0 <__d2b+0x58>
 800871a:	a801      	add	r0, sp, #4
 800871c:	f7ff fce9 	bl	80080f2 <__lo0bits>
 8008720:	9b01      	ldr	r3, [sp, #4]
 8008722:	6163      	str	r3, [r4, #20]
 8008724:	3020      	adds	r0, #32
 8008726:	2201      	movs	r2, #1
 8008728:	e7e8      	b.n	80086fc <__d2b+0x64>
 800872a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800872e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008732:	6038      	str	r0, [r7, #0]
 8008734:	6918      	ldr	r0, [r3, #16]
 8008736:	f7ff fcbd 	bl	80080b4 <__hi0bits>
 800873a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800873e:	e7e5      	b.n	800870c <__d2b+0x74>
 8008740:	0800b90d 	.word	0x0800b90d
 8008744:	0800b91e 	.word	0x0800b91e

08008748 <__ratio>:
 8008748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874c:	b085      	sub	sp, #20
 800874e:	e9cd 1000 	strd	r1, r0, [sp]
 8008752:	a902      	add	r1, sp, #8
 8008754:	f7ff ff56 	bl	8008604 <__b2d>
 8008758:	9800      	ldr	r0, [sp, #0]
 800875a:	a903      	add	r1, sp, #12
 800875c:	ec55 4b10 	vmov	r4, r5, d0
 8008760:	f7ff ff50 	bl	8008604 <__b2d>
 8008764:	9b01      	ldr	r3, [sp, #4]
 8008766:	6919      	ldr	r1, [r3, #16]
 8008768:	9b00      	ldr	r3, [sp, #0]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	1ac9      	subs	r1, r1, r3
 800876e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008772:	1a9b      	subs	r3, r3, r2
 8008774:	ec5b ab10 	vmov	sl, fp, d0
 8008778:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800877c:	2b00      	cmp	r3, #0
 800877e:	bfce      	itee	gt
 8008780:	462a      	movgt	r2, r5
 8008782:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008786:	465a      	movle	r2, fp
 8008788:	462f      	mov	r7, r5
 800878a:	46d9      	mov	r9, fp
 800878c:	bfcc      	ite	gt
 800878e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008792:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008796:	464b      	mov	r3, r9
 8008798:	4652      	mov	r2, sl
 800879a:	4620      	mov	r0, r4
 800879c:	4639      	mov	r1, r7
 800879e:	f7f8 f855 	bl	800084c <__aeabi_ddiv>
 80087a2:	ec41 0b10 	vmov	d0, r0, r1
 80087a6:	b005      	add	sp, #20
 80087a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087ac <__copybits>:
 80087ac:	3901      	subs	r1, #1
 80087ae:	b570      	push	{r4, r5, r6, lr}
 80087b0:	1149      	asrs	r1, r1, #5
 80087b2:	6914      	ldr	r4, [r2, #16]
 80087b4:	3101      	adds	r1, #1
 80087b6:	f102 0314 	add.w	r3, r2, #20
 80087ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087c2:	1f05      	subs	r5, r0, #4
 80087c4:	42a3      	cmp	r3, r4
 80087c6:	d30c      	bcc.n	80087e2 <__copybits+0x36>
 80087c8:	1aa3      	subs	r3, r4, r2
 80087ca:	3b11      	subs	r3, #17
 80087cc:	f023 0303 	bic.w	r3, r3, #3
 80087d0:	3211      	adds	r2, #17
 80087d2:	42a2      	cmp	r2, r4
 80087d4:	bf88      	it	hi
 80087d6:	2300      	movhi	r3, #0
 80087d8:	4418      	add	r0, r3
 80087da:	2300      	movs	r3, #0
 80087dc:	4288      	cmp	r0, r1
 80087de:	d305      	bcc.n	80087ec <__copybits+0x40>
 80087e0:	bd70      	pop	{r4, r5, r6, pc}
 80087e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80087e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80087ea:	e7eb      	b.n	80087c4 <__copybits+0x18>
 80087ec:	f840 3b04 	str.w	r3, [r0], #4
 80087f0:	e7f4      	b.n	80087dc <__copybits+0x30>

080087f2 <__any_on>:
 80087f2:	f100 0214 	add.w	r2, r0, #20
 80087f6:	6900      	ldr	r0, [r0, #16]
 80087f8:	114b      	asrs	r3, r1, #5
 80087fa:	4298      	cmp	r0, r3
 80087fc:	b510      	push	{r4, lr}
 80087fe:	db11      	blt.n	8008824 <__any_on+0x32>
 8008800:	dd0a      	ble.n	8008818 <__any_on+0x26>
 8008802:	f011 011f 	ands.w	r1, r1, #31
 8008806:	d007      	beq.n	8008818 <__any_on+0x26>
 8008808:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800880c:	fa24 f001 	lsr.w	r0, r4, r1
 8008810:	fa00 f101 	lsl.w	r1, r0, r1
 8008814:	428c      	cmp	r4, r1
 8008816:	d10b      	bne.n	8008830 <__any_on+0x3e>
 8008818:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800881c:	4293      	cmp	r3, r2
 800881e:	d803      	bhi.n	8008828 <__any_on+0x36>
 8008820:	2000      	movs	r0, #0
 8008822:	bd10      	pop	{r4, pc}
 8008824:	4603      	mov	r3, r0
 8008826:	e7f7      	b.n	8008818 <__any_on+0x26>
 8008828:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800882c:	2900      	cmp	r1, #0
 800882e:	d0f5      	beq.n	800881c <__any_on+0x2a>
 8008830:	2001      	movs	r0, #1
 8008832:	e7f6      	b.n	8008822 <__any_on+0x30>

08008834 <sulp>:
 8008834:	b570      	push	{r4, r5, r6, lr}
 8008836:	4604      	mov	r4, r0
 8008838:	460d      	mov	r5, r1
 800883a:	ec45 4b10 	vmov	d0, r4, r5
 800883e:	4616      	mov	r6, r2
 8008840:	f7ff feba 	bl	80085b8 <__ulp>
 8008844:	ec51 0b10 	vmov	r0, r1, d0
 8008848:	b17e      	cbz	r6, 800886a <sulp+0x36>
 800884a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800884e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008852:	2b00      	cmp	r3, #0
 8008854:	dd09      	ble.n	800886a <sulp+0x36>
 8008856:	051b      	lsls	r3, r3, #20
 8008858:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800885c:	2400      	movs	r4, #0
 800885e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008862:	4622      	mov	r2, r4
 8008864:	462b      	mov	r3, r5
 8008866:	f7f7 fec7 	bl	80005f8 <__aeabi_dmul>
 800886a:	ec41 0b10 	vmov	d0, r0, r1
 800886e:	bd70      	pop	{r4, r5, r6, pc}

08008870 <_strtod_l>:
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	b09f      	sub	sp, #124	@ 0x7c
 8008876:	460c      	mov	r4, r1
 8008878:	9217      	str	r2, [sp, #92]	@ 0x5c
 800887a:	2200      	movs	r2, #0
 800887c:	921a      	str	r2, [sp, #104]	@ 0x68
 800887e:	9005      	str	r0, [sp, #20]
 8008880:	f04f 0a00 	mov.w	sl, #0
 8008884:	f04f 0b00 	mov.w	fp, #0
 8008888:	460a      	mov	r2, r1
 800888a:	9219      	str	r2, [sp, #100]	@ 0x64
 800888c:	7811      	ldrb	r1, [r2, #0]
 800888e:	292b      	cmp	r1, #43	@ 0x2b
 8008890:	d04a      	beq.n	8008928 <_strtod_l+0xb8>
 8008892:	d838      	bhi.n	8008906 <_strtod_l+0x96>
 8008894:	290d      	cmp	r1, #13
 8008896:	d832      	bhi.n	80088fe <_strtod_l+0x8e>
 8008898:	2908      	cmp	r1, #8
 800889a:	d832      	bhi.n	8008902 <_strtod_l+0x92>
 800889c:	2900      	cmp	r1, #0
 800889e:	d03b      	beq.n	8008918 <_strtod_l+0xa8>
 80088a0:	2200      	movs	r2, #0
 80088a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80088a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80088a6:	782a      	ldrb	r2, [r5, #0]
 80088a8:	2a30      	cmp	r2, #48	@ 0x30
 80088aa:	f040 80b3 	bne.w	8008a14 <_strtod_l+0x1a4>
 80088ae:	786a      	ldrb	r2, [r5, #1]
 80088b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80088b4:	2a58      	cmp	r2, #88	@ 0x58
 80088b6:	d16e      	bne.n	8008996 <_strtod_l+0x126>
 80088b8:	9302      	str	r3, [sp, #8]
 80088ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	ab1a      	add	r3, sp, #104	@ 0x68
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	4a8e      	ldr	r2, [pc, #568]	@ (8008afc <_strtod_l+0x28c>)
 80088c4:	9805      	ldr	r0, [sp, #20]
 80088c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80088c8:	a919      	add	r1, sp, #100	@ 0x64
 80088ca:	f001 f927 	bl	8009b1c <__gethex>
 80088ce:	f010 060f 	ands.w	r6, r0, #15
 80088d2:	4604      	mov	r4, r0
 80088d4:	d005      	beq.n	80088e2 <_strtod_l+0x72>
 80088d6:	2e06      	cmp	r6, #6
 80088d8:	d128      	bne.n	800892c <_strtod_l+0xbc>
 80088da:	3501      	adds	r5, #1
 80088dc:	2300      	movs	r3, #0
 80088de:	9519      	str	r5, [sp, #100]	@ 0x64
 80088e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f040 858e 	bne.w	8009406 <_strtod_l+0xb96>
 80088ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088ec:	b1cb      	cbz	r3, 8008922 <_strtod_l+0xb2>
 80088ee:	4652      	mov	r2, sl
 80088f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80088f4:	ec43 2b10 	vmov	d0, r2, r3
 80088f8:	b01f      	add	sp, #124	@ 0x7c
 80088fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088fe:	2920      	cmp	r1, #32
 8008900:	d1ce      	bne.n	80088a0 <_strtod_l+0x30>
 8008902:	3201      	adds	r2, #1
 8008904:	e7c1      	b.n	800888a <_strtod_l+0x1a>
 8008906:	292d      	cmp	r1, #45	@ 0x2d
 8008908:	d1ca      	bne.n	80088a0 <_strtod_l+0x30>
 800890a:	2101      	movs	r1, #1
 800890c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800890e:	1c51      	adds	r1, r2, #1
 8008910:	9119      	str	r1, [sp, #100]	@ 0x64
 8008912:	7852      	ldrb	r2, [r2, #1]
 8008914:	2a00      	cmp	r2, #0
 8008916:	d1c5      	bne.n	80088a4 <_strtod_l+0x34>
 8008918:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800891a:	9419      	str	r4, [sp, #100]	@ 0x64
 800891c:	2b00      	cmp	r3, #0
 800891e:	f040 8570 	bne.w	8009402 <_strtod_l+0xb92>
 8008922:	4652      	mov	r2, sl
 8008924:	465b      	mov	r3, fp
 8008926:	e7e5      	b.n	80088f4 <_strtod_l+0x84>
 8008928:	2100      	movs	r1, #0
 800892a:	e7ef      	b.n	800890c <_strtod_l+0x9c>
 800892c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800892e:	b13a      	cbz	r2, 8008940 <_strtod_l+0xd0>
 8008930:	2135      	movs	r1, #53	@ 0x35
 8008932:	a81c      	add	r0, sp, #112	@ 0x70
 8008934:	f7ff ff3a 	bl	80087ac <__copybits>
 8008938:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800893a:	9805      	ldr	r0, [sp, #20]
 800893c:	f7ff fb08 	bl	8007f50 <_Bfree>
 8008940:	3e01      	subs	r6, #1
 8008942:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008944:	2e04      	cmp	r6, #4
 8008946:	d806      	bhi.n	8008956 <_strtod_l+0xe6>
 8008948:	e8df f006 	tbb	[pc, r6]
 800894c:	201d0314 	.word	0x201d0314
 8008950:	14          	.byte	0x14
 8008951:	00          	.byte	0x00
 8008952:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008956:	05e1      	lsls	r1, r4, #23
 8008958:	bf48      	it	mi
 800895a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800895e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008962:	0d1b      	lsrs	r3, r3, #20
 8008964:	051b      	lsls	r3, r3, #20
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1bb      	bne.n	80088e2 <_strtod_l+0x72>
 800896a:	f7fe fb2f 	bl	8006fcc <__errno>
 800896e:	2322      	movs	r3, #34	@ 0x22
 8008970:	6003      	str	r3, [r0, #0]
 8008972:	e7b6      	b.n	80088e2 <_strtod_l+0x72>
 8008974:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008978:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800897c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008980:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008984:	e7e7      	b.n	8008956 <_strtod_l+0xe6>
 8008986:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008b04 <_strtod_l+0x294>
 800898a:	e7e4      	b.n	8008956 <_strtod_l+0xe6>
 800898c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008990:	f04f 3aff 	mov.w	sl, #4294967295
 8008994:	e7df      	b.n	8008956 <_strtod_l+0xe6>
 8008996:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008998:	1c5a      	adds	r2, r3, #1
 800899a:	9219      	str	r2, [sp, #100]	@ 0x64
 800899c:	785b      	ldrb	r3, [r3, #1]
 800899e:	2b30      	cmp	r3, #48	@ 0x30
 80089a0:	d0f9      	beq.n	8008996 <_strtod_l+0x126>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d09d      	beq.n	80088e2 <_strtod_l+0x72>
 80089a6:	2301      	movs	r3, #1
 80089a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80089aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80089ae:	2300      	movs	r3, #0
 80089b0:	9308      	str	r3, [sp, #32]
 80089b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80089b4:	461f      	mov	r7, r3
 80089b6:	220a      	movs	r2, #10
 80089b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80089ba:	7805      	ldrb	r5, [r0, #0]
 80089bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80089c0:	b2d9      	uxtb	r1, r3
 80089c2:	2909      	cmp	r1, #9
 80089c4:	d928      	bls.n	8008a18 <_strtod_l+0x1a8>
 80089c6:	494e      	ldr	r1, [pc, #312]	@ (8008b00 <_strtod_l+0x290>)
 80089c8:	2201      	movs	r2, #1
 80089ca:	f000 ffd5 	bl	8009978 <strncmp>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d032      	beq.n	8008a38 <_strtod_l+0x1c8>
 80089d2:	2000      	movs	r0, #0
 80089d4:	462a      	mov	r2, r5
 80089d6:	4681      	mov	r9, r0
 80089d8:	463d      	mov	r5, r7
 80089da:	4603      	mov	r3, r0
 80089dc:	2a65      	cmp	r2, #101	@ 0x65
 80089de:	d001      	beq.n	80089e4 <_strtod_l+0x174>
 80089e0:	2a45      	cmp	r2, #69	@ 0x45
 80089e2:	d114      	bne.n	8008a0e <_strtod_l+0x19e>
 80089e4:	b91d      	cbnz	r5, 80089ee <_strtod_l+0x17e>
 80089e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089e8:	4302      	orrs	r2, r0
 80089ea:	d095      	beq.n	8008918 <_strtod_l+0xa8>
 80089ec:	2500      	movs	r5, #0
 80089ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80089f0:	1c62      	adds	r2, r4, #1
 80089f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80089f4:	7862      	ldrb	r2, [r4, #1]
 80089f6:	2a2b      	cmp	r2, #43	@ 0x2b
 80089f8:	d077      	beq.n	8008aea <_strtod_l+0x27a>
 80089fa:	2a2d      	cmp	r2, #45	@ 0x2d
 80089fc:	d07b      	beq.n	8008af6 <_strtod_l+0x286>
 80089fe:	f04f 0c00 	mov.w	ip, #0
 8008a02:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008a06:	2909      	cmp	r1, #9
 8008a08:	f240 8082 	bls.w	8008b10 <_strtod_l+0x2a0>
 8008a0c:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a0e:	f04f 0800 	mov.w	r8, #0
 8008a12:	e0a2      	b.n	8008b5a <_strtod_l+0x2ea>
 8008a14:	2300      	movs	r3, #0
 8008a16:	e7c7      	b.n	80089a8 <_strtod_l+0x138>
 8008a18:	2f08      	cmp	r7, #8
 8008a1a:	bfd5      	itete	le
 8008a1c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008a1e:	9908      	ldrgt	r1, [sp, #32]
 8008a20:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a24:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008a28:	f100 0001 	add.w	r0, r0, #1
 8008a2c:	bfd4      	ite	le
 8008a2e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008a30:	9308      	strgt	r3, [sp, #32]
 8008a32:	3701      	adds	r7, #1
 8008a34:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a36:	e7bf      	b.n	80089b8 <_strtod_l+0x148>
 8008a38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a3e:	785a      	ldrb	r2, [r3, #1]
 8008a40:	b37f      	cbz	r7, 8008aa2 <_strtod_l+0x232>
 8008a42:	4681      	mov	r9, r0
 8008a44:	463d      	mov	r5, r7
 8008a46:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008a4a:	2b09      	cmp	r3, #9
 8008a4c:	d912      	bls.n	8008a74 <_strtod_l+0x204>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e7c4      	b.n	80089dc <_strtod_l+0x16c>
 8008a52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a58:	785a      	ldrb	r2, [r3, #1]
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	2a30      	cmp	r2, #48	@ 0x30
 8008a5e:	d0f8      	beq.n	8008a52 <_strtod_l+0x1e2>
 8008a60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	f200 84d3 	bhi.w	8009410 <_strtod_l+0xba0>
 8008a6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a6e:	4681      	mov	r9, r0
 8008a70:	2000      	movs	r0, #0
 8008a72:	4605      	mov	r5, r0
 8008a74:	3a30      	subs	r2, #48	@ 0x30
 8008a76:	f100 0301 	add.w	r3, r0, #1
 8008a7a:	d02a      	beq.n	8008ad2 <_strtod_l+0x262>
 8008a7c:	4499      	add	r9, r3
 8008a7e:	eb00 0c05 	add.w	ip, r0, r5
 8008a82:	462b      	mov	r3, r5
 8008a84:	210a      	movs	r1, #10
 8008a86:	4563      	cmp	r3, ip
 8008a88:	d10d      	bne.n	8008aa6 <_strtod_l+0x236>
 8008a8a:	1c69      	adds	r1, r5, #1
 8008a8c:	4401      	add	r1, r0
 8008a8e:	4428      	add	r0, r5
 8008a90:	2808      	cmp	r0, #8
 8008a92:	dc16      	bgt.n	8008ac2 <_strtod_l+0x252>
 8008a94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a96:	230a      	movs	r3, #10
 8008a98:	fb03 2300 	mla	r3, r3, r0, r2
 8008a9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	e018      	b.n	8008ad4 <_strtod_l+0x264>
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	e7da      	b.n	8008a5c <_strtod_l+0x1ec>
 8008aa6:	2b08      	cmp	r3, #8
 8008aa8:	f103 0301 	add.w	r3, r3, #1
 8008aac:	dc03      	bgt.n	8008ab6 <_strtod_l+0x246>
 8008aae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008ab0:	434e      	muls	r6, r1
 8008ab2:	960a      	str	r6, [sp, #40]	@ 0x28
 8008ab4:	e7e7      	b.n	8008a86 <_strtod_l+0x216>
 8008ab6:	2b10      	cmp	r3, #16
 8008ab8:	bfde      	ittt	le
 8008aba:	9e08      	ldrle	r6, [sp, #32]
 8008abc:	434e      	mulle	r6, r1
 8008abe:	9608      	strle	r6, [sp, #32]
 8008ac0:	e7e1      	b.n	8008a86 <_strtod_l+0x216>
 8008ac2:	280f      	cmp	r0, #15
 8008ac4:	dceb      	bgt.n	8008a9e <_strtod_l+0x22e>
 8008ac6:	9808      	ldr	r0, [sp, #32]
 8008ac8:	230a      	movs	r3, #10
 8008aca:	fb03 2300 	mla	r3, r3, r0, r2
 8008ace:	9308      	str	r3, [sp, #32]
 8008ad0:	e7e5      	b.n	8008a9e <_strtod_l+0x22e>
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ad6:	1c50      	adds	r0, r2, #1
 8008ad8:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ada:	7852      	ldrb	r2, [r2, #1]
 8008adc:	4618      	mov	r0, r3
 8008ade:	460d      	mov	r5, r1
 8008ae0:	e7b1      	b.n	8008a46 <_strtod_l+0x1d6>
 8008ae2:	f04f 0900 	mov.w	r9, #0
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e77d      	b.n	80089e6 <_strtod_l+0x176>
 8008aea:	f04f 0c00 	mov.w	ip, #0
 8008aee:	1ca2      	adds	r2, r4, #2
 8008af0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008af2:	78a2      	ldrb	r2, [r4, #2]
 8008af4:	e785      	b.n	8008a02 <_strtod_l+0x192>
 8008af6:	f04f 0c01 	mov.w	ip, #1
 8008afa:	e7f8      	b.n	8008aee <_strtod_l+0x27e>
 8008afc:	0800ba90 	.word	0x0800ba90
 8008b00:	0800ba78 	.word	0x0800ba78
 8008b04:	7ff00000 	.word	0x7ff00000
 8008b08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b0a:	1c51      	adds	r1, r2, #1
 8008b0c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b0e:	7852      	ldrb	r2, [r2, #1]
 8008b10:	2a30      	cmp	r2, #48	@ 0x30
 8008b12:	d0f9      	beq.n	8008b08 <_strtod_l+0x298>
 8008b14:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008b18:	2908      	cmp	r1, #8
 8008b1a:	f63f af78 	bhi.w	8008a0e <_strtod_l+0x19e>
 8008b1e:	3a30      	subs	r2, #48	@ 0x30
 8008b20:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b24:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008b26:	f04f 080a 	mov.w	r8, #10
 8008b2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b2c:	1c56      	adds	r6, r2, #1
 8008b2e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008b30:	7852      	ldrb	r2, [r2, #1]
 8008b32:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008b36:	f1be 0f09 	cmp.w	lr, #9
 8008b3a:	d939      	bls.n	8008bb0 <_strtod_l+0x340>
 8008b3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008b3e:	1a76      	subs	r6, r6, r1
 8008b40:	2e08      	cmp	r6, #8
 8008b42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008b46:	dc03      	bgt.n	8008b50 <_strtod_l+0x2e0>
 8008b48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008b4a:	4588      	cmp	r8, r1
 8008b4c:	bfa8      	it	ge
 8008b4e:	4688      	movge	r8, r1
 8008b50:	f1bc 0f00 	cmp.w	ip, #0
 8008b54:	d001      	beq.n	8008b5a <_strtod_l+0x2ea>
 8008b56:	f1c8 0800 	rsb	r8, r8, #0
 8008b5a:	2d00      	cmp	r5, #0
 8008b5c:	d14e      	bne.n	8008bfc <_strtod_l+0x38c>
 8008b5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b60:	4308      	orrs	r0, r1
 8008b62:	f47f aebe 	bne.w	80088e2 <_strtod_l+0x72>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f47f aed6 	bne.w	8008918 <_strtod_l+0xa8>
 8008b6c:	2a69      	cmp	r2, #105	@ 0x69
 8008b6e:	d028      	beq.n	8008bc2 <_strtod_l+0x352>
 8008b70:	dc25      	bgt.n	8008bbe <_strtod_l+0x34e>
 8008b72:	2a49      	cmp	r2, #73	@ 0x49
 8008b74:	d025      	beq.n	8008bc2 <_strtod_l+0x352>
 8008b76:	2a4e      	cmp	r2, #78	@ 0x4e
 8008b78:	f47f aece 	bne.w	8008918 <_strtod_l+0xa8>
 8008b7c:	499b      	ldr	r1, [pc, #620]	@ (8008dec <_strtod_l+0x57c>)
 8008b7e:	a819      	add	r0, sp, #100	@ 0x64
 8008b80:	f001 f9ee 	bl	8009f60 <__match>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	f43f aec7 	beq.w	8008918 <_strtod_l+0xa8>
 8008b8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b28      	cmp	r3, #40	@ 0x28
 8008b90:	d12e      	bne.n	8008bf0 <_strtod_l+0x380>
 8008b92:	4997      	ldr	r1, [pc, #604]	@ (8008df0 <_strtod_l+0x580>)
 8008b94:	aa1c      	add	r2, sp, #112	@ 0x70
 8008b96:	a819      	add	r0, sp, #100	@ 0x64
 8008b98:	f001 f9f6 	bl	8009f88 <__hexnan>
 8008b9c:	2805      	cmp	r0, #5
 8008b9e:	d127      	bne.n	8008bf0 <_strtod_l+0x380>
 8008ba0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008ba2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008ba6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008baa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008bae:	e698      	b.n	80088e2 <_strtod_l+0x72>
 8008bb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008bb2:	fb08 2101 	mla	r1, r8, r1, r2
 8008bb6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008bba:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bbc:	e7b5      	b.n	8008b2a <_strtod_l+0x2ba>
 8008bbe:	2a6e      	cmp	r2, #110	@ 0x6e
 8008bc0:	e7da      	b.n	8008b78 <_strtod_l+0x308>
 8008bc2:	498c      	ldr	r1, [pc, #560]	@ (8008df4 <_strtod_l+0x584>)
 8008bc4:	a819      	add	r0, sp, #100	@ 0x64
 8008bc6:	f001 f9cb 	bl	8009f60 <__match>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	f43f aea4 	beq.w	8008918 <_strtod_l+0xa8>
 8008bd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bd2:	4989      	ldr	r1, [pc, #548]	@ (8008df8 <_strtod_l+0x588>)
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	a819      	add	r0, sp, #100	@ 0x64
 8008bd8:	9319      	str	r3, [sp, #100]	@ 0x64
 8008bda:	f001 f9c1 	bl	8009f60 <__match>
 8008bde:	b910      	cbnz	r0, 8008be6 <_strtod_l+0x376>
 8008be0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008be2:	3301      	adds	r3, #1
 8008be4:	9319      	str	r3, [sp, #100]	@ 0x64
 8008be6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008e08 <_strtod_l+0x598>
 8008bea:	f04f 0a00 	mov.w	sl, #0
 8008bee:	e678      	b.n	80088e2 <_strtod_l+0x72>
 8008bf0:	4882      	ldr	r0, [pc, #520]	@ (8008dfc <_strtod_l+0x58c>)
 8008bf2:	f000 fef1 	bl	80099d8 <nan>
 8008bf6:	ec5b ab10 	vmov	sl, fp, d0
 8008bfa:	e672      	b.n	80088e2 <_strtod_l+0x72>
 8008bfc:	eba8 0309 	sub.w	r3, r8, r9
 8008c00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c02:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c04:	2f00      	cmp	r7, #0
 8008c06:	bf08      	it	eq
 8008c08:	462f      	moveq	r7, r5
 8008c0a:	2d10      	cmp	r5, #16
 8008c0c:	462c      	mov	r4, r5
 8008c0e:	bfa8      	it	ge
 8008c10:	2410      	movge	r4, #16
 8008c12:	f7f7 fc77 	bl	8000504 <__aeabi_ui2d>
 8008c16:	2d09      	cmp	r5, #9
 8008c18:	4682      	mov	sl, r0
 8008c1a:	468b      	mov	fp, r1
 8008c1c:	dc13      	bgt.n	8008c46 <_strtod_l+0x3d6>
 8008c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f43f ae5e 	beq.w	80088e2 <_strtod_l+0x72>
 8008c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c28:	dd78      	ble.n	8008d1c <_strtod_l+0x4ac>
 8008c2a:	2b16      	cmp	r3, #22
 8008c2c:	dc5f      	bgt.n	8008cee <_strtod_l+0x47e>
 8008c2e:	4974      	ldr	r1, [pc, #464]	@ (8008e00 <_strtod_l+0x590>)
 8008c30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c38:	4652      	mov	r2, sl
 8008c3a:	465b      	mov	r3, fp
 8008c3c:	f7f7 fcdc 	bl	80005f8 <__aeabi_dmul>
 8008c40:	4682      	mov	sl, r0
 8008c42:	468b      	mov	fp, r1
 8008c44:	e64d      	b.n	80088e2 <_strtod_l+0x72>
 8008c46:	4b6e      	ldr	r3, [pc, #440]	@ (8008e00 <_strtod_l+0x590>)
 8008c48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008c50:	f7f7 fcd2 	bl	80005f8 <__aeabi_dmul>
 8008c54:	4682      	mov	sl, r0
 8008c56:	9808      	ldr	r0, [sp, #32]
 8008c58:	468b      	mov	fp, r1
 8008c5a:	f7f7 fc53 	bl	8000504 <__aeabi_ui2d>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4650      	mov	r0, sl
 8008c64:	4659      	mov	r1, fp
 8008c66:	f7f7 fb11 	bl	800028c <__adddf3>
 8008c6a:	2d0f      	cmp	r5, #15
 8008c6c:	4682      	mov	sl, r0
 8008c6e:	468b      	mov	fp, r1
 8008c70:	ddd5      	ble.n	8008c1e <_strtod_l+0x3ae>
 8008c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c74:	1b2c      	subs	r4, r5, r4
 8008c76:	441c      	add	r4, r3
 8008c78:	2c00      	cmp	r4, #0
 8008c7a:	f340 8096 	ble.w	8008daa <_strtod_l+0x53a>
 8008c7e:	f014 030f 	ands.w	r3, r4, #15
 8008c82:	d00a      	beq.n	8008c9a <_strtod_l+0x42a>
 8008c84:	495e      	ldr	r1, [pc, #376]	@ (8008e00 <_strtod_l+0x590>)
 8008c86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c8a:	4652      	mov	r2, sl
 8008c8c:	465b      	mov	r3, fp
 8008c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c92:	f7f7 fcb1 	bl	80005f8 <__aeabi_dmul>
 8008c96:	4682      	mov	sl, r0
 8008c98:	468b      	mov	fp, r1
 8008c9a:	f034 040f 	bics.w	r4, r4, #15
 8008c9e:	d073      	beq.n	8008d88 <_strtod_l+0x518>
 8008ca0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008ca4:	dd48      	ble.n	8008d38 <_strtod_l+0x4c8>
 8008ca6:	2400      	movs	r4, #0
 8008ca8:	46a0      	mov	r8, r4
 8008caa:	940a      	str	r4, [sp, #40]	@ 0x28
 8008cac:	46a1      	mov	r9, r4
 8008cae:	9a05      	ldr	r2, [sp, #20]
 8008cb0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008e08 <_strtod_l+0x598>
 8008cb4:	2322      	movs	r3, #34	@ 0x22
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	f04f 0a00 	mov.w	sl, #0
 8008cbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f43f ae0f 	beq.w	80088e2 <_strtod_l+0x72>
 8008cc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cc6:	9805      	ldr	r0, [sp, #20]
 8008cc8:	f7ff f942 	bl	8007f50 <_Bfree>
 8008ccc:	9805      	ldr	r0, [sp, #20]
 8008cce:	4649      	mov	r1, r9
 8008cd0:	f7ff f93e 	bl	8007f50 <_Bfree>
 8008cd4:	9805      	ldr	r0, [sp, #20]
 8008cd6:	4641      	mov	r1, r8
 8008cd8:	f7ff f93a 	bl	8007f50 <_Bfree>
 8008cdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008cde:	9805      	ldr	r0, [sp, #20]
 8008ce0:	f7ff f936 	bl	8007f50 <_Bfree>
 8008ce4:	9805      	ldr	r0, [sp, #20]
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	f7ff f932 	bl	8007f50 <_Bfree>
 8008cec:	e5f9      	b.n	80088e2 <_strtod_l+0x72>
 8008cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cf0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	dbbc      	blt.n	8008c72 <_strtod_l+0x402>
 8008cf8:	4c41      	ldr	r4, [pc, #260]	@ (8008e00 <_strtod_l+0x590>)
 8008cfa:	f1c5 050f 	rsb	r5, r5, #15
 8008cfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d02:	4652      	mov	r2, sl
 8008d04:	465b      	mov	r3, fp
 8008d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d0a:	f7f7 fc75 	bl	80005f8 <__aeabi_dmul>
 8008d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d10:	1b5d      	subs	r5, r3, r5
 8008d12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008d16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d1a:	e78f      	b.n	8008c3c <_strtod_l+0x3cc>
 8008d1c:	3316      	adds	r3, #22
 8008d1e:	dba8      	blt.n	8008c72 <_strtod_l+0x402>
 8008d20:	4b37      	ldr	r3, [pc, #220]	@ (8008e00 <_strtod_l+0x590>)
 8008d22:	eba9 0808 	sub.w	r8, r9, r8
 8008d26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008d2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008d2e:	4650      	mov	r0, sl
 8008d30:	4659      	mov	r1, fp
 8008d32:	f7f7 fd8b 	bl	800084c <__aeabi_ddiv>
 8008d36:	e783      	b.n	8008c40 <_strtod_l+0x3d0>
 8008d38:	4b32      	ldr	r3, [pc, #200]	@ (8008e04 <_strtod_l+0x594>)
 8008d3a:	9308      	str	r3, [sp, #32]
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	1124      	asrs	r4, r4, #4
 8008d40:	4650      	mov	r0, sl
 8008d42:	4659      	mov	r1, fp
 8008d44:	461e      	mov	r6, r3
 8008d46:	2c01      	cmp	r4, #1
 8008d48:	dc21      	bgt.n	8008d8e <_strtod_l+0x51e>
 8008d4a:	b10b      	cbz	r3, 8008d50 <_strtod_l+0x4e0>
 8008d4c:	4682      	mov	sl, r0
 8008d4e:	468b      	mov	fp, r1
 8008d50:	492c      	ldr	r1, [pc, #176]	@ (8008e04 <_strtod_l+0x594>)
 8008d52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008d56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	465b      	mov	r3, fp
 8008d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d62:	f7f7 fc49 	bl	80005f8 <__aeabi_dmul>
 8008d66:	4b28      	ldr	r3, [pc, #160]	@ (8008e08 <_strtod_l+0x598>)
 8008d68:	460a      	mov	r2, r1
 8008d6a:	400b      	ands	r3, r1
 8008d6c:	4927      	ldr	r1, [pc, #156]	@ (8008e0c <_strtod_l+0x59c>)
 8008d6e:	428b      	cmp	r3, r1
 8008d70:	4682      	mov	sl, r0
 8008d72:	d898      	bhi.n	8008ca6 <_strtod_l+0x436>
 8008d74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008d78:	428b      	cmp	r3, r1
 8008d7a:	bf86      	itte	hi
 8008d7c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008e10 <_strtod_l+0x5a0>
 8008d80:	f04f 3aff 	movhi.w	sl, #4294967295
 8008d84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9308      	str	r3, [sp, #32]
 8008d8c:	e07a      	b.n	8008e84 <_strtod_l+0x614>
 8008d8e:	07e2      	lsls	r2, r4, #31
 8008d90:	d505      	bpl.n	8008d9e <_strtod_l+0x52e>
 8008d92:	9b08      	ldr	r3, [sp, #32]
 8008d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d98:	f7f7 fc2e 	bl	80005f8 <__aeabi_dmul>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	9a08      	ldr	r2, [sp, #32]
 8008da0:	3208      	adds	r2, #8
 8008da2:	3601      	adds	r6, #1
 8008da4:	1064      	asrs	r4, r4, #1
 8008da6:	9208      	str	r2, [sp, #32]
 8008da8:	e7cd      	b.n	8008d46 <_strtod_l+0x4d6>
 8008daa:	d0ed      	beq.n	8008d88 <_strtod_l+0x518>
 8008dac:	4264      	negs	r4, r4
 8008dae:	f014 020f 	ands.w	r2, r4, #15
 8008db2:	d00a      	beq.n	8008dca <_strtod_l+0x55a>
 8008db4:	4b12      	ldr	r3, [pc, #72]	@ (8008e00 <_strtod_l+0x590>)
 8008db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dba:	4650      	mov	r0, sl
 8008dbc:	4659      	mov	r1, fp
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	f7f7 fd43 	bl	800084c <__aeabi_ddiv>
 8008dc6:	4682      	mov	sl, r0
 8008dc8:	468b      	mov	fp, r1
 8008dca:	1124      	asrs	r4, r4, #4
 8008dcc:	d0dc      	beq.n	8008d88 <_strtod_l+0x518>
 8008dce:	2c1f      	cmp	r4, #31
 8008dd0:	dd20      	ble.n	8008e14 <_strtod_l+0x5a4>
 8008dd2:	2400      	movs	r4, #0
 8008dd4:	46a0      	mov	r8, r4
 8008dd6:	940a      	str	r4, [sp, #40]	@ 0x28
 8008dd8:	46a1      	mov	r9, r4
 8008dda:	9a05      	ldr	r2, [sp, #20]
 8008ddc:	2322      	movs	r3, #34	@ 0x22
 8008dde:	f04f 0a00 	mov.w	sl, #0
 8008de2:	f04f 0b00 	mov.w	fp, #0
 8008de6:	6013      	str	r3, [r2, #0]
 8008de8:	e768      	b.n	8008cbc <_strtod_l+0x44c>
 8008dea:	bf00      	nop
 8008dec:	0800b865 	.word	0x0800b865
 8008df0:	0800ba7c 	.word	0x0800ba7c
 8008df4:	0800b85d 	.word	0x0800b85d
 8008df8:	0800b894 	.word	0x0800b894
 8008dfc:	0800bc25 	.word	0x0800bc25
 8008e00:	0800b9b0 	.word	0x0800b9b0
 8008e04:	0800b988 	.word	0x0800b988
 8008e08:	7ff00000 	.word	0x7ff00000
 8008e0c:	7ca00000 	.word	0x7ca00000
 8008e10:	7fefffff 	.word	0x7fefffff
 8008e14:	f014 0310 	ands.w	r3, r4, #16
 8008e18:	bf18      	it	ne
 8008e1a:	236a      	movne	r3, #106	@ 0x6a
 8008e1c:	4ea9      	ldr	r6, [pc, #676]	@ (80090c4 <_strtod_l+0x854>)
 8008e1e:	9308      	str	r3, [sp, #32]
 8008e20:	4650      	mov	r0, sl
 8008e22:	4659      	mov	r1, fp
 8008e24:	2300      	movs	r3, #0
 8008e26:	07e2      	lsls	r2, r4, #31
 8008e28:	d504      	bpl.n	8008e34 <_strtod_l+0x5c4>
 8008e2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e2e:	f7f7 fbe3 	bl	80005f8 <__aeabi_dmul>
 8008e32:	2301      	movs	r3, #1
 8008e34:	1064      	asrs	r4, r4, #1
 8008e36:	f106 0608 	add.w	r6, r6, #8
 8008e3a:	d1f4      	bne.n	8008e26 <_strtod_l+0x5b6>
 8008e3c:	b10b      	cbz	r3, 8008e42 <_strtod_l+0x5d2>
 8008e3e:	4682      	mov	sl, r0
 8008e40:	468b      	mov	fp, r1
 8008e42:	9b08      	ldr	r3, [sp, #32]
 8008e44:	b1b3      	cbz	r3, 8008e74 <_strtod_l+0x604>
 8008e46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008e4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	4659      	mov	r1, fp
 8008e52:	dd0f      	ble.n	8008e74 <_strtod_l+0x604>
 8008e54:	2b1f      	cmp	r3, #31
 8008e56:	dd55      	ble.n	8008f04 <_strtod_l+0x694>
 8008e58:	2b34      	cmp	r3, #52	@ 0x34
 8008e5a:	bfde      	ittt	le
 8008e5c:	f04f 33ff 	movle.w	r3, #4294967295
 8008e60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008e64:	4093      	lslle	r3, r2
 8008e66:	f04f 0a00 	mov.w	sl, #0
 8008e6a:	bfcc      	ite	gt
 8008e6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008e70:	ea03 0b01 	andle.w	fp, r3, r1
 8008e74:	2200      	movs	r2, #0
 8008e76:	2300      	movs	r3, #0
 8008e78:	4650      	mov	r0, sl
 8008e7a:	4659      	mov	r1, fp
 8008e7c:	f7f7 fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d1a6      	bne.n	8008dd2 <_strtod_l+0x562>
 8008e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008e8a:	9805      	ldr	r0, [sp, #20]
 8008e8c:	462b      	mov	r3, r5
 8008e8e:	463a      	mov	r2, r7
 8008e90:	f7ff f8c6 	bl	8008020 <__s2b>
 8008e94:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f43f af05 	beq.w	8008ca6 <_strtod_l+0x436>
 8008e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	eba9 0308 	sub.w	r3, r9, r8
 8008ea4:	bfa8      	it	ge
 8008ea6:	2300      	movge	r3, #0
 8008ea8:	9312      	str	r3, [sp, #72]	@ 0x48
 8008eaa:	2400      	movs	r4, #0
 8008eac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008eb0:	9316      	str	r3, [sp, #88]	@ 0x58
 8008eb2:	46a0      	mov	r8, r4
 8008eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eb6:	9805      	ldr	r0, [sp, #20]
 8008eb8:	6859      	ldr	r1, [r3, #4]
 8008eba:	f7ff f809 	bl	8007ed0 <_Balloc>
 8008ebe:	4681      	mov	r9, r0
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	f43f aef4 	beq.w	8008cae <_strtod_l+0x43e>
 8008ec6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ec8:	691a      	ldr	r2, [r3, #16]
 8008eca:	3202      	adds	r2, #2
 8008ecc:	f103 010c 	add.w	r1, r3, #12
 8008ed0:	0092      	lsls	r2, r2, #2
 8008ed2:	300c      	adds	r0, #12
 8008ed4:	f000 fd72 	bl	80099bc <memcpy>
 8008ed8:	ec4b ab10 	vmov	d0, sl, fp
 8008edc:	9805      	ldr	r0, [sp, #20]
 8008ede:	aa1c      	add	r2, sp, #112	@ 0x70
 8008ee0:	a91b      	add	r1, sp, #108	@ 0x6c
 8008ee2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008ee6:	f7ff fbd7 	bl	8008698 <__d2b>
 8008eea:	901a      	str	r0, [sp, #104]	@ 0x68
 8008eec:	2800      	cmp	r0, #0
 8008eee:	f43f aede 	beq.w	8008cae <_strtod_l+0x43e>
 8008ef2:	9805      	ldr	r0, [sp, #20]
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	f7ff f929 	bl	800814c <__i2b>
 8008efa:	4680      	mov	r8, r0
 8008efc:	b948      	cbnz	r0, 8008f12 <_strtod_l+0x6a2>
 8008efe:	f04f 0800 	mov.w	r8, #0
 8008f02:	e6d4      	b.n	8008cae <_strtod_l+0x43e>
 8008f04:	f04f 32ff 	mov.w	r2, #4294967295
 8008f08:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0c:	ea03 0a0a 	and.w	sl, r3, sl
 8008f10:	e7b0      	b.n	8008e74 <_strtod_l+0x604>
 8008f12:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008f14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008f16:	2d00      	cmp	r5, #0
 8008f18:	bfab      	itete	ge
 8008f1a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008f1c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008f1e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008f20:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008f22:	bfac      	ite	ge
 8008f24:	18ef      	addge	r7, r5, r3
 8008f26:	1b5e      	sublt	r6, r3, r5
 8008f28:	9b08      	ldr	r3, [sp, #32]
 8008f2a:	1aed      	subs	r5, r5, r3
 8008f2c:	4415      	add	r5, r2
 8008f2e:	4b66      	ldr	r3, [pc, #408]	@ (80090c8 <_strtod_l+0x858>)
 8008f30:	3d01      	subs	r5, #1
 8008f32:	429d      	cmp	r5, r3
 8008f34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008f38:	da50      	bge.n	8008fdc <_strtod_l+0x76c>
 8008f3a:	1b5b      	subs	r3, r3, r5
 8008f3c:	2b1f      	cmp	r3, #31
 8008f3e:	eba2 0203 	sub.w	r2, r2, r3
 8008f42:	f04f 0101 	mov.w	r1, #1
 8008f46:	dc3d      	bgt.n	8008fc4 <_strtod_l+0x754>
 8008f48:	fa01 f303 	lsl.w	r3, r1, r3
 8008f4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f4e:	2300      	movs	r3, #0
 8008f50:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f52:	18bd      	adds	r5, r7, r2
 8008f54:	9b08      	ldr	r3, [sp, #32]
 8008f56:	42af      	cmp	r7, r5
 8008f58:	4416      	add	r6, r2
 8008f5a:	441e      	add	r6, r3
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	bfa8      	it	ge
 8008f60:	462b      	movge	r3, r5
 8008f62:	42b3      	cmp	r3, r6
 8008f64:	bfa8      	it	ge
 8008f66:	4633      	movge	r3, r6
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	bfc2      	ittt	gt
 8008f6c:	1aed      	subgt	r5, r5, r3
 8008f6e:	1af6      	subgt	r6, r6, r3
 8008f70:	1aff      	subgt	r7, r7, r3
 8008f72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	dd16      	ble.n	8008fa6 <_strtod_l+0x736>
 8008f78:	4641      	mov	r1, r8
 8008f7a:	9805      	ldr	r0, [sp, #20]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	f7ff f9a5 	bl	80082cc <__pow5mult>
 8008f82:	4680      	mov	r8, r0
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d0ba      	beq.n	8008efe <_strtod_l+0x68e>
 8008f88:	4601      	mov	r1, r0
 8008f8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f8c:	9805      	ldr	r0, [sp, #20]
 8008f8e:	f7ff f8f3 	bl	8008178 <__multiply>
 8008f92:	900e      	str	r0, [sp, #56]	@ 0x38
 8008f94:	2800      	cmp	r0, #0
 8008f96:	f43f ae8a 	beq.w	8008cae <_strtod_l+0x43e>
 8008f9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f9c:	9805      	ldr	r0, [sp, #20]
 8008f9e:	f7fe ffd7 	bl	8007f50 <_Bfree>
 8008fa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fa4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fa6:	2d00      	cmp	r5, #0
 8008fa8:	dc1d      	bgt.n	8008fe6 <_strtod_l+0x776>
 8008faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	dd23      	ble.n	8008ff8 <_strtod_l+0x788>
 8008fb0:	4649      	mov	r1, r9
 8008fb2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008fb4:	9805      	ldr	r0, [sp, #20]
 8008fb6:	f7ff f989 	bl	80082cc <__pow5mult>
 8008fba:	4681      	mov	r9, r0
 8008fbc:	b9e0      	cbnz	r0, 8008ff8 <_strtod_l+0x788>
 8008fbe:	f04f 0900 	mov.w	r9, #0
 8008fc2:	e674      	b.n	8008cae <_strtod_l+0x43e>
 8008fc4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008fc8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008fcc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008fd0:	35e2      	adds	r5, #226	@ 0xe2
 8008fd2:	fa01 f305 	lsl.w	r3, r1, r5
 8008fd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fd8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008fda:	e7ba      	b.n	8008f52 <_strtod_l+0x6e2>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fe4:	e7b5      	b.n	8008f52 <_strtod_l+0x6e2>
 8008fe6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fe8:	9805      	ldr	r0, [sp, #20]
 8008fea:	462a      	mov	r2, r5
 8008fec:	f7ff f9c8 	bl	8008380 <__lshift>
 8008ff0:	901a      	str	r0, [sp, #104]	@ 0x68
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d1d9      	bne.n	8008faa <_strtod_l+0x73a>
 8008ff6:	e65a      	b.n	8008cae <_strtod_l+0x43e>
 8008ff8:	2e00      	cmp	r6, #0
 8008ffa:	dd07      	ble.n	800900c <_strtod_l+0x79c>
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	9805      	ldr	r0, [sp, #20]
 8009000:	4632      	mov	r2, r6
 8009002:	f7ff f9bd 	bl	8008380 <__lshift>
 8009006:	4681      	mov	r9, r0
 8009008:	2800      	cmp	r0, #0
 800900a:	d0d8      	beq.n	8008fbe <_strtod_l+0x74e>
 800900c:	2f00      	cmp	r7, #0
 800900e:	dd08      	ble.n	8009022 <_strtod_l+0x7b2>
 8009010:	4641      	mov	r1, r8
 8009012:	9805      	ldr	r0, [sp, #20]
 8009014:	463a      	mov	r2, r7
 8009016:	f7ff f9b3 	bl	8008380 <__lshift>
 800901a:	4680      	mov	r8, r0
 800901c:	2800      	cmp	r0, #0
 800901e:	f43f ae46 	beq.w	8008cae <_strtod_l+0x43e>
 8009022:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009024:	9805      	ldr	r0, [sp, #20]
 8009026:	464a      	mov	r2, r9
 8009028:	f7ff fa32 	bl	8008490 <__mdiff>
 800902c:	4604      	mov	r4, r0
 800902e:	2800      	cmp	r0, #0
 8009030:	f43f ae3d 	beq.w	8008cae <_strtod_l+0x43e>
 8009034:	68c3      	ldr	r3, [r0, #12]
 8009036:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009038:	2300      	movs	r3, #0
 800903a:	60c3      	str	r3, [r0, #12]
 800903c:	4641      	mov	r1, r8
 800903e:	f7ff fa0b 	bl	8008458 <__mcmp>
 8009042:	2800      	cmp	r0, #0
 8009044:	da46      	bge.n	80090d4 <_strtod_l+0x864>
 8009046:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009048:	ea53 030a 	orrs.w	r3, r3, sl
 800904c:	d16c      	bne.n	8009128 <_strtod_l+0x8b8>
 800904e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009052:	2b00      	cmp	r3, #0
 8009054:	d168      	bne.n	8009128 <_strtod_l+0x8b8>
 8009056:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800905a:	0d1b      	lsrs	r3, r3, #20
 800905c:	051b      	lsls	r3, r3, #20
 800905e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009062:	d961      	bls.n	8009128 <_strtod_l+0x8b8>
 8009064:	6963      	ldr	r3, [r4, #20]
 8009066:	b913      	cbnz	r3, 800906e <_strtod_l+0x7fe>
 8009068:	6923      	ldr	r3, [r4, #16]
 800906a:	2b01      	cmp	r3, #1
 800906c:	dd5c      	ble.n	8009128 <_strtod_l+0x8b8>
 800906e:	4621      	mov	r1, r4
 8009070:	2201      	movs	r2, #1
 8009072:	9805      	ldr	r0, [sp, #20]
 8009074:	f7ff f984 	bl	8008380 <__lshift>
 8009078:	4641      	mov	r1, r8
 800907a:	4604      	mov	r4, r0
 800907c:	f7ff f9ec 	bl	8008458 <__mcmp>
 8009080:	2800      	cmp	r0, #0
 8009082:	dd51      	ble.n	8009128 <_strtod_l+0x8b8>
 8009084:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009088:	9a08      	ldr	r2, [sp, #32]
 800908a:	0d1b      	lsrs	r3, r3, #20
 800908c:	051b      	lsls	r3, r3, #20
 800908e:	2a00      	cmp	r2, #0
 8009090:	d06b      	beq.n	800916a <_strtod_l+0x8fa>
 8009092:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009096:	d868      	bhi.n	800916a <_strtod_l+0x8fa>
 8009098:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800909c:	f67f ae9d 	bls.w	8008dda <_strtod_l+0x56a>
 80090a0:	4b0a      	ldr	r3, [pc, #40]	@ (80090cc <_strtod_l+0x85c>)
 80090a2:	4650      	mov	r0, sl
 80090a4:	4659      	mov	r1, fp
 80090a6:	2200      	movs	r2, #0
 80090a8:	f7f7 faa6 	bl	80005f8 <__aeabi_dmul>
 80090ac:	4b08      	ldr	r3, [pc, #32]	@ (80090d0 <_strtod_l+0x860>)
 80090ae:	400b      	ands	r3, r1
 80090b0:	4682      	mov	sl, r0
 80090b2:	468b      	mov	fp, r1
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f47f ae05 	bne.w	8008cc4 <_strtod_l+0x454>
 80090ba:	9a05      	ldr	r2, [sp, #20]
 80090bc:	2322      	movs	r3, #34	@ 0x22
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	e600      	b.n	8008cc4 <_strtod_l+0x454>
 80090c2:	bf00      	nop
 80090c4:	0800baa8 	.word	0x0800baa8
 80090c8:	fffffc02 	.word	0xfffffc02
 80090cc:	39500000 	.word	0x39500000
 80090d0:	7ff00000 	.word	0x7ff00000
 80090d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80090d8:	d165      	bne.n	80091a6 <_strtod_l+0x936>
 80090da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80090dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090e0:	b35a      	cbz	r2, 800913a <_strtod_l+0x8ca>
 80090e2:	4a9f      	ldr	r2, [pc, #636]	@ (8009360 <_strtod_l+0xaf0>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d12b      	bne.n	8009140 <_strtod_l+0x8d0>
 80090e8:	9b08      	ldr	r3, [sp, #32]
 80090ea:	4651      	mov	r1, sl
 80090ec:	b303      	cbz	r3, 8009130 <_strtod_l+0x8c0>
 80090ee:	4b9d      	ldr	r3, [pc, #628]	@ (8009364 <_strtod_l+0xaf4>)
 80090f0:	465a      	mov	r2, fp
 80090f2:	4013      	ands	r3, r2
 80090f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80090f8:	f04f 32ff 	mov.w	r2, #4294967295
 80090fc:	d81b      	bhi.n	8009136 <_strtod_l+0x8c6>
 80090fe:	0d1b      	lsrs	r3, r3, #20
 8009100:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009104:	fa02 f303 	lsl.w	r3, r2, r3
 8009108:	4299      	cmp	r1, r3
 800910a:	d119      	bne.n	8009140 <_strtod_l+0x8d0>
 800910c:	4b96      	ldr	r3, [pc, #600]	@ (8009368 <_strtod_l+0xaf8>)
 800910e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009110:	429a      	cmp	r2, r3
 8009112:	d102      	bne.n	800911a <_strtod_l+0x8aa>
 8009114:	3101      	adds	r1, #1
 8009116:	f43f adca 	beq.w	8008cae <_strtod_l+0x43e>
 800911a:	4b92      	ldr	r3, [pc, #584]	@ (8009364 <_strtod_l+0xaf4>)
 800911c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800911e:	401a      	ands	r2, r3
 8009120:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009124:	f04f 0a00 	mov.w	sl, #0
 8009128:	9b08      	ldr	r3, [sp, #32]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1b8      	bne.n	80090a0 <_strtod_l+0x830>
 800912e:	e5c9      	b.n	8008cc4 <_strtod_l+0x454>
 8009130:	f04f 33ff 	mov.w	r3, #4294967295
 8009134:	e7e8      	b.n	8009108 <_strtod_l+0x898>
 8009136:	4613      	mov	r3, r2
 8009138:	e7e6      	b.n	8009108 <_strtod_l+0x898>
 800913a:	ea53 030a 	orrs.w	r3, r3, sl
 800913e:	d0a1      	beq.n	8009084 <_strtod_l+0x814>
 8009140:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009142:	b1db      	cbz	r3, 800917c <_strtod_l+0x90c>
 8009144:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009146:	4213      	tst	r3, r2
 8009148:	d0ee      	beq.n	8009128 <_strtod_l+0x8b8>
 800914a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800914c:	9a08      	ldr	r2, [sp, #32]
 800914e:	4650      	mov	r0, sl
 8009150:	4659      	mov	r1, fp
 8009152:	b1bb      	cbz	r3, 8009184 <_strtod_l+0x914>
 8009154:	f7ff fb6e 	bl	8008834 <sulp>
 8009158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800915c:	ec53 2b10 	vmov	r2, r3, d0
 8009160:	f7f7 f894 	bl	800028c <__adddf3>
 8009164:	4682      	mov	sl, r0
 8009166:	468b      	mov	fp, r1
 8009168:	e7de      	b.n	8009128 <_strtod_l+0x8b8>
 800916a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800916e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009172:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009176:	f04f 3aff 	mov.w	sl, #4294967295
 800917a:	e7d5      	b.n	8009128 <_strtod_l+0x8b8>
 800917c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800917e:	ea13 0f0a 	tst.w	r3, sl
 8009182:	e7e1      	b.n	8009148 <_strtod_l+0x8d8>
 8009184:	f7ff fb56 	bl	8008834 <sulp>
 8009188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800918c:	ec53 2b10 	vmov	r2, r3, d0
 8009190:	f7f7 f87a 	bl	8000288 <__aeabi_dsub>
 8009194:	2200      	movs	r2, #0
 8009196:	2300      	movs	r3, #0
 8009198:	4682      	mov	sl, r0
 800919a:	468b      	mov	fp, r1
 800919c:	f7f7 fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d0c1      	beq.n	8009128 <_strtod_l+0x8b8>
 80091a4:	e619      	b.n	8008dda <_strtod_l+0x56a>
 80091a6:	4641      	mov	r1, r8
 80091a8:	4620      	mov	r0, r4
 80091aa:	f7ff facd 	bl	8008748 <__ratio>
 80091ae:	ec57 6b10 	vmov	r6, r7, d0
 80091b2:	2200      	movs	r2, #0
 80091b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80091b8:	4630      	mov	r0, r6
 80091ba:	4639      	mov	r1, r7
 80091bc:	f7f7 fc98 	bl	8000af0 <__aeabi_dcmple>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d06f      	beq.n	80092a4 <_strtod_l+0xa34>
 80091c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d17a      	bne.n	80092c0 <_strtod_l+0xa50>
 80091ca:	f1ba 0f00 	cmp.w	sl, #0
 80091ce:	d158      	bne.n	8009282 <_strtod_l+0xa12>
 80091d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d15a      	bne.n	8009290 <_strtod_l+0xa20>
 80091da:	4b64      	ldr	r3, [pc, #400]	@ (800936c <_strtod_l+0xafc>)
 80091dc:	2200      	movs	r2, #0
 80091de:	4630      	mov	r0, r6
 80091e0:	4639      	mov	r1, r7
 80091e2:	f7f7 fc7b 	bl	8000adc <__aeabi_dcmplt>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d159      	bne.n	800929e <_strtod_l+0xa2e>
 80091ea:	4630      	mov	r0, r6
 80091ec:	4639      	mov	r1, r7
 80091ee:	4b60      	ldr	r3, [pc, #384]	@ (8009370 <_strtod_l+0xb00>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	f7f7 fa01 	bl	80005f8 <__aeabi_dmul>
 80091f6:	4606      	mov	r6, r0
 80091f8:	460f      	mov	r7, r1
 80091fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80091fe:	9606      	str	r6, [sp, #24]
 8009200:	9307      	str	r3, [sp, #28]
 8009202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009206:	4d57      	ldr	r5, [pc, #348]	@ (8009364 <_strtod_l+0xaf4>)
 8009208:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800920c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800920e:	401d      	ands	r5, r3
 8009210:	4b58      	ldr	r3, [pc, #352]	@ (8009374 <_strtod_l+0xb04>)
 8009212:	429d      	cmp	r5, r3
 8009214:	f040 80b2 	bne.w	800937c <_strtod_l+0xb0c>
 8009218:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800921a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800921e:	ec4b ab10 	vmov	d0, sl, fp
 8009222:	f7ff f9c9 	bl	80085b8 <__ulp>
 8009226:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800922a:	ec51 0b10 	vmov	r0, r1, d0
 800922e:	f7f7 f9e3 	bl	80005f8 <__aeabi_dmul>
 8009232:	4652      	mov	r2, sl
 8009234:	465b      	mov	r3, fp
 8009236:	f7f7 f829 	bl	800028c <__adddf3>
 800923a:	460b      	mov	r3, r1
 800923c:	4949      	ldr	r1, [pc, #292]	@ (8009364 <_strtod_l+0xaf4>)
 800923e:	4a4e      	ldr	r2, [pc, #312]	@ (8009378 <_strtod_l+0xb08>)
 8009240:	4019      	ands	r1, r3
 8009242:	4291      	cmp	r1, r2
 8009244:	4682      	mov	sl, r0
 8009246:	d942      	bls.n	80092ce <_strtod_l+0xa5e>
 8009248:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800924a:	4b47      	ldr	r3, [pc, #284]	@ (8009368 <_strtod_l+0xaf8>)
 800924c:	429a      	cmp	r2, r3
 800924e:	d103      	bne.n	8009258 <_strtod_l+0x9e8>
 8009250:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009252:	3301      	adds	r3, #1
 8009254:	f43f ad2b 	beq.w	8008cae <_strtod_l+0x43e>
 8009258:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009368 <_strtod_l+0xaf8>
 800925c:	f04f 3aff 	mov.w	sl, #4294967295
 8009260:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009262:	9805      	ldr	r0, [sp, #20]
 8009264:	f7fe fe74 	bl	8007f50 <_Bfree>
 8009268:	9805      	ldr	r0, [sp, #20]
 800926a:	4649      	mov	r1, r9
 800926c:	f7fe fe70 	bl	8007f50 <_Bfree>
 8009270:	9805      	ldr	r0, [sp, #20]
 8009272:	4641      	mov	r1, r8
 8009274:	f7fe fe6c 	bl	8007f50 <_Bfree>
 8009278:	9805      	ldr	r0, [sp, #20]
 800927a:	4621      	mov	r1, r4
 800927c:	f7fe fe68 	bl	8007f50 <_Bfree>
 8009280:	e618      	b.n	8008eb4 <_strtod_l+0x644>
 8009282:	f1ba 0f01 	cmp.w	sl, #1
 8009286:	d103      	bne.n	8009290 <_strtod_l+0xa20>
 8009288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800928a:	2b00      	cmp	r3, #0
 800928c:	f43f ada5 	beq.w	8008dda <_strtod_l+0x56a>
 8009290:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009340 <_strtod_l+0xad0>
 8009294:	4f35      	ldr	r7, [pc, #212]	@ (800936c <_strtod_l+0xafc>)
 8009296:	ed8d 7b06 	vstr	d7, [sp, #24]
 800929a:	2600      	movs	r6, #0
 800929c:	e7b1      	b.n	8009202 <_strtod_l+0x992>
 800929e:	4f34      	ldr	r7, [pc, #208]	@ (8009370 <_strtod_l+0xb00>)
 80092a0:	2600      	movs	r6, #0
 80092a2:	e7aa      	b.n	80091fa <_strtod_l+0x98a>
 80092a4:	4b32      	ldr	r3, [pc, #200]	@ (8009370 <_strtod_l+0xb00>)
 80092a6:	4630      	mov	r0, r6
 80092a8:	4639      	mov	r1, r7
 80092aa:	2200      	movs	r2, #0
 80092ac:	f7f7 f9a4 	bl	80005f8 <__aeabi_dmul>
 80092b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092b2:	4606      	mov	r6, r0
 80092b4:	460f      	mov	r7, r1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d09f      	beq.n	80091fa <_strtod_l+0x98a>
 80092ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80092be:	e7a0      	b.n	8009202 <_strtod_l+0x992>
 80092c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009348 <_strtod_l+0xad8>
 80092c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80092c8:	ec57 6b17 	vmov	r6, r7, d7
 80092cc:	e799      	b.n	8009202 <_strtod_l+0x992>
 80092ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80092d2:	9b08      	ldr	r3, [sp, #32]
 80092d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1c1      	bne.n	8009260 <_strtod_l+0x9f0>
 80092dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092e0:	0d1b      	lsrs	r3, r3, #20
 80092e2:	051b      	lsls	r3, r3, #20
 80092e4:	429d      	cmp	r5, r3
 80092e6:	d1bb      	bne.n	8009260 <_strtod_l+0x9f0>
 80092e8:	4630      	mov	r0, r6
 80092ea:	4639      	mov	r1, r7
 80092ec:	f7f7 fce4 	bl	8000cb8 <__aeabi_d2lz>
 80092f0:	f7f7 f954 	bl	800059c <__aeabi_l2d>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	4630      	mov	r0, r6
 80092fa:	4639      	mov	r1, r7
 80092fc:	f7f6 ffc4 	bl	8000288 <__aeabi_dsub>
 8009300:	460b      	mov	r3, r1
 8009302:	4602      	mov	r2, r0
 8009304:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009308:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800930c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800930e:	ea46 060a 	orr.w	r6, r6, sl
 8009312:	431e      	orrs	r6, r3
 8009314:	d06f      	beq.n	80093f6 <_strtod_l+0xb86>
 8009316:	a30e      	add	r3, pc, #56	@ (adr r3, 8009350 <_strtod_l+0xae0>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f7f7 fbde 	bl	8000adc <__aeabi_dcmplt>
 8009320:	2800      	cmp	r0, #0
 8009322:	f47f accf 	bne.w	8008cc4 <_strtod_l+0x454>
 8009326:	a30c      	add	r3, pc, #48	@ (adr r3, 8009358 <_strtod_l+0xae8>)
 8009328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009330:	f7f7 fbf2 	bl	8000b18 <__aeabi_dcmpgt>
 8009334:	2800      	cmp	r0, #0
 8009336:	d093      	beq.n	8009260 <_strtod_l+0x9f0>
 8009338:	e4c4      	b.n	8008cc4 <_strtod_l+0x454>
 800933a:	bf00      	nop
 800933c:	f3af 8000 	nop.w
 8009340:	00000000 	.word	0x00000000
 8009344:	bff00000 	.word	0xbff00000
 8009348:	00000000 	.word	0x00000000
 800934c:	3ff00000 	.word	0x3ff00000
 8009350:	94a03595 	.word	0x94a03595
 8009354:	3fdfffff 	.word	0x3fdfffff
 8009358:	35afe535 	.word	0x35afe535
 800935c:	3fe00000 	.word	0x3fe00000
 8009360:	000fffff 	.word	0x000fffff
 8009364:	7ff00000 	.word	0x7ff00000
 8009368:	7fefffff 	.word	0x7fefffff
 800936c:	3ff00000 	.word	0x3ff00000
 8009370:	3fe00000 	.word	0x3fe00000
 8009374:	7fe00000 	.word	0x7fe00000
 8009378:	7c9fffff 	.word	0x7c9fffff
 800937c:	9b08      	ldr	r3, [sp, #32]
 800937e:	b323      	cbz	r3, 80093ca <_strtod_l+0xb5a>
 8009380:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009384:	d821      	bhi.n	80093ca <_strtod_l+0xb5a>
 8009386:	a328      	add	r3, pc, #160	@ (adr r3, 8009428 <_strtod_l+0xbb8>)
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	4630      	mov	r0, r6
 800938e:	4639      	mov	r1, r7
 8009390:	f7f7 fbae 	bl	8000af0 <__aeabi_dcmple>
 8009394:	b1a0      	cbz	r0, 80093c0 <_strtod_l+0xb50>
 8009396:	4639      	mov	r1, r7
 8009398:	4630      	mov	r0, r6
 800939a:	f7f7 fc05 	bl	8000ba8 <__aeabi_d2uiz>
 800939e:	2801      	cmp	r0, #1
 80093a0:	bf38      	it	cc
 80093a2:	2001      	movcc	r0, #1
 80093a4:	f7f7 f8ae 	bl	8000504 <__aeabi_ui2d>
 80093a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093aa:	4606      	mov	r6, r0
 80093ac:	460f      	mov	r7, r1
 80093ae:	b9fb      	cbnz	r3, 80093f0 <_strtod_l+0xb80>
 80093b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093b4:	9014      	str	r0, [sp, #80]	@ 0x50
 80093b6:	9315      	str	r3, [sp, #84]	@ 0x54
 80093b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80093bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80093c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80093c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80093c6:	1b5b      	subs	r3, r3, r5
 80093c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80093ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80093ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80093d2:	f7ff f8f1 	bl	80085b8 <__ulp>
 80093d6:	4650      	mov	r0, sl
 80093d8:	ec53 2b10 	vmov	r2, r3, d0
 80093dc:	4659      	mov	r1, fp
 80093de:	f7f7 f90b 	bl	80005f8 <__aeabi_dmul>
 80093e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80093e6:	f7f6 ff51 	bl	800028c <__adddf3>
 80093ea:	4682      	mov	sl, r0
 80093ec:	468b      	mov	fp, r1
 80093ee:	e770      	b.n	80092d2 <_strtod_l+0xa62>
 80093f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80093f4:	e7e0      	b.n	80093b8 <_strtod_l+0xb48>
 80093f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009430 <_strtod_l+0xbc0>)
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	f7f7 fb6e 	bl	8000adc <__aeabi_dcmplt>
 8009400:	e798      	b.n	8009334 <_strtod_l+0xac4>
 8009402:	2300      	movs	r3, #0
 8009404:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009406:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009408:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	f7ff ba6d 	b.w	80088ea <_strtod_l+0x7a>
 8009410:	2a65      	cmp	r2, #101	@ 0x65
 8009412:	f43f ab66 	beq.w	8008ae2 <_strtod_l+0x272>
 8009416:	2a45      	cmp	r2, #69	@ 0x45
 8009418:	f43f ab63 	beq.w	8008ae2 <_strtod_l+0x272>
 800941c:	2301      	movs	r3, #1
 800941e:	f7ff bb9e 	b.w	8008b5e <_strtod_l+0x2ee>
 8009422:	bf00      	nop
 8009424:	f3af 8000 	nop.w
 8009428:	ffc00000 	.word	0xffc00000
 800942c:	41dfffff 	.word	0x41dfffff
 8009430:	94a03595 	.word	0x94a03595
 8009434:	3fcfffff 	.word	0x3fcfffff

08009438 <_strtod_r>:
 8009438:	4b01      	ldr	r3, [pc, #4]	@ (8009440 <_strtod_r+0x8>)
 800943a:	f7ff ba19 	b.w	8008870 <_strtod_l>
 800943e:	bf00      	nop
 8009440:	20000068 	.word	0x20000068

08009444 <_strtol_l.constprop.0>:
 8009444:	2b24      	cmp	r3, #36	@ 0x24
 8009446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800944a:	4686      	mov	lr, r0
 800944c:	4690      	mov	r8, r2
 800944e:	d801      	bhi.n	8009454 <_strtol_l.constprop.0+0x10>
 8009450:	2b01      	cmp	r3, #1
 8009452:	d106      	bne.n	8009462 <_strtol_l.constprop.0+0x1e>
 8009454:	f7fd fdba 	bl	8006fcc <__errno>
 8009458:	2316      	movs	r3, #22
 800945a:	6003      	str	r3, [r0, #0]
 800945c:	2000      	movs	r0, #0
 800945e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009462:	4834      	ldr	r0, [pc, #208]	@ (8009534 <_strtol_l.constprop.0+0xf0>)
 8009464:	460d      	mov	r5, r1
 8009466:	462a      	mov	r2, r5
 8009468:	f815 4b01 	ldrb.w	r4, [r5], #1
 800946c:	5d06      	ldrb	r6, [r0, r4]
 800946e:	f016 0608 	ands.w	r6, r6, #8
 8009472:	d1f8      	bne.n	8009466 <_strtol_l.constprop.0+0x22>
 8009474:	2c2d      	cmp	r4, #45	@ 0x2d
 8009476:	d12d      	bne.n	80094d4 <_strtol_l.constprop.0+0x90>
 8009478:	782c      	ldrb	r4, [r5, #0]
 800947a:	2601      	movs	r6, #1
 800947c:	1c95      	adds	r5, r2, #2
 800947e:	f033 0210 	bics.w	r2, r3, #16
 8009482:	d109      	bne.n	8009498 <_strtol_l.constprop.0+0x54>
 8009484:	2c30      	cmp	r4, #48	@ 0x30
 8009486:	d12a      	bne.n	80094de <_strtol_l.constprop.0+0x9a>
 8009488:	782a      	ldrb	r2, [r5, #0]
 800948a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800948e:	2a58      	cmp	r2, #88	@ 0x58
 8009490:	d125      	bne.n	80094de <_strtol_l.constprop.0+0x9a>
 8009492:	786c      	ldrb	r4, [r5, #1]
 8009494:	2310      	movs	r3, #16
 8009496:	3502      	adds	r5, #2
 8009498:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800949c:	f10c 3cff 	add.w	ip, ip, #4294967295
 80094a0:	2200      	movs	r2, #0
 80094a2:	fbbc f9f3 	udiv	r9, ip, r3
 80094a6:	4610      	mov	r0, r2
 80094a8:	fb03 ca19 	mls	sl, r3, r9, ip
 80094ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80094b0:	2f09      	cmp	r7, #9
 80094b2:	d81b      	bhi.n	80094ec <_strtol_l.constprop.0+0xa8>
 80094b4:	463c      	mov	r4, r7
 80094b6:	42a3      	cmp	r3, r4
 80094b8:	dd27      	ble.n	800950a <_strtol_l.constprop.0+0xc6>
 80094ba:	1c57      	adds	r7, r2, #1
 80094bc:	d007      	beq.n	80094ce <_strtol_l.constprop.0+0x8a>
 80094be:	4581      	cmp	r9, r0
 80094c0:	d320      	bcc.n	8009504 <_strtol_l.constprop.0+0xc0>
 80094c2:	d101      	bne.n	80094c8 <_strtol_l.constprop.0+0x84>
 80094c4:	45a2      	cmp	sl, r4
 80094c6:	db1d      	blt.n	8009504 <_strtol_l.constprop.0+0xc0>
 80094c8:	fb00 4003 	mla	r0, r0, r3, r4
 80094cc:	2201      	movs	r2, #1
 80094ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094d2:	e7eb      	b.n	80094ac <_strtol_l.constprop.0+0x68>
 80094d4:	2c2b      	cmp	r4, #43	@ 0x2b
 80094d6:	bf04      	itt	eq
 80094d8:	782c      	ldrbeq	r4, [r5, #0]
 80094da:	1c95      	addeq	r5, r2, #2
 80094dc:	e7cf      	b.n	800947e <_strtol_l.constprop.0+0x3a>
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1da      	bne.n	8009498 <_strtol_l.constprop.0+0x54>
 80094e2:	2c30      	cmp	r4, #48	@ 0x30
 80094e4:	bf0c      	ite	eq
 80094e6:	2308      	moveq	r3, #8
 80094e8:	230a      	movne	r3, #10
 80094ea:	e7d5      	b.n	8009498 <_strtol_l.constprop.0+0x54>
 80094ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80094f0:	2f19      	cmp	r7, #25
 80094f2:	d801      	bhi.n	80094f8 <_strtol_l.constprop.0+0xb4>
 80094f4:	3c37      	subs	r4, #55	@ 0x37
 80094f6:	e7de      	b.n	80094b6 <_strtol_l.constprop.0+0x72>
 80094f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80094fc:	2f19      	cmp	r7, #25
 80094fe:	d804      	bhi.n	800950a <_strtol_l.constprop.0+0xc6>
 8009500:	3c57      	subs	r4, #87	@ 0x57
 8009502:	e7d8      	b.n	80094b6 <_strtol_l.constprop.0+0x72>
 8009504:	f04f 32ff 	mov.w	r2, #4294967295
 8009508:	e7e1      	b.n	80094ce <_strtol_l.constprop.0+0x8a>
 800950a:	1c53      	adds	r3, r2, #1
 800950c:	d108      	bne.n	8009520 <_strtol_l.constprop.0+0xdc>
 800950e:	2322      	movs	r3, #34	@ 0x22
 8009510:	f8ce 3000 	str.w	r3, [lr]
 8009514:	4660      	mov	r0, ip
 8009516:	f1b8 0f00 	cmp.w	r8, #0
 800951a:	d0a0      	beq.n	800945e <_strtol_l.constprop.0+0x1a>
 800951c:	1e69      	subs	r1, r5, #1
 800951e:	e006      	b.n	800952e <_strtol_l.constprop.0+0xea>
 8009520:	b106      	cbz	r6, 8009524 <_strtol_l.constprop.0+0xe0>
 8009522:	4240      	negs	r0, r0
 8009524:	f1b8 0f00 	cmp.w	r8, #0
 8009528:	d099      	beq.n	800945e <_strtol_l.constprop.0+0x1a>
 800952a:	2a00      	cmp	r2, #0
 800952c:	d1f6      	bne.n	800951c <_strtol_l.constprop.0+0xd8>
 800952e:	f8c8 1000 	str.w	r1, [r8]
 8009532:	e794      	b.n	800945e <_strtol_l.constprop.0+0x1a>
 8009534:	0800bad1 	.word	0x0800bad1

08009538 <_strtol_r>:
 8009538:	f7ff bf84 	b.w	8009444 <_strtol_l.constprop.0>

0800953c <__ssputs_r>:
 800953c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009540:	688e      	ldr	r6, [r1, #8]
 8009542:	461f      	mov	r7, r3
 8009544:	42be      	cmp	r6, r7
 8009546:	680b      	ldr	r3, [r1, #0]
 8009548:	4682      	mov	sl, r0
 800954a:	460c      	mov	r4, r1
 800954c:	4690      	mov	r8, r2
 800954e:	d82d      	bhi.n	80095ac <__ssputs_r+0x70>
 8009550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009554:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009558:	d026      	beq.n	80095a8 <__ssputs_r+0x6c>
 800955a:	6965      	ldr	r5, [r4, #20]
 800955c:	6909      	ldr	r1, [r1, #16]
 800955e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009562:	eba3 0901 	sub.w	r9, r3, r1
 8009566:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800956a:	1c7b      	adds	r3, r7, #1
 800956c:	444b      	add	r3, r9
 800956e:	106d      	asrs	r5, r5, #1
 8009570:	429d      	cmp	r5, r3
 8009572:	bf38      	it	cc
 8009574:	461d      	movcc	r5, r3
 8009576:	0553      	lsls	r3, r2, #21
 8009578:	d527      	bpl.n	80095ca <__ssputs_r+0x8e>
 800957a:	4629      	mov	r1, r5
 800957c:	f7fe fc1c 	bl	8007db8 <_malloc_r>
 8009580:	4606      	mov	r6, r0
 8009582:	b360      	cbz	r0, 80095de <__ssputs_r+0xa2>
 8009584:	6921      	ldr	r1, [r4, #16]
 8009586:	464a      	mov	r2, r9
 8009588:	f000 fa18 	bl	80099bc <memcpy>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	6126      	str	r6, [r4, #16]
 800959a:	6165      	str	r5, [r4, #20]
 800959c:	444e      	add	r6, r9
 800959e:	eba5 0509 	sub.w	r5, r5, r9
 80095a2:	6026      	str	r6, [r4, #0]
 80095a4:	60a5      	str	r5, [r4, #8]
 80095a6:	463e      	mov	r6, r7
 80095a8:	42be      	cmp	r6, r7
 80095aa:	d900      	bls.n	80095ae <__ssputs_r+0x72>
 80095ac:	463e      	mov	r6, r7
 80095ae:	6820      	ldr	r0, [r4, #0]
 80095b0:	4632      	mov	r2, r6
 80095b2:	4641      	mov	r1, r8
 80095b4:	f000 f9c6 	bl	8009944 <memmove>
 80095b8:	68a3      	ldr	r3, [r4, #8]
 80095ba:	1b9b      	subs	r3, r3, r6
 80095bc:	60a3      	str	r3, [r4, #8]
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	4433      	add	r3, r6
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	2000      	movs	r0, #0
 80095c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ca:	462a      	mov	r2, r5
 80095cc:	f000 fd89 	bl	800a0e2 <_realloc_r>
 80095d0:	4606      	mov	r6, r0
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d1e0      	bne.n	8009598 <__ssputs_r+0x5c>
 80095d6:	6921      	ldr	r1, [r4, #16]
 80095d8:	4650      	mov	r0, sl
 80095da:	f7fe fb79 	bl	8007cd0 <_free_r>
 80095de:	230c      	movs	r3, #12
 80095e0:	f8ca 3000 	str.w	r3, [sl]
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ea:	81a3      	strh	r3, [r4, #12]
 80095ec:	f04f 30ff 	mov.w	r0, #4294967295
 80095f0:	e7e9      	b.n	80095c6 <__ssputs_r+0x8a>
	...

080095f4 <_svfiprintf_r>:
 80095f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	4698      	mov	r8, r3
 80095fa:	898b      	ldrh	r3, [r1, #12]
 80095fc:	061b      	lsls	r3, r3, #24
 80095fe:	b09d      	sub	sp, #116	@ 0x74
 8009600:	4607      	mov	r7, r0
 8009602:	460d      	mov	r5, r1
 8009604:	4614      	mov	r4, r2
 8009606:	d510      	bpl.n	800962a <_svfiprintf_r+0x36>
 8009608:	690b      	ldr	r3, [r1, #16]
 800960a:	b973      	cbnz	r3, 800962a <_svfiprintf_r+0x36>
 800960c:	2140      	movs	r1, #64	@ 0x40
 800960e:	f7fe fbd3 	bl	8007db8 <_malloc_r>
 8009612:	6028      	str	r0, [r5, #0]
 8009614:	6128      	str	r0, [r5, #16]
 8009616:	b930      	cbnz	r0, 8009626 <_svfiprintf_r+0x32>
 8009618:	230c      	movs	r3, #12
 800961a:	603b      	str	r3, [r7, #0]
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	b01d      	add	sp, #116	@ 0x74
 8009622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009626:	2340      	movs	r3, #64	@ 0x40
 8009628:	616b      	str	r3, [r5, #20]
 800962a:	2300      	movs	r3, #0
 800962c:	9309      	str	r3, [sp, #36]	@ 0x24
 800962e:	2320      	movs	r3, #32
 8009630:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009634:	f8cd 800c 	str.w	r8, [sp, #12]
 8009638:	2330      	movs	r3, #48	@ 0x30
 800963a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80097d8 <_svfiprintf_r+0x1e4>
 800963e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009642:	f04f 0901 	mov.w	r9, #1
 8009646:	4623      	mov	r3, r4
 8009648:	469a      	mov	sl, r3
 800964a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800964e:	b10a      	cbz	r2, 8009654 <_svfiprintf_r+0x60>
 8009650:	2a25      	cmp	r2, #37	@ 0x25
 8009652:	d1f9      	bne.n	8009648 <_svfiprintf_r+0x54>
 8009654:	ebba 0b04 	subs.w	fp, sl, r4
 8009658:	d00b      	beq.n	8009672 <_svfiprintf_r+0x7e>
 800965a:	465b      	mov	r3, fp
 800965c:	4622      	mov	r2, r4
 800965e:	4629      	mov	r1, r5
 8009660:	4638      	mov	r0, r7
 8009662:	f7ff ff6b 	bl	800953c <__ssputs_r>
 8009666:	3001      	adds	r0, #1
 8009668:	f000 80a7 	beq.w	80097ba <_svfiprintf_r+0x1c6>
 800966c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800966e:	445a      	add	r2, fp
 8009670:	9209      	str	r2, [sp, #36]	@ 0x24
 8009672:	f89a 3000 	ldrb.w	r3, [sl]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 809f 	beq.w	80097ba <_svfiprintf_r+0x1c6>
 800967c:	2300      	movs	r3, #0
 800967e:	f04f 32ff 	mov.w	r2, #4294967295
 8009682:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009686:	f10a 0a01 	add.w	sl, sl, #1
 800968a:	9304      	str	r3, [sp, #16]
 800968c:	9307      	str	r3, [sp, #28]
 800968e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009692:	931a      	str	r3, [sp, #104]	@ 0x68
 8009694:	4654      	mov	r4, sl
 8009696:	2205      	movs	r2, #5
 8009698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969c:	484e      	ldr	r0, [pc, #312]	@ (80097d8 <_svfiprintf_r+0x1e4>)
 800969e:	f7f6 fd97 	bl	80001d0 <memchr>
 80096a2:	9a04      	ldr	r2, [sp, #16]
 80096a4:	b9d8      	cbnz	r0, 80096de <_svfiprintf_r+0xea>
 80096a6:	06d0      	lsls	r0, r2, #27
 80096a8:	bf44      	itt	mi
 80096aa:	2320      	movmi	r3, #32
 80096ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096b0:	0711      	lsls	r1, r2, #28
 80096b2:	bf44      	itt	mi
 80096b4:	232b      	movmi	r3, #43	@ 0x2b
 80096b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096ba:	f89a 3000 	ldrb.w	r3, [sl]
 80096be:	2b2a      	cmp	r3, #42	@ 0x2a
 80096c0:	d015      	beq.n	80096ee <_svfiprintf_r+0xfa>
 80096c2:	9a07      	ldr	r2, [sp, #28]
 80096c4:	4654      	mov	r4, sl
 80096c6:	2000      	movs	r0, #0
 80096c8:	f04f 0c0a 	mov.w	ip, #10
 80096cc:	4621      	mov	r1, r4
 80096ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096d2:	3b30      	subs	r3, #48	@ 0x30
 80096d4:	2b09      	cmp	r3, #9
 80096d6:	d94b      	bls.n	8009770 <_svfiprintf_r+0x17c>
 80096d8:	b1b0      	cbz	r0, 8009708 <_svfiprintf_r+0x114>
 80096da:	9207      	str	r2, [sp, #28]
 80096dc:	e014      	b.n	8009708 <_svfiprintf_r+0x114>
 80096de:	eba0 0308 	sub.w	r3, r0, r8
 80096e2:	fa09 f303 	lsl.w	r3, r9, r3
 80096e6:	4313      	orrs	r3, r2
 80096e8:	9304      	str	r3, [sp, #16]
 80096ea:	46a2      	mov	sl, r4
 80096ec:	e7d2      	b.n	8009694 <_svfiprintf_r+0xa0>
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	1d19      	adds	r1, r3, #4
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	9103      	str	r1, [sp, #12]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	bfbb      	ittet	lt
 80096fa:	425b      	neglt	r3, r3
 80096fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009700:	9307      	strge	r3, [sp, #28]
 8009702:	9307      	strlt	r3, [sp, #28]
 8009704:	bfb8      	it	lt
 8009706:	9204      	strlt	r2, [sp, #16]
 8009708:	7823      	ldrb	r3, [r4, #0]
 800970a:	2b2e      	cmp	r3, #46	@ 0x2e
 800970c:	d10a      	bne.n	8009724 <_svfiprintf_r+0x130>
 800970e:	7863      	ldrb	r3, [r4, #1]
 8009710:	2b2a      	cmp	r3, #42	@ 0x2a
 8009712:	d132      	bne.n	800977a <_svfiprintf_r+0x186>
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	1d1a      	adds	r2, r3, #4
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	9203      	str	r2, [sp, #12]
 800971c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009720:	3402      	adds	r4, #2
 8009722:	9305      	str	r3, [sp, #20]
 8009724:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80097e8 <_svfiprintf_r+0x1f4>
 8009728:	7821      	ldrb	r1, [r4, #0]
 800972a:	2203      	movs	r2, #3
 800972c:	4650      	mov	r0, sl
 800972e:	f7f6 fd4f 	bl	80001d0 <memchr>
 8009732:	b138      	cbz	r0, 8009744 <_svfiprintf_r+0x150>
 8009734:	9b04      	ldr	r3, [sp, #16]
 8009736:	eba0 000a 	sub.w	r0, r0, sl
 800973a:	2240      	movs	r2, #64	@ 0x40
 800973c:	4082      	lsls	r2, r0
 800973e:	4313      	orrs	r3, r2
 8009740:	3401      	adds	r4, #1
 8009742:	9304      	str	r3, [sp, #16]
 8009744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009748:	4824      	ldr	r0, [pc, #144]	@ (80097dc <_svfiprintf_r+0x1e8>)
 800974a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800974e:	2206      	movs	r2, #6
 8009750:	f7f6 fd3e 	bl	80001d0 <memchr>
 8009754:	2800      	cmp	r0, #0
 8009756:	d036      	beq.n	80097c6 <_svfiprintf_r+0x1d2>
 8009758:	4b21      	ldr	r3, [pc, #132]	@ (80097e0 <_svfiprintf_r+0x1ec>)
 800975a:	bb1b      	cbnz	r3, 80097a4 <_svfiprintf_r+0x1b0>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	3307      	adds	r3, #7
 8009760:	f023 0307 	bic.w	r3, r3, #7
 8009764:	3308      	adds	r3, #8
 8009766:	9303      	str	r3, [sp, #12]
 8009768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800976a:	4433      	add	r3, r6
 800976c:	9309      	str	r3, [sp, #36]	@ 0x24
 800976e:	e76a      	b.n	8009646 <_svfiprintf_r+0x52>
 8009770:	fb0c 3202 	mla	r2, ip, r2, r3
 8009774:	460c      	mov	r4, r1
 8009776:	2001      	movs	r0, #1
 8009778:	e7a8      	b.n	80096cc <_svfiprintf_r+0xd8>
 800977a:	2300      	movs	r3, #0
 800977c:	3401      	adds	r4, #1
 800977e:	9305      	str	r3, [sp, #20]
 8009780:	4619      	mov	r1, r3
 8009782:	f04f 0c0a 	mov.w	ip, #10
 8009786:	4620      	mov	r0, r4
 8009788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800978c:	3a30      	subs	r2, #48	@ 0x30
 800978e:	2a09      	cmp	r2, #9
 8009790:	d903      	bls.n	800979a <_svfiprintf_r+0x1a6>
 8009792:	2b00      	cmp	r3, #0
 8009794:	d0c6      	beq.n	8009724 <_svfiprintf_r+0x130>
 8009796:	9105      	str	r1, [sp, #20]
 8009798:	e7c4      	b.n	8009724 <_svfiprintf_r+0x130>
 800979a:	fb0c 2101 	mla	r1, ip, r1, r2
 800979e:	4604      	mov	r4, r0
 80097a0:	2301      	movs	r3, #1
 80097a2:	e7f0      	b.n	8009786 <_svfiprintf_r+0x192>
 80097a4:	ab03      	add	r3, sp, #12
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	462a      	mov	r2, r5
 80097aa:	4b0e      	ldr	r3, [pc, #56]	@ (80097e4 <_svfiprintf_r+0x1f0>)
 80097ac:	a904      	add	r1, sp, #16
 80097ae:	4638      	mov	r0, r7
 80097b0:	f7fc fcc8 	bl	8006144 <_printf_float>
 80097b4:	1c42      	adds	r2, r0, #1
 80097b6:	4606      	mov	r6, r0
 80097b8:	d1d6      	bne.n	8009768 <_svfiprintf_r+0x174>
 80097ba:	89ab      	ldrh	r3, [r5, #12]
 80097bc:	065b      	lsls	r3, r3, #25
 80097be:	f53f af2d 	bmi.w	800961c <_svfiprintf_r+0x28>
 80097c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097c4:	e72c      	b.n	8009620 <_svfiprintf_r+0x2c>
 80097c6:	ab03      	add	r3, sp, #12
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	462a      	mov	r2, r5
 80097cc:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <_svfiprintf_r+0x1f0>)
 80097ce:	a904      	add	r1, sp, #16
 80097d0:	4638      	mov	r0, r7
 80097d2:	f7fc ff4f 	bl	8006674 <_printf_i>
 80097d6:	e7ed      	b.n	80097b4 <_svfiprintf_r+0x1c0>
 80097d8:	0800bbd1 	.word	0x0800bbd1
 80097dc:	0800bbdb 	.word	0x0800bbdb
 80097e0:	08006145 	.word	0x08006145
 80097e4:	0800953d 	.word	0x0800953d
 80097e8:	0800bbd7 	.word	0x0800bbd7

080097ec <__sflush_r>:
 80097ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f4:	0716      	lsls	r6, r2, #28
 80097f6:	4605      	mov	r5, r0
 80097f8:	460c      	mov	r4, r1
 80097fa:	d454      	bmi.n	80098a6 <__sflush_r+0xba>
 80097fc:	684b      	ldr	r3, [r1, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dc02      	bgt.n	8009808 <__sflush_r+0x1c>
 8009802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009804:	2b00      	cmp	r3, #0
 8009806:	dd48      	ble.n	800989a <__sflush_r+0xae>
 8009808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800980a:	2e00      	cmp	r6, #0
 800980c:	d045      	beq.n	800989a <__sflush_r+0xae>
 800980e:	2300      	movs	r3, #0
 8009810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009814:	682f      	ldr	r7, [r5, #0]
 8009816:	6a21      	ldr	r1, [r4, #32]
 8009818:	602b      	str	r3, [r5, #0]
 800981a:	d030      	beq.n	800987e <__sflush_r+0x92>
 800981c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	0759      	lsls	r1, r3, #29
 8009822:	d505      	bpl.n	8009830 <__sflush_r+0x44>
 8009824:	6863      	ldr	r3, [r4, #4]
 8009826:	1ad2      	subs	r2, r2, r3
 8009828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800982a:	b10b      	cbz	r3, 8009830 <__sflush_r+0x44>
 800982c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	2300      	movs	r3, #0
 8009832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009834:	6a21      	ldr	r1, [r4, #32]
 8009836:	4628      	mov	r0, r5
 8009838:	47b0      	blx	r6
 800983a:	1c43      	adds	r3, r0, #1
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	d106      	bne.n	800984e <__sflush_r+0x62>
 8009840:	6829      	ldr	r1, [r5, #0]
 8009842:	291d      	cmp	r1, #29
 8009844:	d82b      	bhi.n	800989e <__sflush_r+0xb2>
 8009846:	4a2a      	ldr	r2, [pc, #168]	@ (80098f0 <__sflush_r+0x104>)
 8009848:	410a      	asrs	r2, r1
 800984a:	07d6      	lsls	r6, r2, #31
 800984c:	d427      	bmi.n	800989e <__sflush_r+0xb2>
 800984e:	2200      	movs	r2, #0
 8009850:	6062      	str	r2, [r4, #4]
 8009852:	04d9      	lsls	r1, r3, #19
 8009854:	6922      	ldr	r2, [r4, #16]
 8009856:	6022      	str	r2, [r4, #0]
 8009858:	d504      	bpl.n	8009864 <__sflush_r+0x78>
 800985a:	1c42      	adds	r2, r0, #1
 800985c:	d101      	bne.n	8009862 <__sflush_r+0x76>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	b903      	cbnz	r3, 8009864 <__sflush_r+0x78>
 8009862:	6560      	str	r0, [r4, #84]	@ 0x54
 8009864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009866:	602f      	str	r7, [r5, #0]
 8009868:	b1b9      	cbz	r1, 800989a <__sflush_r+0xae>
 800986a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800986e:	4299      	cmp	r1, r3
 8009870:	d002      	beq.n	8009878 <__sflush_r+0x8c>
 8009872:	4628      	mov	r0, r5
 8009874:	f7fe fa2c 	bl	8007cd0 <_free_r>
 8009878:	2300      	movs	r3, #0
 800987a:	6363      	str	r3, [r4, #52]	@ 0x34
 800987c:	e00d      	b.n	800989a <__sflush_r+0xae>
 800987e:	2301      	movs	r3, #1
 8009880:	4628      	mov	r0, r5
 8009882:	47b0      	blx	r6
 8009884:	4602      	mov	r2, r0
 8009886:	1c50      	adds	r0, r2, #1
 8009888:	d1c9      	bne.n	800981e <__sflush_r+0x32>
 800988a:	682b      	ldr	r3, [r5, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d0c6      	beq.n	800981e <__sflush_r+0x32>
 8009890:	2b1d      	cmp	r3, #29
 8009892:	d001      	beq.n	8009898 <__sflush_r+0xac>
 8009894:	2b16      	cmp	r3, #22
 8009896:	d11e      	bne.n	80098d6 <__sflush_r+0xea>
 8009898:	602f      	str	r7, [r5, #0]
 800989a:	2000      	movs	r0, #0
 800989c:	e022      	b.n	80098e4 <__sflush_r+0xf8>
 800989e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098a2:	b21b      	sxth	r3, r3
 80098a4:	e01b      	b.n	80098de <__sflush_r+0xf2>
 80098a6:	690f      	ldr	r7, [r1, #16]
 80098a8:	2f00      	cmp	r7, #0
 80098aa:	d0f6      	beq.n	800989a <__sflush_r+0xae>
 80098ac:	0793      	lsls	r3, r2, #30
 80098ae:	680e      	ldr	r6, [r1, #0]
 80098b0:	bf08      	it	eq
 80098b2:	694b      	ldreq	r3, [r1, #20]
 80098b4:	600f      	str	r7, [r1, #0]
 80098b6:	bf18      	it	ne
 80098b8:	2300      	movne	r3, #0
 80098ba:	eba6 0807 	sub.w	r8, r6, r7
 80098be:	608b      	str	r3, [r1, #8]
 80098c0:	f1b8 0f00 	cmp.w	r8, #0
 80098c4:	dde9      	ble.n	800989a <__sflush_r+0xae>
 80098c6:	6a21      	ldr	r1, [r4, #32]
 80098c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80098ca:	4643      	mov	r3, r8
 80098cc:	463a      	mov	r2, r7
 80098ce:	4628      	mov	r0, r5
 80098d0:	47b0      	blx	r6
 80098d2:	2800      	cmp	r0, #0
 80098d4:	dc08      	bgt.n	80098e8 <__sflush_r+0xfc>
 80098d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098de:	81a3      	strh	r3, [r4, #12]
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295
 80098e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e8:	4407      	add	r7, r0
 80098ea:	eba8 0800 	sub.w	r8, r8, r0
 80098ee:	e7e7      	b.n	80098c0 <__sflush_r+0xd4>
 80098f0:	dfbffffe 	.word	0xdfbffffe

080098f4 <_fflush_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	690b      	ldr	r3, [r1, #16]
 80098f8:	4605      	mov	r5, r0
 80098fa:	460c      	mov	r4, r1
 80098fc:	b913      	cbnz	r3, 8009904 <_fflush_r+0x10>
 80098fe:	2500      	movs	r5, #0
 8009900:	4628      	mov	r0, r5
 8009902:	bd38      	pop	{r3, r4, r5, pc}
 8009904:	b118      	cbz	r0, 800990e <_fflush_r+0x1a>
 8009906:	6a03      	ldr	r3, [r0, #32]
 8009908:	b90b      	cbnz	r3, 800990e <_fflush_r+0x1a>
 800990a:	f7fd fa73 	bl	8006df4 <__sinit>
 800990e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0f3      	beq.n	80098fe <_fflush_r+0xa>
 8009916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009918:	07d0      	lsls	r0, r2, #31
 800991a:	d404      	bmi.n	8009926 <_fflush_r+0x32>
 800991c:	0599      	lsls	r1, r3, #22
 800991e:	d402      	bmi.n	8009926 <_fflush_r+0x32>
 8009920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009922:	f7fd fb7e 	bl	8007022 <__retarget_lock_acquire_recursive>
 8009926:	4628      	mov	r0, r5
 8009928:	4621      	mov	r1, r4
 800992a:	f7ff ff5f 	bl	80097ec <__sflush_r>
 800992e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009930:	07da      	lsls	r2, r3, #31
 8009932:	4605      	mov	r5, r0
 8009934:	d4e4      	bmi.n	8009900 <_fflush_r+0xc>
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	059b      	lsls	r3, r3, #22
 800993a:	d4e1      	bmi.n	8009900 <_fflush_r+0xc>
 800993c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800993e:	f7fd fb71 	bl	8007024 <__retarget_lock_release_recursive>
 8009942:	e7dd      	b.n	8009900 <_fflush_r+0xc>

08009944 <memmove>:
 8009944:	4288      	cmp	r0, r1
 8009946:	b510      	push	{r4, lr}
 8009948:	eb01 0402 	add.w	r4, r1, r2
 800994c:	d902      	bls.n	8009954 <memmove+0x10>
 800994e:	4284      	cmp	r4, r0
 8009950:	4623      	mov	r3, r4
 8009952:	d807      	bhi.n	8009964 <memmove+0x20>
 8009954:	1e43      	subs	r3, r0, #1
 8009956:	42a1      	cmp	r1, r4
 8009958:	d008      	beq.n	800996c <memmove+0x28>
 800995a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800995e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009962:	e7f8      	b.n	8009956 <memmove+0x12>
 8009964:	4402      	add	r2, r0
 8009966:	4601      	mov	r1, r0
 8009968:	428a      	cmp	r2, r1
 800996a:	d100      	bne.n	800996e <memmove+0x2a>
 800996c:	bd10      	pop	{r4, pc}
 800996e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009976:	e7f7      	b.n	8009968 <memmove+0x24>

08009978 <strncmp>:
 8009978:	b510      	push	{r4, lr}
 800997a:	b16a      	cbz	r2, 8009998 <strncmp+0x20>
 800997c:	3901      	subs	r1, #1
 800997e:	1884      	adds	r4, r0, r2
 8009980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009984:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009988:	429a      	cmp	r2, r3
 800998a:	d103      	bne.n	8009994 <strncmp+0x1c>
 800998c:	42a0      	cmp	r0, r4
 800998e:	d001      	beq.n	8009994 <strncmp+0x1c>
 8009990:	2a00      	cmp	r2, #0
 8009992:	d1f5      	bne.n	8009980 <strncmp+0x8>
 8009994:	1ad0      	subs	r0, r2, r3
 8009996:	bd10      	pop	{r4, pc}
 8009998:	4610      	mov	r0, r2
 800999a:	e7fc      	b.n	8009996 <strncmp+0x1e>

0800999c <_sbrk_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4d06      	ldr	r5, [pc, #24]	@ (80099b8 <_sbrk_r+0x1c>)
 80099a0:	2300      	movs	r3, #0
 80099a2:	4604      	mov	r4, r0
 80099a4:	4608      	mov	r0, r1
 80099a6:	602b      	str	r3, [r5, #0]
 80099a8:	f7f8 f9a6 	bl	8001cf8 <_sbrk>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_sbrk_r+0x1a>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_sbrk_r+0x1a>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	200008f8 	.word	0x200008f8

080099bc <memcpy>:
 80099bc:	440a      	add	r2, r1
 80099be:	4291      	cmp	r1, r2
 80099c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80099c4:	d100      	bne.n	80099c8 <memcpy+0xc>
 80099c6:	4770      	bx	lr
 80099c8:	b510      	push	{r4, lr}
 80099ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099d2:	4291      	cmp	r1, r2
 80099d4:	d1f9      	bne.n	80099ca <memcpy+0xe>
 80099d6:	bd10      	pop	{r4, pc}

080099d8 <nan>:
 80099d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80099e0 <nan+0x8>
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	00000000 	.word	0x00000000
 80099e4:	7ff80000 	.word	0x7ff80000

080099e8 <__assert_func>:
 80099e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099ea:	4614      	mov	r4, r2
 80099ec:	461a      	mov	r2, r3
 80099ee:	4b09      	ldr	r3, [pc, #36]	@ (8009a14 <__assert_func+0x2c>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4605      	mov	r5, r0
 80099f4:	68d8      	ldr	r0, [r3, #12]
 80099f6:	b954      	cbnz	r4, 8009a0e <__assert_func+0x26>
 80099f8:	4b07      	ldr	r3, [pc, #28]	@ (8009a18 <__assert_func+0x30>)
 80099fa:	461c      	mov	r4, r3
 80099fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a00:	9100      	str	r1, [sp, #0]
 8009a02:	462b      	mov	r3, r5
 8009a04:	4905      	ldr	r1, [pc, #20]	@ (8009a1c <__assert_func+0x34>)
 8009a06:	f000 fba7 	bl	800a158 <fiprintf>
 8009a0a:	f000 fbb7 	bl	800a17c <abort>
 8009a0e:	4b04      	ldr	r3, [pc, #16]	@ (8009a20 <__assert_func+0x38>)
 8009a10:	e7f4      	b.n	80099fc <__assert_func+0x14>
 8009a12:	bf00      	nop
 8009a14:	20000018 	.word	0x20000018
 8009a18:	0800bc25 	.word	0x0800bc25
 8009a1c:	0800bbf7 	.word	0x0800bbf7
 8009a20:	0800bbea 	.word	0x0800bbea

08009a24 <_calloc_r>:
 8009a24:	b570      	push	{r4, r5, r6, lr}
 8009a26:	fba1 5402 	umull	r5, r4, r1, r2
 8009a2a:	b93c      	cbnz	r4, 8009a3c <_calloc_r+0x18>
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	f7fe f9c3 	bl	8007db8 <_malloc_r>
 8009a32:	4606      	mov	r6, r0
 8009a34:	b928      	cbnz	r0, 8009a42 <_calloc_r+0x1e>
 8009a36:	2600      	movs	r6, #0
 8009a38:	4630      	mov	r0, r6
 8009a3a:	bd70      	pop	{r4, r5, r6, pc}
 8009a3c:	220c      	movs	r2, #12
 8009a3e:	6002      	str	r2, [r0, #0]
 8009a40:	e7f9      	b.n	8009a36 <_calloc_r+0x12>
 8009a42:	462a      	mov	r2, r5
 8009a44:	4621      	mov	r1, r4
 8009a46:	f7fd fa6e 	bl	8006f26 <memset>
 8009a4a:	e7f5      	b.n	8009a38 <_calloc_r+0x14>

08009a4c <rshift>:
 8009a4c:	6903      	ldr	r3, [r0, #16]
 8009a4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a5a:	f100 0414 	add.w	r4, r0, #20
 8009a5e:	dd45      	ble.n	8009aec <rshift+0xa0>
 8009a60:	f011 011f 	ands.w	r1, r1, #31
 8009a64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a6c:	d10c      	bne.n	8009a88 <rshift+0x3c>
 8009a6e:	f100 0710 	add.w	r7, r0, #16
 8009a72:	4629      	mov	r1, r5
 8009a74:	42b1      	cmp	r1, r6
 8009a76:	d334      	bcc.n	8009ae2 <rshift+0x96>
 8009a78:	1a9b      	subs	r3, r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	1eea      	subs	r2, r5, #3
 8009a7e:	4296      	cmp	r6, r2
 8009a80:	bf38      	it	cc
 8009a82:	2300      	movcc	r3, #0
 8009a84:	4423      	add	r3, r4
 8009a86:	e015      	b.n	8009ab4 <rshift+0x68>
 8009a88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a8c:	f1c1 0820 	rsb	r8, r1, #32
 8009a90:	40cf      	lsrs	r7, r1
 8009a92:	f105 0e04 	add.w	lr, r5, #4
 8009a96:	46a1      	mov	r9, r4
 8009a98:	4576      	cmp	r6, lr
 8009a9a:	46f4      	mov	ip, lr
 8009a9c:	d815      	bhi.n	8009aca <rshift+0x7e>
 8009a9e:	1a9a      	subs	r2, r3, r2
 8009aa0:	0092      	lsls	r2, r2, #2
 8009aa2:	3a04      	subs	r2, #4
 8009aa4:	3501      	adds	r5, #1
 8009aa6:	42ae      	cmp	r6, r5
 8009aa8:	bf38      	it	cc
 8009aaa:	2200      	movcc	r2, #0
 8009aac:	18a3      	adds	r3, r4, r2
 8009aae:	50a7      	str	r7, [r4, r2]
 8009ab0:	b107      	cbz	r7, 8009ab4 <rshift+0x68>
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	1b1a      	subs	r2, r3, r4
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009abc:	bf08      	it	eq
 8009abe:	2300      	moveq	r3, #0
 8009ac0:	6102      	str	r2, [r0, #16]
 8009ac2:	bf08      	it	eq
 8009ac4:	6143      	streq	r3, [r0, #20]
 8009ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aca:	f8dc c000 	ldr.w	ip, [ip]
 8009ace:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ad2:	ea4c 0707 	orr.w	r7, ip, r7
 8009ad6:	f849 7b04 	str.w	r7, [r9], #4
 8009ada:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ade:	40cf      	lsrs	r7, r1
 8009ae0:	e7da      	b.n	8009a98 <rshift+0x4c>
 8009ae2:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ae6:	f847 cf04 	str.w	ip, [r7, #4]!
 8009aea:	e7c3      	b.n	8009a74 <rshift+0x28>
 8009aec:	4623      	mov	r3, r4
 8009aee:	e7e1      	b.n	8009ab4 <rshift+0x68>

08009af0 <__hexdig_fun>:
 8009af0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009af4:	2b09      	cmp	r3, #9
 8009af6:	d802      	bhi.n	8009afe <__hexdig_fun+0xe>
 8009af8:	3820      	subs	r0, #32
 8009afa:	b2c0      	uxtb	r0, r0
 8009afc:	4770      	bx	lr
 8009afe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009b02:	2b05      	cmp	r3, #5
 8009b04:	d801      	bhi.n	8009b0a <__hexdig_fun+0x1a>
 8009b06:	3847      	subs	r0, #71	@ 0x47
 8009b08:	e7f7      	b.n	8009afa <__hexdig_fun+0xa>
 8009b0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009b0e:	2b05      	cmp	r3, #5
 8009b10:	d801      	bhi.n	8009b16 <__hexdig_fun+0x26>
 8009b12:	3827      	subs	r0, #39	@ 0x27
 8009b14:	e7f1      	b.n	8009afa <__hexdig_fun+0xa>
 8009b16:	2000      	movs	r0, #0
 8009b18:	4770      	bx	lr
	...

08009b1c <__gethex>:
 8009b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	b085      	sub	sp, #20
 8009b22:	468a      	mov	sl, r1
 8009b24:	9302      	str	r3, [sp, #8]
 8009b26:	680b      	ldr	r3, [r1, #0]
 8009b28:	9001      	str	r0, [sp, #4]
 8009b2a:	4690      	mov	r8, r2
 8009b2c:	1c9c      	adds	r4, r3, #2
 8009b2e:	46a1      	mov	r9, r4
 8009b30:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009b34:	2830      	cmp	r0, #48	@ 0x30
 8009b36:	d0fa      	beq.n	8009b2e <__gethex+0x12>
 8009b38:	eba9 0303 	sub.w	r3, r9, r3
 8009b3c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009b40:	f7ff ffd6 	bl	8009af0 <__hexdig_fun>
 8009b44:	4605      	mov	r5, r0
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d168      	bne.n	8009c1c <__gethex+0x100>
 8009b4a:	49a0      	ldr	r1, [pc, #640]	@ (8009dcc <__gethex+0x2b0>)
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	4648      	mov	r0, r9
 8009b50:	f7ff ff12 	bl	8009978 <strncmp>
 8009b54:	4607      	mov	r7, r0
 8009b56:	2800      	cmp	r0, #0
 8009b58:	d167      	bne.n	8009c2a <__gethex+0x10e>
 8009b5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009b5e:	4626      	mov	r6, r4
 8009b60:	f7ff ffc6 	bl	8009af0 <__hexdig_fun>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d062      	beq.n	8009c2e <__gethex+0x112>
 8009b68:	4623      	mov	r3, r4
 8009b6a:	7818      	ldrb	r0, [r3, #0]
 8009b6c:	2830      	cmp	r0, #48	@ 0x30
 8009b6e:	4699      	mov	r9, r3
 8009b70:	f103 0301 	add.w	r3, r3, #1
 8009b74:	d0f9      	beq.n	8009b6a <__gethex+0x4e>
 8009b76:	f7ff ffbb 	bl	8009af0 <__hexdig_fun>
 8009b7a:	fab0 f580 	clz	r5, r0
 8009b7e:	096d      	lsrs	r5, r5, #5
 8009b80:	f04f 0b01 	mov.w	fp, #1
 8009b84:	464a      	mov	r2, r9
 8009b86:	4616      	mov	r6, r2
 8009b88:	3201      	adds	r2, #1
 8009b8a:	7830      	ldrb	r0, [r6, #0]
 8009b8c:	f7ff ffb0 	bl	8009af0 <__hexdig_fun>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d1f8      	bne.n	8009b86 <__gethex+0x6a>
 8009b94:	498d      	ldr	r1, [pc, #564]	@ (8009dcc <__gethex+0x2b0>)
 8009b96:	2201      	movs	r2, #1
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f7ff feed 	bl	8009978 <strncmp>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d13f      	bne.n	8009c22 <__gethex+0x106>
 8009ba2:	b944      	cbnz	r4, 8009bb6 <__gethex+0x9a>
 8009ba4:	1c74      	adds	r4, r6, #1
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	4616      	mov	r6, r2
 8009baa:	3201      	adds	r2, #1
 8009bac:	7830      	ldrb	r0, [r6, #0]
 8009bae:	f7ff ff9f 	bl	8009af0 <__hexdig_fun>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d1f8      	bne.n	8009ba8 <__gethex+0x8c>
 8009bb6:	1ba4      	subs	r4, r4, r6
 8009bb8:	00a7      	lsls	r7, r4, #2
 8009bba:	7833      	ldrb	r3, [r6, #0]
 8009bbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009bc0:	2b50      	cmp	r3, #80	@ 0x50
 8009bc2:	d13e      	bne.n	8009c42 <__gethex+0x126>
 8009bc4:	7873      	ldrb	r3, [r6, #1]
 8009bc6:	2b2b      	cmp	r3, #43	@ 0x2b
 8009bc8:	d033      	beq.n	8009c32 <__gethex+0x116>
 8009bca:	2b2d      	cmp	r3, #45	@ 0x2d
 8009bcc:	d034      	beq.n	8009c38 <__gethex+0x11c>
 8009bce:	1c71      	adds	r1, r6, #1
 8009bd0:	2400      	movs	r4, #0
 8009bd2:	7808      	ldrb	r0, [r1, #0]
 8009bd4:	f7ff ff8c 	bl	8009af0 <__hexdig_fun>
 8009bd8:	1e43      	subs	r3, r0, #1
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b18      	cmp	r3, #24
 8009bde:	d830      	bhi.n	8009c42 <__gethex+0x126>
 8009be0:	f1a0 0210 	sub.w	r2, r0, #16
 8009be4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009be8:	f7ff ff82 	bl	8009af0 <__hexdig_fun>
 8009bec:	f100 3cff 	add.w	ip, r0, #4294967295
 8009bf0:	fa5f fc8c 	uxtb.w	ip, ip
 8009bf4:	f1bc 0f18 	cmp.w	ip, #24
 8009bf8:	f04f 030a 	mov.w	r3, #10
 8009bfc:	d91e      	bls.n	8009c3c <__gethex+0x120>
 8009bfe:	b104      	cbz	r4, 8009c02 <__gethex+0xe6>
 8009c00:	4252      	negs	r2, r2
 8009c02:	4417      	add	r7, r2
 8009c04:	f8ca 1000 	str.w	r1, [sl]
 8009c08:	b1ed      	cbz	r5, 8009c46 <__gethex+0x12a>
 8009c0a:	f1bb 0f00 	cmp.w	fp, #0
 8009c0e:	bf0c      	ite	eq
 8009c10:	2506      	moveq	r5, #6
 8009c12:	2500      	movne	r5, #0
 8009c14:	4628      	mov	r0, r5
 8009c16:	b005      	add	sp, #20
 8009c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1c:	2500      	movs	r5, #0
 8009c1e:	462c      	mov	r4, r5
 8009c20:	e7b0      	b.n	8009b84 <__gethex+0x68>
 8009c22:	2c00      	cmp	r4, #0
 8009c24:	d1c7      	bne.n	8009bb6 <__gethex+0x9a>
 8009c26:	4627      	mov	r7, r4
 8009c28:	e7c7      	b.n	8009bba <__gethex+0x9e>
 8009c2a:	464e      	mov	r6, r9
 8009c2c:	462f      	mov	r7, r5
 8009c2e:	2501      	movs	r5, #1
 8009c30:	e7c3      	b.n	8009bba <__gethex+0x9e>
 8009c32:	2400      	movs	r4, #0
 8009c34:	1cb1      	adds	r1, r6, #2
 8009c36:	e7cc      	b.n	8009bd2 <__gethex+0xb6>
 8009c38:	2401      	movs	r4, #1
 8009c3a:	e7fb      	b.n	8009c34 <__gethex+0x118>
 8009c3c:	fb03 0002 	mla	r0, r3, r2, r0
 8009c40:	e7ce      	b.n	8009be0 <__gethex+0xc4>
 8009c42:	4631      	mov	r1, r6
 8009c44:	e7de      	b.n	8009c04 <__gethex+0xe8>
 8009c46:	eba6 0309 	sub.w	r3, r6, r9
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	2b07      	cmp	r3, #7
 8009c50:	dc0a      	bgt.n	8009c68 <__gethex+0x14c>
 8009c52:	9801      	ldr	r0, [sp, #4]
 8009c54:	f7fe f93c 	bl	8007ed0 <_Balloc>
 8009c58:	4604      	mov	r4, r0
 8009c5a:	b940      	cbnz	r0, 8009c6e <__gethex+0x152>
 8009c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8009dd0 <__gethex+0x2b4>)
 8009c5e:	4602      	mov	r2, r0
 8009c60:	21e4      	movs	r1, #228	@ 0xe4
 8009c62:	485c      	ldr	r0, [pc, #368]	@ (8009dd4 <__gethex+0x2b8>)
 8009c64:	f7ff fec0 	bl	80099e8 <__assert_func>
 8009c68:	3101      	adds	r1, #1
 8009c6a:	105b      	asrs	r3, r3, #1
 8009c6c:	e7ef      	b.n	8009c4e <__gethex+0x132>
 8009c6e:	f100 0a14 	add.w	sl, r0, #20
 8009c72:	2300      	movs	r3, #0
 8009c74:	4655      	mov	r5, sl
 8009c76:	469b      	mov	fp, r3
 8009c78:	45b1      	cmp	r9, r6
 8009c7a:	d337      	bcc.n	8009cec <__gethex+0x1d0>
 8009c7c:	f845 bb04 	str.w	fp, [r5], #4
 8009c80:	eba5 050a 	sub.w	r5, r5, sl
 8009c84:	10ad      	asrs	r5, r5, #2
 8009c86:	6125      	str	r5, [r4, #16]
 8009c88:	4658      	mov	r0, fp
 8009c8a:	f7fe fa13 	bl	80080b4 <__hi0bits>
 8009c8e:	016d      	lsls	r5, r5, #5
 8009c90:	f8d8 6000 	ldr.w	r6, [r8]
 8009c94:	1a2d      	subs	r5, r5, r0
 8009c96:	42b5      	cmp	r5, r6
 8009c98:	dd54      	ble.n	8009d44 <__gethex+0x228>
 8009c9a:	1bad      	subs	r5, r5, r6
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7fe fda7 	bl	80087f2 <__any_on>
 8009ca4:	4681      	mov	r9, r0
 8009ca6:	b178      	cbz	r0, 8009cc8 <__gethex+0x1ac>
 8009ca8:	1e6b      	subs	r3, r5, #1
 8009caa:	1159      	asrs	r1, r3, #5
 8009cac:	f003 021f 	and.w	r2, r3, #31
 8009cb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009cb4:	f04f 0901 	mov.w	r9, #1
 8009cb8:	fa09 f202 	lsl.w	r2, r9, r2
 8009cbc:	420a      	tst	r2, r1
 8009cbe:	d003      	beq.n	8009cc8 <__gethex+0x1ac>
 8009cc0:	454b      	cmp	r3, r9
 8009cc2:	dc36      	bgt.n	8009d32 <__gethex+0x216>
 8009cc4:	f04f 0902 	mov.w	r9, #2
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f7ff febe 	bl	8009a4c <rshift>
 8009cd0:	442f      	add	r7, r5
 8009cd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cd6:	42bb      	cmp	r3, r7
 8009cd8:	da42      	bge.n	8009d60 <__gethex+0x244>
 8009cda:	9801      	ldr	r0, [sp, #4]
 8009cdc:	4621      	mov	r1, r4
 8009cde:	f7fe f937 	bl	8007f50 <_Bfree>
 8009ce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	25a3      	movs	r5, #163	@ 0xa3
 8009cea:	e793      	b.n	8009c14 <__gethex+0xf8>
 8009cec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009cf0:	2a2e      	cmp	r2, #46	@ 0x2e
 8009cf2:	d012      	beq.n	8009d1a <__gethex+0x1fe>
 8009cf4:	2b20      	cmp	r3, #32
 8009cf6:	d104      	bne.n	8009d02 <__gethex+0x1e6>
 8009cf8:	f845 bb04 	str.w	fp, [r5], #4
 8009cfc:	f04f 0b00 	mov.w	fp, #0
 8009d00:	465b      	mov	r3, fp
 8009d02:	7830      	ldrb	r0, [r6, #0]
 8009d04:	9303      	str	r3, [sp, #12]
 8009d06:	f7ff fef3 	bl	8009af0 <__hexdig_fun>
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	f000 000f 	and.w	r0, r0, #15
 8009d10:	4098      	lsls	r0, r3
 8009d12:	ea4b 0b00 	orr.w	fp, fp, r0
 8009d16:	3304      	adds	r3, #4
 8009d18:	e7ae      	b.n	8009c78 <__gethex+0x15c>
 8009d1a:	45b1      	cmp	r9, r6
 8009d1c:	d8ea      	bhi.n	8009cf4 <__gethex+0x1d8>
 8009d1e:	492b      	ldr	r1, [pc, #172]	@ (8009dcc <__gethex+0x2b0>)
 8009d20:	9303      	str	r3, [sp, #12]
 8009d22:	2201      	movs	r2, #1
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7ff fe27 	bl	8009978 <strncmp>
 8009d2a:	9b03      	ldr	r3, [sp, #12]
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d1e1      	bne.n	8009cf4 <__gethex+0x1d8>
 8009d30:	e7a2      	b.n	8009c78 <__gethex+0x15c>
 8009d32:	1ea9      	subs	r1, r5, #2
 8009d34:	4620      	mov	r0, r4
 8009d36:	f7fe fd5c 	bl	80087f2 <__any_on>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d0c2      	beq.n	8009cc4 <__gethex+0x1a8>
 8009d3e:	f04f 0903 	mov.w	r9, #3
 8009d42:	e7c1      	b.n	8009cc8 <__gethex+0x1ac>
 8009d44:	da09      	bge.n	8009d5a <__gethex+0x23e>
 8009d46:	1b75      	subs	r5, r6, r5
 8009d48:	4621      	mov	r1, r4
 8009d4a:	9801      	ldr	r0, [sp, #4]
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	f7fe fb17 	bl	8008380 <__lshift>
 8009d52:	1b7f      	subs	r7, r7, r5
 8009d54:	4604      	mov	r4, r0
 8009d56:	f100 0a14 	add.w	sl, r0, #20
 8009d5a:	f04f 0900 	mov.w	r9, #0
 8009d5e:	e7b8      	b.n	8009cd2 <__gethex+0x1b6>
 8009d60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d64:	42bd      	cmp	r5, r7
 8009d66:	dd6f      	ble.n	8009e48 <__gethex+0x32c>
 8009d68:	1bed      	subs	r5, r5, r7
 8009d6a:	42ae      	cmp	r6, r5
 8009d6c:	dc34      	bgt.n	8009dd8 <__gethex+0x2bc>
 8009d6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d022      	beq.n	8009dbc <__gethex+0x2a0>
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d024      	beq.n	8009dc4 <__gethex+0x2a8>
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d115      	bne.n	8009daa <__gethex+0x28e>
 8009d7e:	42ae      	cmp	r6, r5
 8009d80:	d113      	bne.n	8009daa <__gethex+0x28e>
 8009d82:	2e01      	cmp	r6, #1
 8009d84:	d10b      	bne.n	8009d9e <__gethex+0x282>
 8009d86:	9a02      	ldr	r2, [sp, #8]
 8009d88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d8c:	6013      	str	r3, [r2, #0]
 8009d8e:	2301      	movs	r3, #1
 8009d90:	6123      	str	r3, [r4, #16]
 8009d92:	f8ca 3000 	str.w	r3, [sl]
 8009d96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d98:	2562      	movs	r5, #98	@ 0x62
 8009d9a:	601c      	str	r4, [r3, #0]
 8009d9c:	e73a      	b.n	8009c14 <__gethex+0xf8>
 8009d9e:	1e71      	subs	r1, r6, #1
 8009da0:	4620      	mov	r0, r4
 8009da2:	f7fe fd26 	bl	80087f2 <__any_on>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d1ed      	bne.n	8009d86 <__gethex+0x26a>
 8009daa:	9801      	ldr	r0, [sp, #4]
 8009dac:	4621      	mov	r1, r4
 8009dae:	f7fe f8cf 	bl	8007f50 <_Bfree>
 8009db2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009db4:	2300      	movs	r3, #0
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	2550      	movs	r5, #80	@ 0x50
 8009dba:	e72b      	b.n	8009c14 <__gethex+0xf8>
 8009dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f3      	bne.n	8009daa <__gethex+0x28e>
 8009dc2:	e7e0      	b.n	8009d86 <__gethex+0x26a>
 8009dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1dd      	bne.n	8009d86 <__gethex+0x26a>
 8009dca:	e7ee      	b.n	8009daa <__gethex+0x28e>
 8009dcc:	0800ba78 	.word	0x0800ba78
 8009dd0:	0800b90d 	.word	0x0800b90d
 8009dd4:	0800bc26 	.word	0x0800bc26
 8009dd8:	1e6f      	subs	r7, r5, #1
 8009dda:	f1b9 0f00 	cmp.w	r9, #0
 8009dde:	d130      	bne.n	8009e42 <__gethex+0x326>
 8009de0:	b127      	cbz	r7, 8009dec <__gethex+0x2d0>
 8009de2:	4639      	mov	r1, r7
 8009de4:	4620      	mov	r0, r4
 8009de6:	f7fe fd04 	bl	80087f2 <__any_on>
 8009dea:	4681      	mov	r9, r0
 8009dec:	117a      	asrs	r2, r7, #5
 8009dee:	2301      	movs	r3, #1
 8009df0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009df4:	f007 071f 	and.w	r7, r7, #31
 8009df8:	40bb      	lsls	r3, r7
 8009dfa:	4213      	tst	r3, r2
 8009dfc:	4629      	mov	r1, r5
 8009dfe:	4620      	mov	r0, r4
 8009e00:	bf18      	it	ne
 8009e02:	f049 0902 	orrne.w	r9, r9, #2
 8009e06:	f7ff fe21 	bl	8009a4c <rshift>
 8009e0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009e0e:	1b76      	subs	r6, r6, r5
 8009e10:	2502      	movs	r5, #2
 8009e12:	f1b9 0f00 	cmp.w	r9, #0
 8009e16:	d047      	beq.n	8009ea8 <__gethex+0x38c>
 8009e18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d015      	beq.n	8009e4c <__gethex+0x330>
 8009e20:	2b03      	cmp	r3, #3
 8009e22:	d017      	beq.n	8009e54 <__gethex+0x338>
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d109      	bne.n	8009e3c <__gethex+0x320>
 8009e28:	f019 0f02 	tst.w	r9, #2
 8009e2c:	d006      	beq.n	8009e3c <__gethex+0x320>
 8009e2e:	f8da 3000 	ldr.w	r3, [sl]
 8009e32:	ea49 0903 	orr.w	r9, r9, r3
 8009e36:	f019 0f01 	tst.w	r9, #1
 8009e3a:	d10e      	bne.n	8009e5a <__gethex+0x33e>
 8009e3c:	f045 0510 	orr.w	r5, r5, #16
 8009e40:	e032      	b.n	8009ea8 <__gethex+0x38c>
 8009e42:	f04f 0901 	mov.w	r9, #1
 8009e46:	e7d1      	b.n	8009dec <__gethex+0x2d0>
 8009e48:	2501      	movs	r5, #1
 8009e4a:	e7e2      	b.n	8009e12 <__gethex+0x2f6>
 8009e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e4e:	f1c3 0301 	rsb	r3, r3, #1
 8009e52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d0f0      	beq.n	8009e3c <__gethex+0x320>
 8009e5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e5e:	f104 0314 	add.w	r3, r4, #20
 8009e62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e6a:	f04f 0c00 	mov.w	ip, #0
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e74:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e78:	d01b      	beq.n	8009eb2 <__gethex+0x396>
 8009e7a:	3201      	adds	r2, #1
 8009e7c:	6002      	str	r2, [r0, #0]
 8009e7e:	2d02      	cmp	r5, #2
 8009e80:	f104 0314 	add.w	r3, r4, #20
 8009e84:	d13c      	bne.n	8009f00 <__gethex+0x3e4>
 8009e86:	f8d8 2000 	ldr.w	r2, [r8]
 8009e8a:	3a01      	subs	r2, #1
 8009e8c:	42b2      	cmp	r2, r6
 8009e8e:	d109      	bne.n	8009ea4 <__gethex+0x388>
 8009e90:	1171      	asrs	r1, r6, #5
 8009e92:	2201      	movs	r2, #1
 8009e94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e98:	f006 061f 	and.w	r6, r6, #31
 8009e9c:	fa02 f606 	lsl.w	r6, r2, r6
 8009ea0:	421e      	tst	r6, r3
 8009ea2:	d13a      	bne.n	8009f1a <__gethex+0x3fe>
 8009ea4:	f045 0520 	orr.w	r5, r5, #32
 8009ea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eaa:	601c      	str	r4, [r3, #0]
 8009eac:	9b02      	ldr	r3, [sp, #8]
 8009eae:	601f      	str	r7, [r3, #0]
 8009eb0:	e6b0      	b.n	8009c14 <__gethex+0xf8>
 8009eb2:	4299      	cmp	r1, r3
 8009eb4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009eb8:	d8d9      	bhi.n	8009e6e <__gethex+0x352>
 8009eba:	68a3      	ldr	r3, [r4, #8]
 8009ebc:	459b      	cmp	fp, r3
 8009ebe:	db17      	blt.n	8009ef0 <__gethex+0x3d4>
 8009ec0:	6861      	ldr	r1, [r4, #4]
 8009ec2:	9801      	ldr	r0, [sp, #4]
 8009ec4:	3101      	adds	r1, #1
 8009ec6:	f7fe f803 	bl	8007ed0 <_Balloc>
 8009eca:	4681      	mov	r9, r0
 8009ecc:	b918      	cbnz	r0, 8009ed6 <__gethex+0x3ba>
 8009ece:	4b1a      	ldr	r3, [pc, #104]	@ (8009f38 <__gethex+0x41c>)
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	2184      	movs	r1, #132	@ 0x84
 8009ed4:	e6c5      	b.n	8009c62 <__gethex+0x146>
 8009ed6:	6922      	ldr	r2, [r4, #16]
 8009ed8:	3202      	adds	r2, #2
 8009eda:	f104 010c 	add.w	r1, r4, #12
 8009ede:	0092      	lsls	r2, r2, #2
 8009ee0:	300c      	adds	r0, #12
 8009ee2:	f7ff fd6b 	bl	80099bc <memcpy>
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	9801      	ldr	r0, [sp, #4]
 8009eea:	f7fe f831 	bl	8007f50 <_Bfree>
 8009eee:	464c      	mov	r4, r9
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	1c5a      	adds	r2, r3, #1
 8009ef4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ef8:	6122      	str	r2, [r4, #16]
 8009efa:	2201      	movs	r2, #1
 8009efc:	615a      	str	r2, [r3, #20]
 8009efe:	e7be      	b.n	8009e7e <__gethex+0x362>
 8009f00:	6922      	ldr	r2, [r4, #16]
 8009f02:	455a      	cmp	r2, fp
 8009f04:	dd0b      	ble.n	8009f1e <__gethex+0x402>
 8009f06:	2101      	movs	r1, #1
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f7ff fd9f 	bl	8009a4c <rshift>
 8009f0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f12:	3701      	adds	r7, #1
 8009f14:	42bb      	cmp	r3, r7
 8009f16:	f6ff aee0 	blt.w	8009cda <__gethex+0x1be>
 8009f1a:	2501      	movs	r5, #1
 8009f1c:	e7c2      	b.n	8009ea4 <__gethex+0x388>
 8009f1e:	f016 061f 	ands.w	r6, r6, #31
 8009f22:	d0fa      	beq.n	8009f1a <__gethex+0x3fe>
 8009f24:	4453      	add	r3, sl
 8009f26:	f1c6 0620 	rsb	r6, r6, #32
 8009f2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f2e:	f7fe f8c1 	bl	80080b4 <__hi0bits>
 8009f32:	42b0      	cmp	r0, r6
 8009f34:	dbe7      	blt.n	8009f06 <__gethex+0x3ea>
 8009f36:	e7f0      	b.n	8009f1a <__gethex+0x3fe>
 8009f38:	0800b90d 	.word	0x0800b90d

08009f3c <L_shift>:
 8009f3c:	f1c2 0208 	rsb	r2, r2, #8
 8009f40:	0092      	lsls	r2, r2, #2
 8009f42:	b570      	push	{r4, r5, r6, lr}
 8009f44:	f1c2 0620 	rsb	r6, r2, #32
 8009f48:	6843      	ldr	r3, [r0, #4]
 8009f4a:	6804      	ldr	r4, [r0, #0]
 8009f4c:	fa03 f506 	lsl.w	r5, r3, r6
 8009f50:	432c      	orrs	r4, r5
 8009f52:	40d3      	lsrs	r3, r2
 8009f54:	6004      	str	r4, [r0, #0]
 8009f56:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f5a:	4288      	cmp	r0, r1
 8009f5c:	d3f4      	bcc.n	8009f48 <L_shift+0xc>
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}

08009f60 <__match>:
 8009f60:	b530      	push	{r4, r5, lr}
 8009f62:	6803      	ldr	r3, [r0, #0]
 8009f64:	3301      	adds	r3, #1
 8009f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f6a:	b914      	cbnz	r4, 8009f72 <__match+0x12>
 8009f6c:	6003      	str	r3, [r0, #0]
 8009f6e:	2001      	movs	r0, #1
 8009f70:	bd30      	pop	{r4, r5, pc}
 8009f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009f7a:	2d19      	cmp	r5, #25
 8009f7c:	bf98      	it	ls
 8009f7e:	3220      	addls	r2, #32
 8009f80:	42a2      	cmp	r2, r4
 8009f82:	d0f0      	beq.n	8009f66 <__match+0x6>
 8009f84:	2000      	movs	r0, #0
 8009f86:	e7f3      	b.n	8009f70 <__match+0x10>

08009f88 <__hexnan>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	680b      	ldr	r3, [r1, #0]
 8009f8e:	6801      	ldr	r1, [r0, #0]
 8009f90:	115e      	asrs	r6, r3, #5
 8009f92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f96:	f013 031f 	ands.w	r3, r3, #31
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	bf18      	it	ne
 8009f9e:	3604      	addne	r6, #4
 8009fa0:	2500      	movs	r5, #0
 8009fa2:	1f37      	subs	r7, r6, #4
 8009fa4:	4682      	mov	sl, r0
 8009fa6:	4690      	mov	r8, r2
 8009fa8:	9301      	str	r3, [sp, #4]
 8009faa:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fae:	46b9      	mov	r9, r7
 8009fb0:	463c      	mov	r4, r7
 8009fb2:	9502      	str	r5, [sp, #8]
 8009fb4:	46ab      	mov	fp, r5
 8009fb6:	784a      	ldrb	r2, [r1, #1]
 8009fb8:	1c4b      	adds	r3, r1, #1
 8009fba:	9303      	str	r3, [sp, #12]
 8009fbc:	b342      	cbz	r2, 800a010 <__hexnan+0x88>
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	9105      	str	r1, [sp, #20]
 8009fc2:	9204      	str	r2, [sp, #16]
 8009fc4:	f7ff fd94 	bl	8009af0 <__hexdig_fun>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d151      	bne.n	800a070 <__hexnan+0xe8>
 8009fcc:	9a04      	ldr	r2, [sp, #16]
 8009fce:	9905      	ldr	r1, [sp, #20]
 8009fd0:	2a20      	cmp	r2, #32
 8009fd2:	d818      	bhi.n	800a006 <__hexnan+0x7e>
 8009fd4:	9b02      	ldr	r3, [sp, #8]
 8009fd6:	459b      	cmp	fp, r3
 8009fd8:	dd13      	ble.n	800a002 <__hexnan+0x7a>
 8009fda:	454c      	cmp	r4, r9
 8009fdc:	d206      	bcs.n	8009fec <__hexnan+0x64>
 8009fde:	2d07      	cmp	r5, #7
 8009fe0:	dc04      	bgt.n	8009fec <__hexnan+0x64>
 8009fe2:	462a      	mov	r2, r5
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f7ff ffa8 	bl	8009f3c <L_shift>
 8009fec:	4544      	cmp	r4, r8
 8009fee:	d952      	bls.n	800a096 <__hexnan+0x10e>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f1a4 0904 	sub.w	r9, r4, #4
 8009ff6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ffa:	f8cd b008 	str.w	fp, [sp, #8]
 8009ffe:	464c      	mov	r4, r9
 800a000:	461d      	mov	r5, r3
 800a002:	9903      	ldr	r1, [sp, #12]
 800a004:	e7d7      	b.n	8009fb6 <__hexnan+0x2e>
 800a006:	2a29      	cmp	r2, #41	@ 0x29
 800a008:	d157      	bne.n	800a0ba <__hexnan+0x132>
 800a00a:	3102      	adds	r1, #2
 800a00c:	f8ca 1000 	str.w	r1, [sl]
 800a010:	f1bb 0f00 	cmp.w	fp, #0
 800a014:	d051      	beq.n	800a0ba <__hexnan+0x132>
 800a016:	454c      	cmp	r4, r9
 800a018:	d206      	bcs.n	800a028 <__hexnan+0xa0>
 800a01a:	2d07      	cmp	r5, #7
 800a01c:	dc04      	bgt.n	800a028 <__hexnan+0xa0>
 800a01e:	462a      	mov	r2, r5
 800a020:	4649      	mov	r1, r9
 800a022:	4620      	mov	r0, r4
 800a024:	f7ff ff8a 	bl	8009f3c <L_shift>
 800a028:	4544      	cmp	r4, r8
 800a02a:	d936      	bls.n	800a09a <__hexnan+0x112>
 800a02c:	f1a8 0204 	sub.w	r2, r8, #4
 800a030:	4623      	mov	r3, r4
 800a032:	f853 1b04 	ldr.w	r1, [r3], #4
 800a036:	f842 1f04 	str.w	r1, [r2, #4]!
 800a03a:	429f      	cmp	r7, r3
 800a03c:	d2f9      	bcs.n	800a032 <__hexnan+0xaa>
 800a03e:	1b3b      	subs	r3, r7, r4
 800a040:	f023 0303 	bic.w	r3, r3, #3
 800a044:	3304      	adds	r3, #4
 800a046:	3401      	adds	r4, #1
 800a048:	3e03      	subs	r6, #3
 800a04a:	42b4      	cmp	r4, r6
 800a04c:	bf88      	it	hi
 800a04e:	2304      	movhi	r3, #4
 800a050:	4443      	add	r3, r8
 800a052:	2200      	movs	r2, #0
 800a054:	f843 2b04 	str.w	r2, [r3], #4
 800a058:	429f      	cmp	r7, r3
 800a05a:	d2fb      	bcs.n	800a054 <__hexnan+0xcc>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	b91b      	cbnz	r3, 800a068 <__hexnan+0xe0>
 800a060:	4547      	cmp	r7, r8
 800a062:	d128      	bne.n	800a0b6 <__hexnan+0x12e>
 800a064:	2301      	movs	r3, #1
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	2005      	movs	r0, #5
 800a06a:	b007      	add	sp, #28
 800a06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a070:	3501      	adds	r5, #1
 800a072:	2d08      	cmp	r5, #8
 800a074:	f10b 0b01 	add.w	fp, fp, #1
 800a078:	dd06      	ble.n	800a088 <__hexnan+0x100>
 800a07a:	4544      	cmp	r4, r8
 800a07c:	d9c1      	bls.n	800a002 <__hexnan+0x7a>
 800a07e:	2300      	movs	r3, #0
 800a080:	f844 3c04 	str.w	r3, [r4, #-4]
 800a084:	2501      	movs	r5, #1
 800a086:	3c04      	subs	r4, #4
 800a088:	6822      	ldr	r2, [r4, #0]
 800a08a:	f000 000f 	and.w	r0, r0, #15
 800a08e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a092:	6020      	str	r0, [r4, #0]
 800a094:	e7b5      	b.n	800a002 <__hexnan+0x7a>
 800a096:	2508      	movs	r5, #8
 800a098:	e7b3      	b.n	800a002 <__hexnan+0x7a>
 800a09a:	9b01      	ldr	r3, [sp, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d0dd      	beq.n	800a05c <__hexnan+0xd4>
 800a0a0:	f1c3 0320 	rsb	r3, r3, #32
 800a0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a8:	40da      	lsrs	r2, r3
 800a0aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a0b4:	e7d2      	b.n	800a05c <__hexnan+0xd4>
 800a0b6:	3f04      	subs	r7, #4
 800a0b8:	e7d0      	b.n	800a05c <__hexnan+0xd4>
 800a0ba:	2004      	movs	r0, #4
 800a0bc:	e7d5      	b.n	800a06a <__hexnan+0xe2>

0800a0be <__ascii_mbtowc>:
 800a0be:	b082      	sub	sp, #8
 800a0c0:	b901      	cbnz	r1, 800a0c4 <__ascii_mbtowc+0x6>
 800a0c2:	a901      	add	r1, sp, #4
 800a0c4:	b142      	cbz	r2, 800a0d8 <__ascii_mbtowc+0x1a>
 800a0c6:	b14b      	cbz	r3, 800a0dc <__ascii_mbtowc+0x1e>
 800a0c8:	7813      	ldrb	r3, [r2, #0]
 800a0ca:	600b      	str	r3, [r1, #0]
 800a0cc:	7812      	ldrb	r2, [r2, #0]
 800a0ce:	1e10      	subs	r0, r2, #0
 800a0d0:	bf18      	it	ne
 800a0d2:	2001      	movne	r0, #1
 800a0d4:	b002      	add	sp, #8
 800a0d6:	4770      	bx	lr
 800a0d8:	4610      	mov	r0, r2
 800a0da:	e7fb      	b.n	800a0d4 <__ascii_mbtowc+0x16>
 800a0dc:	f06f 0001 	mvn.w	r0, #1
 800a0e0:	e7f8      	b.n	800a0d4 <__ascii_mbtowc+0x16>

0800a0e2 <_realloc_r>:
 800a0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e6:	4680      	mov	r8, r0
 800a0e8:	4615      	mov	r5, r2
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	b921      	cbnz	r1, 800a0f8 <_realloc_r+0x16>
 800a0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	f7fd be60 	b.w	8007db8 <_malloc_r>
 800a0f8:	b92a      	cbnz	r2, 800a106 <_realloc_r+0x24>
 800a0fa:	f7fd fde9 	bl	8007cd0 <_free_r>
 800a0fe:	2400      	movs	r4, #0
 800a100:	4620      	mov	r0, r4
 800a102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a106:	f000 f840 	bl	800a18a <_malloc_usable_size_r>
 800a10a:	4285      	cmp	r5, r0
 800a10c:	4606      	mov	r6, r0
 800a10e:	d802      	bhi.n	800a116 <_realloc_r+0x34>
 800a110:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a114:	d8f4      	bhi.n	800a100 <_realloc_r+0x1e>
 800a116:	4629      	mov	r1, r5
 800a118:	4640      	mov	r0, r8
 800a11a:	f7fd fe4d 	bl	8007db8 <_malloc_r>
 800a11e:	4607      	mov	r7, r0
 800a120:	2800      	cmp	r0, #0
 800a122:	d0ec      	beq.n	800a0fe <_realloc_r+0x1c>
 800a124:	42b5      	cmp	r5, r6
 800a126:	462a      	mov	r2, r5
 800a128:	4621      	mov	r1, r4
 800a12a:	bf28      	it	cs
 800a12c:	4632      	movcs	r2, r6
 800a12e:	f7ff fc45 	bl	80099bc <memcpy>
 800a132:	4621      	mov	r1, r4
 800a134:	4640      	mov	r0, r8
 800a136:	f7fd fdcb 	bl	8007cd0 <_free_r>
 800a13a:	463c      	mov	r4, r7
 800a13c:	e7e0      	b.n	800a100 <_realloc_r+0x1e>

0800a13e <__ascii_wctomb>:
 800a13e:	4603      	mov	r3, r0
 800a140:	4608      	mov	r0, r1
 800a142:	b141      	cbz	r1, 800a156 <__ascii_wctomb+0x18>
 800a144:	2aff      	cmp	r2, #255	@ 0xff
 800a146:	d904      	bls.n	800a152 <__ascii_wctomb+0x14>
 800a148:	228a      	movs	r2, #138	@ 0x8a
 800a14a:	601a      	str	r2, [r3, #0]
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295
 800a150:	4770      	bx	lr
 800a152:	700a      	strb	r2, [r1, #0]
 800a154:	2001      	movs	r0, #1
 800a156:	4770      	bx	lr

0800a158 <fiprintf>:
 800a158:	b40e      	push	{r1, r2, r3}
 800a15a:	b503      	push	{r0, r1, lr}
 800a15c:	4601      	mov	r1, r0
 800a15e:	ab03      	add	r3, sp, #12
 800a160:	4805      	ldr	r0, [pc, #20]	@ (800a178 <fiprintf+0x20>)
 800a162:	f853 2b04 	ldr.w	r2, [r3], #4
 800a166:	6800      	ldr	r0, [r0, #0]
 800a168:	9301      	str	r3, [sp, #4]
 800a16a:	f000 f83f 	bl	800a1ec <_vfiprintf_r>
 800a16e:	b002      	add	sp, #8
 800a170:	f85d eb04 	ldr.w	lr, [sp], #4
 800a174:	b003      	add	sp, #12
 800a176:	4770      	bx	lr
 800a178:	20000018 	.word	0x20000018

0800a17c <abort>:
 800a17c:	b508      	push	{r3, lr}
 800a17e:	2006      	movs	r0, #6
 800a180:	f000 fa08 	bl	800a594 <raise>
 800a184:	2001      	movs	r0, #1
 800a186:	f7f7 fd3f 	bl	8001c08 <_exit>

0800a18a <_malloc_usable_size_r>:
 800a18a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a18e:	1f18      	subs	r0, r3, #4
 800a190:	2b00      	cmp	r3, #0
 800a192:	bfbc      	itt	lt
 800a194:	580b      	ldrlt	r3, [r1, r0]
 800a196:	18c0      	addlt	r0, r0, r3
 800a198:	4770      	bx	lr

0800a19a <__sfputc_r>:
 800a19a:	6893      	ldr	r3, [r2, #8]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	b410      	push	{r4}
 800a1a2:	6093      	str	r3, [r2, #8]
 800a1a4:	da08      	bge.n	800a1b8 <__sfputc_r+0x1e>
 800a1a6:	6994      	ldr	r4, [r2, #24]
 800a1a8:	42a3      	cmp	r3, r4
 800a1aa:	db01      	blt.n	800a1b0 <__sfputc_r+0x16>
 800a1ac:	290a      	cmp	r1, #10
 800a1ae:	d103      	bne.n	800a1b8 <__sfputc_r+0x1e>
 800a1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b4:	f000 b932 	b.w	800a41c <__swbuf_r>
 800a1b8:	6813      	ldr	r3, [r2, #0]
 800a1ba:	1c58      	adds	r0, r3, #1
 800a1bc:	6010      	str	r0, [r2, #0]
 800a1be:	7019      	strb	r1, [r3, #0]
 800a1c0:	4608      	mov	r0, r1
 800a1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <__sfputs_r>:
 800a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	460f      	mov	r7, r1
 800a1ce:	4614      	mov	r4, r2
 800a1d0:	18d5      	adds	r5, r2, r3
 800a1d2:	42ac      	cmp	r4, r5
 800a1d4:	d101      	bne.n	800a1da <__sfputs_r+0x12>
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	e007      	b.n	800a1ea <__sfputs_r+0x22>
 800a1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1de:	463a      	mov	r2, r7
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f7ff ffda 	bl	800a19a <__sfputc_r>
 800a1e6:	1c43      	adds	r3, r0, #1
 800a1e8:	d1f3      	bne.n	800a1d2 <__sfputs_r+0xa>
 800a1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a1ec <_vfiprintf_r>:
 800a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f0:	460d      	mov	r5, r1
 800a1f2:	b09d      	sub	sp, #116	@ 0x74
 800a1f4:	4614      	mov	r4, r2
 800a1f6:	4698      	mov	r8, r3
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	b118      	cbz	r0, 800a204 <_vfiprintf_r+0x18>
 800a1fc:	6a03      	ldr	r3, [r0, #32]
 800a1fe:	b90b      	cbnz	r3, 800a204 <_vfiprintf_r+0x18>
 800a200:	f7fc fdf8 	bl	8006df4 <__sinit>
 800a204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a206:	07d9      	lsls	r1, r3, #31
 800a208:	d405      	bmi.n	800a216 <_vfiprintf_r+0x2a>
 800a20a:	89ab      	ldrh	r3, [r5, #12]
 800a20c:	059a      	lsls	r2, r3, #22
 800a20e:	d402      	bmi.n	800a216 <_vfiprintf_r+0x2a>
 800a210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a212:	f7fc ff06 	bl	8007022 <__retarget_lock_acquire_recursive>
 800a216:	89ab      	ldrh	r3, [r5, #12]
 800a218:	071b      	lsls	r3, r3, #28
 800a21a:	d501      	bpl.n	800a220 <_vfiprintf_r+0x34>
 800a21c:	692b      	ldr	r3, [r5, #16]
 800a21e:	b99b      	cbnz	r3, 800a248 <_vfiprintf_r+0x5c>
 800a220:	4629      	mov	r1, r5
 800a222:	4630      	mov	r0, r6
 800a224:	f000 f938 	bl	800a498 <__swsetup_r>
 800a228:	b170      	cbz	r0, 800a248 <_vfiprintf_r+0x5c>
 800a22a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a22c:	07dc      	lsls	r4, r3, #31
 800a22e:	d504      	bpl.n	800a23a <_vfiprintf_r+0x4e>
 800a230:	f04f 30ff 	mov.w	r0, #4294967295
 800a234:	b01d      	add	sp, #116	@ 0x74
 800a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23a:	89ab      	ldrh	r3, [r5, #12]
 800a23c:	0598      	lsls	r0, r3, #22
 800a23e:	d4f7      	bmi.n	800a230 <_vfiprintf_r+0x44>
 800a240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a242:	f7fc feef 	bl	8007024 <__retarget_lock_release_recursive>
 800a246:	e7f3      	b.n	800a230 <_vfiprintf_r+0x44>
 800a248:	2300      	movs	r3, #0
 800a24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a24c:	2320      	movs	r3, #32
 800a24e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a252:	f8cd 800c 	str.w	r8, [sp, #12]
 800a256:	2330      	movs	r3, #48	@ 0x30
 800a258:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a408 <_vfiprintf_r+0x21c>
 800a25c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a260:	f04f 0901 	mov.w	r9, #1
 800a264:	4623      	mov	r3, r4
 800a266:	469a      	mov	sl, r3
 800a268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a26c:	b10a      	cbz	r2, 800a272 <_vfiprintf_r+0x86>
 800a26e:	2a25      	cmp	r2, #37	@ 0x25
 800a270:	d1f9      	bne.n	800a266 <_vfiprintf_r+0x7a>
 800a272:	ebba 0b04 	subs.w	fp, sl, r4
 800a276:	d00b      	beq.n	800a290 <_vfiprintf_r+0xa4>
 800a278:	465b      	mov	r3, fp
 800a27a:	4622      	mov	r2, r4
 800a27c:	4629      	mov	r1, r5
 800a27e:	4630      	mov	r0, r6
 800a280:	f7ff ffa2 	bl	800a1c8 <__sfputs_r>
 800a284:	3001      	adds	r0, #1
 800a286:	f000 80a7 	beq.w	800a3d8 <_vfiprintf_r+0x1ec>
 800a28a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a28c:	445a      	add	r2, fp
 800a28e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a290:	f89a 3000 	ldrb.w	r3, [sl]
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 809f 	beq.w	800a3d8 <_vfiprintf_r+0x1ec>
 800a29a:	2300      	movs	r3, #0
 800a29c:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2a4:	f10a 0a01 	add.w	sl, sl, #1
 800a2a8:	9304      	str	r3, [sp, #16]
 800a2aa:	9307      	str	r3, [sp, #28]
 800a2ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2b2:	4654      	mov	r4, sl
 800a2b4:	2205      	movs	r2, #5
 800a2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ba:	4853      	ldr	r0, [pc, #332]	@ (800a408 <_vfiprintf_r+0x21c>)
 800a2bc:	f7f5 ff88 	bl	80001d0 <memchr>
 800a2c0:	9a04      	ldr	r2, [sp, #16]
 800a2c2:	b9d8      	cbnz	r0, 800a2fc <_vfiprintf_r+0x110>
 800a2c4:	06d1      	lsls	r1, r2, #27
 800a2c6:	bf44      	itt	mi
 800a2c8:	2320      	movmi	r3, #32
 800a2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ce:	0713      	lsls	r3, r2, #28
 800a2d0:	bf44      	itt	mi
 800a2d2:	232b      	movmi	r3, #43	@ 0x2b
 800a2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2de:	d015      	beq.n	800a30c <_vfiprintf_r+0x120>
 800a2e0:	9a07      	ldr	r2, [sp, #28]
 800a2e2:	4654      	mov	r4, sl
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	f04f 0c0a 	mov.w	ip, #10
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2f0:	3b30      	subs	r3, #48	@ 0x30
 800a2f2:	2b09      	cmp	r3, #9
 800a2f4:	d94b      	bls.n	800a38e <_vfiprintf_r+0x1a2>
 800a2f6:	b1b0      	cbz	r0, 800a326 <_vfiprintf_r+0x13a>
 800a2f8:	9207      	str	r2, [sp, #28]
 800a2fa:	e014      	b.n	800a326 <_vfiprintf_r+0x13a>
 800a2fc:	eba0 0308 	sub.w	r3, r0, r8
 800a300:	fa09 f303 	lsl.w	r3, r9, r3
 800a304:	4313      	orrs	r3, r2
 800a306:	9304      	str	r3, [sp, #16]
 800a308:	46a2      	mov	sl, r4
 800a30a:	e7d2      	b.n	800a2b2 <_vfiprintf_r+0xc6>
 800a30c:	9b03      	ldr	r3, [sp, #12]
 800a30e:	1d19      	adds	r1, r3, #4
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	9103      	str	r1, [sp, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	bfbb      	ittet	lt
 800a318:	425b      	neglt	r3, r3
 800a31a:	f042 0202 	orrlt.w	r2, r2, #2
 800a31e:	9307      	strge	r3, [sp, #28]
 800a320:	9307      	strlt	r3, [sp, #28]
 800a322:	bfb8      	it	lt
 800a324:	9204      	strlt	r2, [sp, #16]
 800a326:	7823      	ldrb	r3, [r4, #0]
 800a328:	2b2e      	cmp	r3, #46	@ 0x2e
 800a32a:	d10a      	bne.n	800a342 <_vfiprintf_r+0x156>
 800a32c:	7863      	ldrb	r3, [r4, #1]
 800a32e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a330:	d132      	bne.n	800a398 <_vfiprintf_r+0x1ac>
 800a332:	9b03      	ldr	r3, [sp, #12]
 800a334:	1d1a      	adds	r2, r3, #4
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	9203      	str	r2, [sp, #12]
 800a33a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a33e:	3402      	adds	r4, #2
 800a340:	9305      	str	r3, [sp, #20]
 800a342:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a418 <_vfiprintf_r+0x22c>
 800a346:	7821      	ldrb	r1, [r4, #0]
 800a348:	2203      	movs	r2, #3
 800a34a:	4650      	mov	r0, sl
 800a34c:	f7f5 ff40 	bl	80001d0 <memchr>
 800a350:	b138      	cbz	r0, 800a362 <_vfiprintf_r+0x176>
 800a352:	9b04      	ldr	r3, [sp, #16]
 800a354:	eba0 000a 	sub.w	r0, r0, sl
 800a358:	2240      	movs	r2, #64	@ 0x40
 800a35a:	4082      	lsls	r2, r0
 800a35c:	4313      	orrs	r3, r2
 800a35e:	3401      	adds	r4, #1
 800a360:	9304      	str	r3, [sp, #16]
 800a362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a366:	4829      	ldr	r0, [pc, #164]	@ (800a40c <_vfiprintf_r+0x220>)
 800a368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a36c:	2206      	movs	r2, #6
 800a36e:	f7f5 ff2f 	bl	80001d0 <memchr>
 800a372:	2800      	cmp	r0, #0
 800a374:	d03f      	beq.n	800a3f6 <_vfiprintf_r+0x20a>
 800a376:	4b26      	ldr	r3, [pc, #152]	@ (800a410 <_vfiprintf_r+0x224>)
 800a378:	bb1b      	cbnz	r3, 800a3c2 <_vfiprintf_r+0x1d6>
 800a37a:	9b03      	ldr	r3, [sp, #12]
 800a37c:	3307      	adds	r3, #7
 800a37e:	f023 0307 	bic.w	r3, r3, #7
 800a382:	3308      	adds	r3, #8
 800a384:	9303      	str	r3, [sp, #12]
 800a386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a388:	443b      	add	r3, r7
 800a38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a38c:	e76a      	b.n	800a264 <_vfiprintf_r+0x78>
 800a38e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a392:	460c      	mov	r4, r1
 800a394:	2001      	movs	r0, #1
 800a396:	e7a8      	b.n	800a2ea <_vfiprintf_r+0xfe>
 800a398:	2300      	movs	r3, #0
 800a39a:	3401      	adds	r4, #1
 800a39c:	9305      	str	r3, [sp, #20]
 800a39e:	4619      	mov	r1, r3
 800a3a0:	f04f 0c0a 	mov.w	ip, #10
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3aa:	3a30      	subs	r2, #48	@ 0x30
 800a3ac:	2a09      	cmp	r2, #9
 800a3ae:	d903      	bls.n	800a3b8 <_vfiprintf_r+0x1cc>
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d0c6      	beq.n	800a342 <_vfiprintf_r+0x156>
 800a3b4:	9105      	str	r1, [sp, #20]
 800a3b6:	e7c4      	b.n	800a342 <_vfiprintf_r+0x156>
 800a3b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3bc:	4604      	mov	r4, r0
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e7f0      	b.n	800a3a4 <_vfiprintf_r+0x1b8>
 800a3c2:	ab03      	add	r3, sp, #12
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	462a      	mov	r2, r5
 800a3c8:	4b12      	ldr	r3, [pc, #72]	@ (800a414 <_vfiprintf_r+0x228>)
 800a3ca:	a904      	add	r1, sp, #16
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f7fb feb9 	bl	8006144 <_printf_float>
 800a3d2:	4607      	mov	r7, r0
 800a3d4:	1c78      	adds	r0, r7, #1
 800a3d6:	d1d6      	bne.n	800a386 <_vfiprintf_r+0x19a>
 800a3d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3da:	07d9      	lsls	r1, r3, #31
 800a3dc:	d405      	bmi.n	800a3ea <_vfiprintf_r+0x1fe>
 800a3de:	89ab      	ldrh	r3, [r5, #12]
 800a3e0:	059a      	lsls	r2, r3, #22
 800a3e2:	d402      	bmi.n	800a3ea <_vfiprintf_r+0x1fe>
 800a3e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3e6:	f7fc fe1d 	bl	8007024 <__retarget_lock_release_recursive>
 800a3ea:	89ab      	ldrh	r3, [r5, #12]
 800a3ec:	065b      	lsls	r3, r3, #25
 800a3ee:	f53f af1f 	bmi.w	800a230 <_vfiprintf_r+0x44>
 800a3f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3f4:	e71e      	b.n	800a234 <_vfiprintf_r+0x48>
 800a3f6:	ab03      	add	r3, sp, #12
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	462a      	mov	r2, r5
 800a3fc:	4b05      	ldr	r3, [pc, #20]	@ (800a414 <_vfiprintf_r+0x228>)
 800a3fe:	a904      	add	r1, sp, #16
 800a400:	4630      	mov	r0, r6
 800a402:	f7fc f937 	bl	8006674 <_printf_i>
 800a406:	e7e4      	b.n	800a3d2 <_vfiprintf_r+0x1e6>
 800a408:	0800bbd1 	.word	0x0800bbd1
 800a40c:	0800bbdb 	.word	0x0800bbdb
 800a410:	08006145 	.word	0x08006145
 800a414:	0800a1c9 	.word	0x0800a1c9
 800a418:	0800bbd7 	.word	0x0800bbd7

0800a41c <__swbuf_r>:
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41e:	460e      	mov	r6, r1
 800a420:	4614      	mov	r4, r2
 800a422:	4605      	mov	r5, r0
 800a424:	b118      	cbz	r0, 800a42e <__swbuf_r+0x12>
 800a426:	6a03      	ldr	r3, [r0, #32]
 800a428:	b90b      	cbnz	r3, 800a42e <__swbuf_r+0x12>
 800a42a:	f7fc fce3 	bl	8006df4 <__sinit>
 800a42e:	69a3      	ldr	r3, [r4, #24]
 800a430:	60a3      	str	r3, [r4, #8]
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	071a      	lsls	r2, r3, #28
 800a436:	d501      	bpl.n	800a43c <__swbuf_r+0x20>
 800a438:	6923      	ldr	r3, [r4, #16]
 800a43a:	b943      	cbnz	r3, 800a44e <__swbuf_r+0x32>
 800a43c:	4621      	mov	r1, r4
 800a43e:	4628      	mov	r0, r5
 800a440:	f000 f82a 	bl	800a498 <__swsetup_r>
 800a444:	b118      	cbz	r0, 800a44e <__swbuf_r+0x32>
 800a446:	f04f 37ff 	mov.w	r7, #4294967295
 800a44a:	4638      	mov	r0, r7
 800a44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	6922      	ldr	r2, [r4, #16]
 800a452:	1a98      	subs	r0, r3, r2
 800a454:	6963      	ldr	r3, [r4, #20]
 800a456:	b2f6      	uxtb	r6, r6
 800a458:	4283      	cmp	r3, r0
 800a45a:	4637      	mov	r7, r6
 800a45c:	dc05      	bgt.n	800a46a <__swbuf_r+0x4e>
 800a45e:	4621      	mov	r1, r4
 800a460:	4628      	mov	r0, r5
 800a462:	f7ff fa47 	bl	80098f4 <_fflush_r>
 800a466:	2800      	cmp	r0, #0
 800a468:	d1ed      	bne.n	800a446 <__swbuf_r+0x2a>
 800a46a:	68a3      	ldr	r3, [r4, #8]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	60a3      	str	r3, [r4, #8]
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	1c5a      	adds	r2, r3, #1
 800a474:	6022      	str	r2, [r4, #0]
 800a476:	701e      	strb	r6, [r3, #0]
 800a478:	6962      	ldr	r2, [r4, #20]
 800a47a:	1c43      	adds	r3, r0, #1
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d004      	beq.n	800a48a <__swbuf_r+0x6e>
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	07db      	lsls	r3, r3, #31
 800a484:	d5e1      	bpl.n	800a44a <__swbuf_r+0x2e>
 800a486:	2e0a      	cmp	r6, #10
 800a488:	d1df      	bne.n	800a44a <__swbuf_r+0x2e>
 800a48a:	4621      	mov	r1, r4
 800a48c:	4628      	mov	r0, r5
 800a48e:	f7ff fa31 	bl	80098f4 <_fflush_r>
 800a492:	2800      	cmp	r0, #0
 800a494:	d0d9      	beq.n	800a44a <__swbuf_r+0x2e>
 800a496:	e7d6      	b.n	800a446 <__swbuf_r+0x2a>

0800a498 <__swsetup_r>:
 800a498:	b538      	push	{r3, r4, r5, lr}
 800a49a:	4b29      	ldr	r3, [pc, #164]	@ (800a540 <__swsetup_r+0xa8>)
 800a49c:	4605      	mov	r5, r0
 800a49e:	6818      	ldr	r0, [r3, #0]
 800a4a0:	460c      	mov	r4, r1
 800a4a2:	b118      	cbz	r0, 800a4ac <__swsetup_r+0x14>
 800a4a4:	6a03      	ldr	r3, [r0, #32]
 800a4a6:	b90b      	cbnz	r3, 800a4ac <__swsetup_r+0x14>
 800a4a8:	f7fc fca4 	bl	8006df4 <__sinit>
 800a4ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4b0:	0719      	lsls	r1, r3, #28
 800a4b2:	d422      	bmi.n	800a4fa <__swsetup_r+0x62>
 800a4b4:	06da      	lsls	r2, r3, #27
 800a4b6:	d407      	bmi.n	800a4c8 <__swsetup_r+0x30>
 800a4b8:	2209      	movs	r2, #9
 800a4ba:	602a      	str	r2, [r5, #0]
 800a4bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4c0:	81a3      	strh	r3, [r4, #12]
 800a4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c6:	e033      	b.n	800a530 <__swsetup_r+0x98>
 800a4c8:	0758      	lsls	r0, r3, #29
 800a4ca:	d512      	bpl.n	800a4f2 <__swsetup_r+0x5a>
 800a4cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4ce:	b141      	cbz	r1, 800a4e2 <__swsetup_r+0x4a>
 800a4d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4d4:	4299      	cmp	r1, r3
 800a4d6:	d002      	beq.n	800a4de <__swsetup_r+0x46>
 800a4d8:	4628      	mov	r0, r5
 800a4da:	f7fd fbf9 	bl	8007cd0 <_free_r>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a4e8:	81a3      	strh	r3, [r4, #12]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	6063      	str	r3, [r4, #4]
 800a4ee:	6923      	ldr	r3, [r4, #16]
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	89a3      	ldrh	r3, [r4, #12]
 800a4f4:	f043 0308 	orr.w	r3, r3, #8
 800a4f8:	81a3      	strh	r3, [r4, #12]
 800a4fa:	6923      	ldr	r3, [r4, #16]
 800a4fc:	b94b      	cbnz	r3, 800a512 <__swsetup_r+0x7a>
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a508:	d003      	beq.n	800a512 <__swsetup_r+0x7a>
 800a50a:	4621      	mov	r1, r4
 800a50c:	4628      	mov	r0, r5
 800a50e:	f000 f883 	bl	800a618 <__smakebuf_r>
 800a512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a516:	f013 0201 	ands.w	r2, r3, #1
 800a51a:	d00a      	beq.n	800a532 <__swsetup_r+0x9a>
 800a51c:	2200      	movs	r2, #0
 800a51e:	60a2      	str	r2, [r4, #8]
 800a520:	6962      	ldr	r2, [r4, #20]
 800a522:	4252      	negs	r2, r2
 800a524:	61a2      	str	r2, [r4, #24]
 800a526:	6922      	ldr	r2, [r4, #16]
 800a528:	b942      	cbnz	r2, 800a53c <__swsetup_r+0xa4>
 800a52a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a52e:	d1c5      	bne.n	800a4bc <__swsetup_r+0x24>
 800a530:	bd38      	pop	{r3, r4, r5, pc}
 800a532:	0799      	lsls	r1, r3, #30
 800a534:	bf58      	it	pl
 800a536:	6962      	ldrpl	r2, [r4, #20]
 800a538:	60a2      	str	r2, [r4, #8]
 800a53a:	e7f4      	b.n	800a526 <__swsetup_r+0x8e>
 800a53c:	2000      	movs	r0, #0
 800a53e:	e7f7      	b.n	800a530 <__swsetup_r+0x98>
 800a540:	20000018 	.word	0x20000018

0800a544 <_raise_r>:
 800a544:	291f      	cmp	r1, #31
 800a546:	b538      	push	{r3, r4, r5, lr}
 800a548:	4605      	mov	r5, r0
 800a54a:	460c      	mov	r4, r1
 800a54c:	d904      	bls.n	800a558 <_raise_r+0x14>
 800a54e:	2316      	movs	r3, #22
 800a550:	6003      	str	r3, [r0, #0]
 800a552:	f04f 30ff 	mov.w	r0, #4294967295
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a55a:	b112      	cbz	r2, 800a562 <_raise_r+0x1e>
 800a55c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a560:	b94b      	cbnz	r3, 800a576 <_raise_r+0x32>
 800a562:	4628      	mov	r0, r5
 800a564:	f000 f830 	bl	800a5c8 <_getpid_r>
 800a568:	4622      	mov	r2, r4
 800a56a:	4601      	mov	r1, r0
 800a56c:	4628      	mov	r0, r5
 800a56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a572:	f000 b817 	b.w	800a5a4 <_kill_r>
 800a576:	2b01      	cmp	r3, #1
 800a578:	d00a      	beq.n	800a590 <_raise_r+0x4c>
 800a57a:	1c59      	adds	r1, r3, #1
 800a57c:	d103      	bne.n	800a586 <_raise_r+0x42>
 800a57e:	2316      	movs	r3, #22
 800a580:	6003      	str	r3, [r0, #0]
 800a582:	2001      	movs	r0, #1
 800a584:	e7e7      	b.n	800a556 <_raise_r+0x12>
 800a586:	2100      	movs	r1, #0
 800a588:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a58c:	4620      	mov	r0, r4
 800a58e:	4798      	blx	r3
 800a590:	2000      	movs	r0, #0
 800a592:	e7e0      	b.n	800a556 <_raise_r+0x12>

0800a594 <raise>:
 800a594:	4b02      	ldr	r3, [pc, #8]	@ (800a5a0 <raise+0xc>)
 800a596:	4601      	mov	r1, r0
 800a598:	6818      	ldr	r0, [r3, #0]
 800a59a:	f7ff bfd3 	b.w	800a544 <_raise_r>
 800a59e:	bf00      	nop
 800a5a0:	20000018 	.word	0x20000018

0800a5a4 <_kill_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d07      	ldr	r5, [pc, #28]	@ (800a5c4 <_kill_r+0x20>)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	602b      	str	r3, [r5, #0]
 800a5b2:	f7f7 fb19 	bl	8001be8 <_kill>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	d102      	bne.n	800a5c0 <_kill_r+0x1c>
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	b103      	cbz	r3, 800a5c0 <_kill_r+0x1c>
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	bd38      	pop	{r3, r4, r5, pc}
 800a5c2:	bf00      	nop
 800a5c4:	200008f8 	.word	0x200008f8

0800a5c8 <_getpid_r>:
 800a5c8:	f7f7 bb06 	b.w	8001bd8 <_getpid>

0800a5cc <__swhatbuf_r>:
 800a5cc:	b570      	push	{r4, r5, r6, lr}
 800a5ce:	460c      	mov	r4, r1
 800a5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d4:	2900      	cmp	r1, #0
 800a5d6:	b096      	sub	sp, #88	@ 0x58
 800a5d8:	4615      	mov	r5, r2
 800a5da:	461e      	mov	r6, r3
 800a5dc:	da0d      	bge.n	800a5fa <__swhatbuf_r+0x2e>
 800a5de:	89a3      	ldrh	r3, [r4, #12]
 800a5e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5e4:	f04f 0100 	mov.w	r1, #0
 800a5e8:	bf14      	ite	ne
 800a5ea:	2340      	movne	r3, #64	@ 0x40
 800a5ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	6031      	str	r1, [r6, #0]
 800a5f4:	602b      	str	r3, [r5, #0]
 800a5f6:	b016      	add	sp, #88	@ 0x58
 800a5f8:	bd70      	pop	{r4, r5, r6, pc}
 800a5fa:	466a      	mov	r2, sp
 800a5fc:	f000 f848 	bl	800a690 <_fstat_r>
 800a600:	2800      	cmp	r0, #0
 800a602:	dbec      	blt.n	800a5de <__swhatbuf_r+0x12>
 800a604:	9901      	ldr	r1, [sp, #4]
 800a606:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a60a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a60e:	4259      	negs	r1, r3
 800a610:	4159      	adcs	r1, r3
 800a612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a616:	e7eb      	b.n	800a5f0 <__swhatbuf_r+0x24>

0800a618 <__smakebuf_r>:
 800a618:	898b      	ldrh	r3, [r1, #12]
 800a61a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a61c:	079d      	lsls	r5, r3, #30
 800a61e:	4606      	mov	r6, r0
 800a620:	460c      	mov	r4, r1
 800a622:	d507      	bpl.n	800a634 <__smakebuf_r+0x1c>
 800a624:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	6123      	str	r3, [r4, #16]
 800a62c:	2301      	movs	r3, #1
 800a62e:	6163      	str	r3, [r4, #20]
 800a630:	b003      	add	sp, #12
 800a632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a634:	ab01      	add	r3, sp, #4
 800a636:	466a      	mov	r2, sp
 800a638:	f7ff ffc8 	bl	800a5cc <__swhatbuf_r>
 800a63c:	9f00      	ldr	r7, [sp, #0]
 800a63e:	4605      	mov	r5, r0
 800a640:	4639      	mov	r1, r7
 800a642:	4630      	mov	r0, r6
 800a644:	f7fd fbb8 	bl	8007db8 <_malloc_r>
 800a648:	b948      	cbnz	r0, 800a65e <__smakebuf_r+0x46>
 800a64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a64e:	059a      	lsls	r2, r3, #22
 800a650:	d4ee      	bmi.n	800a630 <__smakebuf_r+0x18>
 800a652:	f023 0303 	bic.w	r3, r3, #3
 800a656:	f043 0302 	orr.w	r3, r3, #2
 800a65a:	81a3      	strh	r3, [r4, #12]
 800a65c:	e7e2      	b.n	800a624 <__smakebuf_r+0xc>
 800a65e:	89a3      	ldrh	r3, [r4, #12]
 800a660:	6020      	str	r0, [r4, #0]
 800a662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a666:	81a3      	strh	r3, [r4, #12]
 800a668:	9b01      	ldr	r3, [sp, #4]
 800a66a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a66e:	b15b      	cbz	r3, 800a688 <__smakebuf_r+0x70>
 800a670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a674:	4630      	mov	r0, r6
 800a676:	f000 f81d 	bl	800a6b4 <_isatty_r>
 800a67a:	b128      	cbz	r0, 800a688 <__smakebuf_r+0x70>
 800a67c:	89a3      	ldrh	r3, [r4, #12]
 800a67e:	f023 0303 	bic.w	r3, r3, #3
 800a682:	f043 0301 	orr.w	r3, r3, #1
 800a686:	81a3      	strh	r3, [r4, #12]
 800a688:	89a3      	ldrh	r3, [r4, #12]
 800a68a:	431d      	orrs	r5, r3
 800a68c:	81a5      	strh	r5, [r4, #12]
 800a68e:	e7cf      	b.n	800a630 <__smakebuf_r+0x18>

0800a690 <_fstat_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4d07      	ldr	r5, [pc, #28]	@ (800a6b0 <_fstat_r+0x20>)
 800a694:	2300      	movs	r3, #0
 800a696:	4604      	mov	r4, r0
 800a698:	4608      	mov	r0, r1
 800a69a:	4611      	mov	r1, r2
 800a69c:	602b      	str	r3, [r5, #0]
 800a69e:	f7f7 fb03 	bl	8001ca8 <_fstat>
 800a6a2:	1c43      	adds	r3, r0, #1
 800a6a4:	d102      	bne.n	800a6ac <_fstat_r+0x1c>
 800a6a6:	682b      	ldr	r3, [r5, #0]
 800a6a8:	b103      	cbz	r3, 800a6ac <_fstat_r+0x1c>
 800a6aa:	6023      	str	r3, [r4, #0]
 800a6ac:	bd38      	pop	{r3, r4, r5, pc}
 800a6ae:	bf00      	nop
 800a6b0:	200008f8 	.word	0x200008f8

0800a6b4 <_isatty_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d06      	ldr	r5, [pc, #24]	@ (800a6d0 <_isatty_r+0x1c>)
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	4608      	mov	r0, r1
 800a6be:	602b      	str	r3, [r5, #0]
 800a6c0:	f7f7 fb02 	bl	8001cc8 <_isatty>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d102      	bne.n	800a6ce <_isatty_r+0x1a>
 800a6c8:	682b      	ldr	r3, [r5, #0]
 800a6ca:	b103      	cbz	r3, 800a6ce <_isatty_r+0x1a>
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	bd38      	pop	{r3, r4, r5, pc}
 800a6d0:	200008f8 	.word	0x200008f8
 800a6d4:	00000000 	.word	0x00000000

0800a6d8 <cos>:
 800a6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6da:	ec53 2b10 	vmov	r2, r3, d0
 800a6de:	4826      	ldr	r0, [pc, #152]	@ (800a778 <cos+0xa0>)
 800a6e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a6e4:	4281      	cmp	r1, r0
 800a6e6:	d806      	bhi.n	800a6f6 <cos+0x1e>
 800a6e8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a770 <cos+0x98>
 800a6ec:	b005      	add	sp, #20
 800a6ee:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6f2:	f000 b899 	b.w	800a828 <__kernel_cos>
 800a6f6:	4821      	ldr	r0, [pc, #132]	@ (800a77c <cos+0xa4>)
 800a6f8:	4281      	cmp	r1, r0
 800a6fa:	d908      	bls.n	800a70e <cos+0x36>
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	4619      	mov	r1, r3
 800a700:	f7f5 fdc2 	bl	8000288 <__aeabi_dsub>
 800a704:	ec41 0b10 	vmov	d0, r0, r1
 800a708:	b005      	add	sp, #20
 800a70a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a70e:	4668      	mov	r0, sp
 800a710:	f000 fa0e 	bl	800ab30 <__ieee754_rem_pio2>
 800a714:	f000 0003 	and.w	r0, r0, #3
 800a718:	2801      	cmp	r0, #1
 800a71a:	d00b      	beq.n	800a734 <cos+0x5c>
 800a71c:	2802      	cmp	r0, #2
 800a71e:	d015      	beq.n	800a74c <cos+0x74>
 800a720:	b9d8      	cbnz	r0, 800a75a <cos+0x82>
 800a722:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a726:	ed9d 0b00 	vldr	d0, [sp]
 800a72a:	f000 f87d 	bl	800a828 <__kernel_cos>
 800a72e:	ec51 0b10 	vmov	r0, r1, d0
 800a732:	e7e7      	b.n	800a704 <cos+0x2c>
 800a734:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a738:	ed9d 0b00 	vldr	d0, [sp]
 800a73c:	f000 f93c 	bl	800a9b8 <__kernel_sin>
 800a740:	ec53 2b10 	vmov	r2, r3, d0
 800a744:	4610      	mov	r0, r2
 800a746:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a74a:	e7db      	b.n	800a704 <cos+0x2c>
 800a74c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a750:	ed9d 0b00 	vldr	d0, [sp]
 800a754:	f000 f868 	bl	800a828 <__kernel_cos>
 800a758:	e7f2      	b.n	800a740 <cos+0x68>
 800a75a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a75e:	ed9d 0b00 	vldr	d0, [sp]
 800a762:	2001      	movs	r0, #1
 800a764:	f000 f928 	bl	800a9b8 <__kernel_sin>
 800a768:	e7e1      	b.n	800a72e <cos+0x56>
 800a76a:	bf00      	nop
 800a76c:	f3af 8000 	nop.w
	...
 800a778:	3fe921fb 	.word	0x3fe921fb
 800a77c:	7fefffff 	.word	0x7fefffff

0800a780 <sin>:
 800a780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a782:	ec53 2b10 	vmov	r2, r3, d0
 800a786:	4826      	ldr	r0, [pc, #152]	@ (800a820 <sin+0xa0>)
 800a788:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a78c:	4281      	cmp	r1, r0
 800a78e:	d807      	bhi.n	800a7a0 <sin+0x20>
 800a790:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a818 <sin+0x98>
 800a794:	2000      	movs	r0, #0
 800a796:	b005      	add	sp, #20
 800a798:	f85d eb04 	ldr.w	lr, [sp], #4
 800a79c:	f000 b90c 	b.w	800a9b8 <__kernel_sin>
 800a7a0:	4820      	ldr	r0, [pc, #128]	@ (800a824 <sin+0xa4>)
 800a7a2:	4281      	cmp	r1, r0
 800a7a4:	d908      	bls.n	800a7b8 <sin+0x38>
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	f7f5 fd6d 	bl	8000288 <__aeabi_dsub>
 800a7ae:	ec41 0b10 	vmov	d0, r0, r1
 800a7b2:	b005      	add	sp, #20
 800a7b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7b8:	4668      	mov	r0, sp
 800a7ba:	f000 f9b9 	bl	800ab30 <__ieee754_rem_pio2>
 800a7be:	f000 0003 	and.w	r0, r0, #3
 800a7c2:	2801      	cmp	r0, #1
 800a7c4:	d00c      	beq.n	800a7e0 <sin+0x60>
 800a7c6:	2802      	cmp	r0, #2
 800a7c8:	d011      	beq.n	800a7ee <sin+0x6e>
 800a7ca:	b9e8      	cbnz	r0, 800a808 <sin+0x88>
 800a7cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7d0:	ed9d 0b00 	vldr	d0, [sp]
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	f000 f8ef 	bl	800a9b8 <__kernel_sin>
 800a7da:	ec51 0b10 	vmov	r0, r1, d0
 800a7de:	e7e6      	b.n	800a7ae <sin+0x2e>
 800a7e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7e4:	ed9d 0b00 	vldr	d0, [sp]
 800a7e8:	f000 f81e 	bl	800a828 <__kernel_cos>
 800a7ec:	e7f5      	b.n	800a7da <sin+0x5a>
 800a7ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7f2:	ed9d 0b00 	vldr	d0, [sp]
 800a7f6:	2001      	movs	r0, #1
 800a7f8:	f000 f8de 	bl	800a9b8 <__kernel_sin>
 800a7fc:	ec53 2b10 	vmov	r2, r3, d0
 800a800:	4610      	mov	r0, r2
 800a802:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a806:	e7d2      	b.n	800a7ae <sin+0x2e>
 800a808:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a80c:	ed9d 0b00 	vldr	d0, [sp]
 800a810:	f000 f80a 	bl	800a828 <__kernel_cos>
 800a814:	e7f2      	b.n	800a7fc <sin+0x7c>
 800a816:	bf00      	nop
	...
 800a820:	3fe921fb 	.word	0x3fe921fb
 800a824:	7fefffff 	.word	0x7fefffff

0800a828 <__kernel_cos>:
 800a828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	ec57 6b10 	vmov	r6, r7, d0
 800a830:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a834:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a838:	ed8d 1b00 	vstr	d1, [sp]
 800a83c:	d206      	bcs.n	800a84c <__kernel_cos+0x24>
 800a83e:	4630      	mov	r0, r6
 800a840:	4639      	mov	r1, r7
 800a842:	f7f6 f989 	bl	8000b58 <__aeabi_d2iz>
 800a846:	2800      	cmp	r0, #0
 800a848:	f000 8088 	beq.w	800a95c <__kernel_cos+0x134>
 800a84c:	4632      	mov	r2, r6
 800a84e:	463b      	mov	r3, r7
 800a850:	4630      	mov	r0, r6
 800a852:	4639      	mov	r1, r7
 800a854:	f7f5 fed0 	bl	80005f8 <__aeabi_dmul>
 800a858:	4b51      	ldr	r3, [pc, #324]	@ (800a9a0 <__kernel_cos+0x178>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	4604      	mov	r4, r0
 800a85e:	460d      	mov	r5, r1
 800a860:	f7f5 feca 	bl	80005f8 <__aeabi_dmul>
 800a864:	a340      	add	r3, pc, #256	@ (adr r3, 800a968 <__kernel_cos+0x140>)
 800a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86a:	4682      	mov	sl, r0
 800a86c:	468b      	mov	fp, r1
 800a86e:	4620      	mov	r0, r4
 800a870:	4629      	mov	r1, r5
 800a872:	f7f5 fec1 	bl	80005f8 <__aeabi_dmul>
 800a876:	a33e      	add	r3, pc, #248	@ (adr r3, 800a970 <__kernel_cos+0x148>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	f7f5 fd06 	bl	800028c <__adddf3>
 800a880:	4622      	mov	r2, r4
 800a882:	462b      	mov	r3, r5
 800a884:	f7f5 feb8 	bl	80005f8 <__aeabi_dmul>
 800a888:	a33b      	add	r3, pc, #236	@ (adr r3, 800a978 <__kernel_cos+0x150>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	f7f5 fcfb 	bl	8000288 <__aeabi_dsub>
 800a892:	4622      	mov	r2, r4
 800a894:	462b      	mov	r3, r5
 800a896:	f7f5 feaf 	bl	80005f8 <__aeabi_dmul>
 800a89a:	a339      	add	r3, pc, #228	@ (adr r3, 800a980 <__kernel_cos+0x158>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f7f5 fcf4 	bl	800028c <__adddf3>
 800a8a4:	4622      	mov	r2, r4
 800a8a6:	462b      	mov	r3, r5
 800a8a8:	f7f5 fea6 	bl	80005f8 <__aeabi_dmul>
 800a8ac:	a336      	add	r3, pc, #216	@ (adr r3, 800a988 <__kernel_cos+0x160>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	f7f5 fce9 	bl	8000288 <__aeabi_dsub>
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	462b      	mov	r3, r5
 800a8ba:	f7f5 fe9d 	bl	80005f8 <__aeabi_dmul>
 800a8be:	a334      	add	r3, pc, #208	@ (adr r3, 800a990 <__kernel_cos+0x168>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fce2 	bl	800028c <__adddf3>
 800a8c8:	4622      	mov	r2, r4
 800a8ca:	462b      	mov	r3, r5
 800a8cc:	f7f5 fe94 	bl	80005f8 <__aeabi_dmul>
 800a8d0:	4622      	mov	r2, r4
 800a8d2:	462b      	mov	r3, r5
 800a8d4:	f7f5 fe90 	bl	80005f8 <__aeabi_dmul>
 800a8d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8dc:	4604      	mov	r4, r0
 800a8de:	460d      	mov	r5, r1
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	f7f5 fe88 	bl	80005f8 <__aeabi_dmul>
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f7f5 fcca 	bl	8000288 <__aeabi_dsub>
 800a8f4:	4b2b      	ldr	r3, [pc, #172]	@ (800a9a4 <__kernel_cos+0x17c>)
 800a8f6:	4598      	cmp	r8, r3
 800a8f8:	4606      	mov	r6, r0
 800a8fa:	460f      	mov	r7, r1
 800a8fc:	d810      	bhi.n	800a920 <__kernel_cos+0xf8>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	4650      	mov	r0, sl
 800a904:	4659      	mov	r1, fp
 800a906:	f7f5 fcbf 	bl	8000288 <__aeabi_dsub>
 800a90a:	460b      	mov	r3, r1
 800a90c:	4926      	ldr	r1, [pc, #152]	@ (800a9a8 <__kernel_cos+0x180>)
 800a90e:	4602      	mov	r2, r0
 800a910:	2000      	movs	r0, #0
 800a912:	f7f5 fcb9 	bl	8000288 <__aeabi_dsub>
 800a916:	ec41 0b10 	vmov	d0, r0, r1
 800a91a:	b003      	add	sp, #12
 800a91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a920:	4b22      	ldr	r3, [pc, #136]	@ (800a9ac <__kernel_cos+0x184>)
 800a922:	4921      	ldr	r1, [pc, #132]	@ (800a9a8 <__kernel_cos+0x180>)
 800a924:	4598      	cmp	r8, r3
 800a926:	bf8c      	ite	hi
 800a928:	4d21      	ldrhi	r5, [pc, #132]	@ (800a9b0 <__kernel_cos+0x188>)
 800a92a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a92e:	2400      	movs	r4, #0
 800a930:	4622      	mov	r2, r4
 800a932:	462b      	mov	r3, r5
 800a934:	2000      	movs	r0, #0
 800a936:	f7f5 fca7 	bl	8000288 <__aeabi_dsub>
 800a93a:	4622      	mov	r2, r4
 800a93c:	4680      	mov	r8, r0
 800a93e:	4689      	mov	r9, r1
 800a940:	462b      	mov	r3, r5
 800a942:	4650      	mov	r0, sl
 800a944:	4659      	mov	r1, fp
 800a946:	f7f5 fc9f 	bl	8000288 <__aeabi_dsub>
 800a94a:	4632      	mov	r2, r6
 800a94c:	463b      	mov	r3, r7
 800a94e:	f7f5 fc9b 	bl	8000288 <__aeabi_dsub>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4640      	mov	r0, r8
 800a958:	4649      	mov	r1, r9
 800a95a:	e7da      	b.n	800a912 <__kernel_cos+0xea>
 800a95c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a998 <__kernel_cos+0x170>
 800a960:	e7db      	b.n	800a91a <__kernel_cos+0xf2>
 800a962:	bf00      	nop
 800a964:	f3af 8000 	nop.w
 800a968:	be8838d4 	.word	0xbe8838d4
 800a96c:	bda8fae9 	.word	0xbda8fae9
 800a970:	bdb4b1c4 	.word	0xbdb4b1c4
 800a974:	3e21ee9e 	.word	0x3e21ee9e
 800a978:	809c52ad 	.word	0x809c52ad
 800a97c:	3e927e4f 	.word	0x3e927e4f
 800a980:	19cb1590 	.word	0x19cb1590
 800a984:	3efa01a0 	.word	0x3efa01a0
 800a988:	16c15177 	.word	0x16c15177
 800a98c:	3f56c16c 	.word	0x3f56c16c
 800a990:	5555554c 	.word	0x5555554c
 800a994:	3fa55555 	.word	0x3fa55555
 800a998:	00000000 	.word	0x00000000
 800a99c:	3ff00000 	.word	0x3ff00000
 800a9a0:	3fe00000 	.word	0x3fe00000
 800a9a4:	3fd33332 	.word	0x3fd33332
 800a9a8:	3ff00000 	.word	0x3ff00000
 800a9ac:	3fe90000 	.word	0x3fe90000
 800a9b0:	3fd20000 	.word	0x3fd20000
 800a9b4:	00000000 	.word	0x00000000

0800a9b8 <__kernel_sin>:
 800a9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9bc:	ec55 4b10 	vmov	r4, r5, d0
 800a9c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a9c4:	b085      	sub	sp, #20
 800a9c6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a9ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a9ce:	4680      	mov	r8, r0
 800a9d0:	d205      	bcs.n	800a9de <__kernel_sin+0x26>
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	f7f6 f8bf 	bl	8000b58 <__aeabi_d2iz>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d052      	beq.n	800aa84 <__kernel_sin+0xcc>
 800a9de:	4622      	mov	r2, r4
 800a9e0:	462b      	mov	r3, r5
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	f7f5 fe07 	bl	80005f8 <__aeabi_dmul>
 800a9ea:	4682      	mov	sl, r0
 800a9ec:	468b      	mov	fp, r1
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	f7f5 fdff 	bl	80005f8 <__aeabi_dmul>
 800a9fa:	a342      	add	r3, pc, #264	@ (adr r3, 800ab04 <__kernel_sin+0x14c>)
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	e9cd 0100 	strd	r0, r1, [sp]
 800aa04:	4650      	mov	r0, sl
 800aa06:	4659      	mov	r1, fp
 800aa08:	f7f5 fdf6 	bl	80005f8 <__aeabi_dmul>
 800aa0c:	a33f      	add	r3, pc, #252	@ (adr r3, 800ab0c <__kernel_sin+0x154>)
 800aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa12:	f7f5 fc39 	bl	8000288 <__aeabi_dsub>
 800aa16:	4652      	mov	r2, sl
 800aa18:	465b      	mov	r3, fp
 800aa1a:	f7f5 fded 	bl	80005f8 <__aeabi_dmul>
 800aa1e:	a33d      	add	r3, pc, #244	@ (adr r3, 800ab14 <__kernel_sin+0x15c>)
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	f7f5 fc32 	bl	800028c <__adddf3>
 800aa28:	4652      	mov	r2, sl
 800aa2a:	465b      	mov	r3, fp
 800aa2c:	f7f5 fde4 	bl	80005f8 <__aeabi_dmul>
 800aa30:	a33a      	add	r3, pc, #232	@ (adr r3, 800ab1c <__kernel_sin+0x164>)
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	f7f5 fc27 	bl	8000288 <__aeabi_dsub>
 800aa3a:	4652      	mov	r2, sl
 800aa3c:	465b      	mov	r3, fp
 800aa3e:	f7f5 fddb 	bl	80005f8 <__aeabi_dmul>
 800aa42:	a338      	add	r3, pc, #224	@ (adr r3, 800ab24 <__kernel_sin+0x16c>)
 800aa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa48:	f7f5 fc20 	bl	800028c <__adddf3>
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	460f      	mov	r7, r1
 800aa50:	f1b8 0f00 	cmp.w	r8, #0
 800aa54:	d11b      	bne.n	800aa8e <__kernel_sin+0xd6>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4650      	mov	r0, sl
 800aa5c:	4659      	mov	r1, fp
 800aa5e:	f7f5 fdcb 	bl	80005f8 <__aeabi_dmul>
 800aa62:	a325      	add	r3, pc, #148	@ (adr r3, 800aaf8 <__kernel_sin+0x140>)
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f7f5 fc0e 	bl	8000288 <__aeabi_dsub>
 800aa6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa70:	f7f5 fdc2 	bl	80005f8 <__aeabi_dmul>
 800aa74:	4602      	mov	r2, r0
 800aa76:	460b      	mov	r3, r1
 800aa78:	4620      	mov	r0, r4
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	f7f5 fc06 	bl	800028c <__adddf3>
 800aa80:	4604      	mov	r4, r0
 800aa82:	460d      	mov	r5, r1
 800aa84:	ec45 4b10 	vmov	d0, r4, r5
 800aa88:	b005      	add	sp, #20
 800aa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa92:	4b1b      	ldr	r3, [pc, #108]	@ (800ab00 <__kernel_sin+0x148>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	f7f5 fdaf 	bl	80005f8 <__aeabi_dmul>
 800aa9a:	4632      	mov	r2, r6
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	4689      	mov	r9, r1
 800aaa0:	463b      	mov	r3, r7
 800aaa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaa6:	f7f5 fda7 	bl	80005f8 <__aeabi_dmul>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	4640      	mov	r0, r8
 800aab0:	4649      	mov	r1, r9
 800aab2:	f7f5 fbe9 	bl	8000288 <__aeabi_dsub>
 800aab6:	4652      	mov	r2, sl
 800aab8:	465b      	mov	r3, fp
 800aaba:	f7f5 fd9d 	bl	80005f8 <__aeabi_dmul>
 800aabe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aac2:	f7f5 fbe1 	bl	8000288 <__aeabi_dsub>
 800aac6:	a30c      	add	r3, pc, #48	@ (adr r3, 800aaf8 <__kernel_sin+0x140>)
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	4606      	mov	r6, r0
 800aace:	460f      	mov	r7, r1
 800aad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aad4:	f7f5 fd90 	bl	80005f8 <__aeabi_dmul>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	4630      	mov	r0, r6
 800aade:	4639      	mov	r1, r7
 800aae0:	f7f5 fbd4 	bl	800028c <__adddf3>
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4620      	mov	r0, r4
 800aaea:	4629      	mov	r1, r5
 800aaec:	f7f5 fbcc 	bl	8000288 <__aeabi_dsub>
 800aaf0:	e7c6      	b.n	800aa80 <__kernel_sin+0xc8>
 800aaf2:	bf00      	nop
 800aaf4:	f3af 8000 	nop.w
 800aaf8:	55555549 	.word	0x55555549
 800aafc:	3fc55555 	.word	0x3fc55555
 800ab00:	3fe00000 	.word	0x3fe00000
 800ab04:	5acfd57c 	.word	0x5acfd57c
 800ab08:	3de5d93a 	.word	0x3de5d93a
 800ab0c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ab10:	3e5ae5e6 	.word	0x3e5ae5e6
 800ab14:	57b1fe7d 	.word	0x57b1fe7d
 800ab18:	3ec71de3 	.word	0x3ec71de3
 800ab1c:	19c161d5 	.word	0x19c161d5
 800ab20:	3f2a01a0 	.word	0x3f2a01a0
 800ab24:	1110f8a6 	.word	0x1110f8a6
 800ab28:	3f811111 	.word	0x3f811111
 800ab2c:	00000000 	.word	0x00000000

0800ab30 <__ieee754_rem_pio2>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	ec57 6b10 	vmov	r6, r7, d0
 800ab38:	4bc5      	ldr	r3, [pc, #788]	@ (800ae50 <__ieee754_rem_pio2+0x320>)
 800ab3a:	b08d      	sub	sp, #52	@ 0x34
 800ab3c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ab40:	4598      	cmp	r8, r3
 800ab42:	4604      	mov	r4, r0
 800ab44:	9704      	str	r7, [sp, #16]
 800ab46:	d807      	bhi.n	800ab58 <__ieee754_rem_pio2+0x28>
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	ed80 0b00 	vstr	d0, [r0]
 800ab50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ab54:	2500      	movs	r5, #0
 800ab56:	e028      	b.n	800abaa <__ieee754_rem_pio2+0x7a>
 800ab58:	4bbe      	ldr	r3, [pc, #760]	@ (800ae54 <__ieee754_rem_pio2+0x324>)
 800ab5a:	4598      	cmp	r8, r3
 800ab5c:	d878      	bhi.n	800ac50 <__ieee754_rem_pio2+0x120>
 800ab5e:	9b04      	ldr	r3, [sp, #16]
 800ab60:	4dbd      	ldr	r5, [pc, #756]	@ (800ae58 <__ieee754_rem_pio2+0x328>)
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	4630      	mov	r0, r6
 800ab66:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ae18 <__ieee754_rem_pio2+0x2e8>)
 800ab68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	dd38      	ble.n	800abe2 <__ieee754_rem_pio2+0xb2>
 800ab70:	f7f5 fb8a 	bl	8000288 <__aeabi_dsub>
 800ab74:	45a8      	cmp	r8, r5
 800ab76:	4606      	mov	r6, r0
 800ab78:	460f      	mov	r7, r1
 800ab7a:	d01a      	beq.n	800abb2 <__ieee754_rem_pio2+0x82>
 800ab7c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ae20 <__ieee754_rem_pio2+0x2f0>)
 800ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab82:	f7f5 fb81 	bl	8000288 <__aeabi_dsub>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4680      	mov	r8, r0
 800ab8c:	4689      	mov	r9, r1
 800ab8e:	4630      	mov	r0, r6
 800ab90:	4639      	mov	r1, r7
 800ab92:	f7f5 fb79 	bl	8000288 <__aeabi_dsub>
 800ab96:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ae20 <__ieee754_rem_pio2+0x2f0>)
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	f7f5 fb74 	bl	8000288 <__aeabi_dsub>
 800aba0:	e9c4 8900 	strd	r8, r9, [r4]
 800aba4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aba8:	2501      	movs	r5, #1
 800abaa:	4628      	mov	r0, r5
 800abac:	b00d      	add	sp, #52	@ 0x34
 800abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb2:	a39d      	add	r3, pc, #628	@ (adr r3, 800ae28 <__ieee754_rem_pio2+0x2f8>)
 800abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb8:	f7f5 fb66 	bl	8000288 <__aeabi_dsub>
 800abbc:	a39c      	add	r3, pc, #624	@ (adr r3, 800ae30 <__ieee754_rem_pio2+0x300>)
 800abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc2:	4606      	mov	r6, r0
 800abc4:	460f      	mov	r7, r1
 800abc6:	f7f5 fb5f 	bl	8000288 <__aeabi_dsub>
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	4680      	mov	r8, r0
 800abd0:	4689      	mov	r9, r1
 800abd2:	4630      	mov	r0, r6
 800abd4:	4639      	mov	r1, r7
 800abd6:	f7f5 fb57 	bl	8000288 <__aeabi_dsub>
 800abda:	a395      	add	r3, pc, #596	@ (adr r3, 800ae30 <__ieee754_rem_pio2+0x300>)
 800abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe0:	e7dc      	b.n	800ab9c <__ieee754_rem_pio2+0x6c>
 800abe2:	f7f5 fb53 	bl	800028c <__adddf3>
 800abe6:	45a8      	cmp	r8, r5
 800abe8:	4606      	mov	r6, r0
 800abea:	460f      	mov	r7, r1
 800abec:	d018      	beq.n	800ac20 <__ieee754_rem_pio2+0xf0>
 800abee:	a38c      	add	r3, pc, #560	@ (adr r3, 800ae20 <__ieee754_rem_pio2+0x2f0>)
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	f7f5 fb4a 	bl	800028c <__adddf3>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	4680      	mov	r8, r0
 800abfe:	4689      	mov	r9, r1
 800ac00:	4630      	mov	r0, r6
 800ac02:	4639      	mov	r1, r7
 800ac04:	f7f5 fb40 	bl	8000288 <__aeabi_dsub>
 800ac08:	a385      	add	r3, pc, #532	@ (adr r3, 800ae20 <__ieee754_rem_pio2+0x2f0>)
 800ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0e:	f7f5 fb3d 	bl	800028c <__adddf3>
 800ac12:	f04f 35ff 	mov.w	r5, #4294967295
 800ac16:	e9c4 8900 	strd	r8, r9, [r4]
 800ac1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac1e:	e7c4      	b.n	800abaa <__ieee754_rem_pio2+0x7a>
 800ac20:	a381      	add	r3, pc, #516	@ (adr r3, 800ae28 <__ieee754_rem_pio2+0x2f8>)
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	f7f5 fb31 	bl	800028c <__adddf3>
 800ac2a:	a381      	add	r3, pc, #516	@ (adr r3, 800ae30 <__ieee754_rem_pio2+0x300>)
 800ac2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac30:	4606      	mov	r6, r0
 800ac32:	460f      	mov	r7, r1
 800ac34:	f7f5 fb2a 	bl	800028c <__adddf3>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	4680      	mov	r8, r0
 800ac3e:	4689      	mov	r9, r1
 800ac40:	4630      	mov	r0, r6
 800ac42:	4639      	mov	r1, r7
 800ac44:	f7f5 fb20 	bl	8000288 <__aeabi_dsub>
 800ac48:	a379      	add	r3, pc, #484	@ (adr r3, 800ae30 <__ieee754_rem_pio2+0x300>)
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	e7de      	b.n	800ac0e <__ieee754_rem_pio2+0xde>
 800ac50:	4b82      	ldr	r3, [pc, #520]	@ (800ae5c <__ieee754_rem_pio2+0x32c>)
 800ac52:	4598      	cmp	r8, r3
 800ac54:	f200 80d1 	bhi.w	800adfa <__ieee754_rem_pio2+0x2ca>
 800ac58:	f000 f966 	bl	800af28 <fabs>
 800ac5c:	ec57 6b10 	vmov	r6, r7, d0
 800ac60:	a375      	add	r3, pc, #468	@ (adr r3, 800ae38 <__ieee754_rem_pio2+0x308>)
 800ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac66:	4630      	mov	r0, r6
 800ac68:	4639      	mov	r1, r7
 800ac6a:	f7f5 fcc5 	bl	80005f8 <__aeabi_dmul>
 800ac6e:	4b7c      	ldr	r3, [pc, #496]	@ (800ae60 <__ieee754_rem_pio2+0x330>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	f7f5 fb0b 	bl	800028c <__adddf3>
 800ac76:	f7f5 ff6f 	bl	8000b58 <__aeabi_d2iz>
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	f7f5 fc52 	bl	8000524 <__aeabi_i2d>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac88:	a363      	add	r3, pc, #396	@ (adr r3, 800ae18 <__ieee754_rem_pio2+0x2e8>)
 800ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8e:	f7f5 fcb3 	bl	80005f8 <__aeabi_dmul>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	4630      	mov	r0, r6
 800ac98:	4639      	mov	r1, r7
 800ac9a:	f7f5 faf5 	bl	8000288 <__aeabi_dsub>
 800ac9e:	a360      	add	r3, pc, #384	@ (adr r3, 800ae20 <__ieee754_rem_pio2+0x2f0>)
 800aca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca4:	4682      	mov	sl, r0
 800aca6:	468b      	mov	fp, r1
 800aca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acac:	f7f5 fca4 	bl	80005f8 <__aeabi_dmul>
 800acb0:	2d1f      	cmp	r5, #31
 800acb2:	4606      	mov	r6, r0
 800acb4:	460f      	mov	r7, r1
 800acb6:	dc0c      	bgt.n	800acd2 <__ieee754_rem_pio2+0x1a2>
 800acb8:	4b6a      	ldr	r3, [pc, #424]	@ (800ae64 <__ieee754_rem_pio2+0x334>)
 800acba:	1e6a      	subs	r2, r5, #1
 800acbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc0:	4543      	cmp	r3, r8
 800acc2:	d006      	beq.n	800acd2 <__ieee754_rem_pio2+0x1a2>
 800acc4:	4632      	mov	r2, r6
 800acc6:	463b      	mov	r3, r7
 800acc8:	4650      	mov	r0, sl
 800acca:	4659      	mov	r1, fp
 800accc:	f7f5 fadc 	bl	8000288 <__aeabi_dsub>
 800acd0:	e00e      	b.n	800acf0 <__ieee754_rem_pio2+0x1c0>
 800acd2:	463b      	mov	r3, r7
 800acd4:	4632      	mov	r2, r6
 800acd6:	4650      	mov	r0, sl
 800acd8:	4659      	mov	r1, fp
 800acda:	f7f5 fad5 	bl	8000288 <__aeabi_dsub>
 800acde:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ace2:	9305      	str	r3, [sp, #20]
 800ace4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ace8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800acec:	2b10      	cmp	r3, #16
 800acee:	dc02      	bgt.n	800acf6 <__ieee754_rem_pio2+0x1c6>
 800acf0:	e9c4 0100 	strd	r0, r1, [r4]
 800acf4:	e039      	b.n	800ad6a <__ieee754_rem_pio2+0x23a>
 800acf6:	a34c      	add	r3, pc, #304	@ (adr r3, 800ae28 <__ieee754_rem_pio2+0x2f8>)
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad00:	f7f5 fc7a 	bl	80005f8 <__aeabi_dmul>
 800ad04:	4606      	mov	r6, r0
 800ad06:	460f      	mov	r7, r1
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4650      	mov	r0, sl
 800ad0e:	4659      	mov	r1, fp
 800ad10:	f7f5 faba 	bl	8000288 <__aeabi_dsub>
 800ad14:	4602      	mov	r2, r0
 800ad16:	460b      	mov	r3, r1
 800ad18:	4680      	mov	r8, r0
 800ad1a:	4689      	mov	r9, r1
 800ad1c:	4650      	mov	r0, sl
 800ad1e:	4659      	mov	r1, fp
 800ad20:	f7f5 fab2 	bl	8000288 <__aeabi_dsub>
 800ad24:	4632      	mov	r2, r6
 800ad26:	463b      	mov	r3, r7
 800ad28:	f7f5 faae 	bl	8000288 <__aeabi_dsub>
 800ad2c:	a340      	add	r3, pc, #256	@ (adr r3, 800ae30 <__ieee754_rem_pio2+0x300>)
 800ad2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad32:	4606      	mov	r6, r0
 800ad34:	460f      	mov	r7, r1
 800ad36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad3a:	f7f5 fc5d 	bl	80005f8 <__aeabi_dmul>
 800ad3e:	4632      	mov	r2, r6
 800ad40:	463b      	mov	r3, r7
 800ad42:	f7f5 faa1 	bl	8000288 <__aeabi_dsub>
 800ad46:	4602      	mov	r2, r0
 800ad48:	460b      	mov	r3, r1
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	460f      	mov	r7, r1
 800ad4e:	4640      	mov	r0, r8
 800ad50:	4649      	mov	r1, r9
 800ad52:	f7f5 fa99 	bl	8000288 <__aeabi_dsub>
 800ad56:	9a05      	ldr	r2, [sp, #20]
 800ad58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	2b31      	cmp	r3, #49	@ 0x31
 800ad60:	dc20      	bgt.n	800ada4 <__ieee754_rem_pio2+0x274>
 800ad62:	e9c4 0100 	strd	r0, r1, [r4]
 800ad66:	46c2      	mov	sl, r8
 800ad68:	46cb      	mov	fp, r9
 800ad6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ad6e:	4650      	mov	r0, sl
 800ad70:	4642      	mov	r2, r8
 800ad72:	464b      	mov	r3, r9
 800ad74:	4659      	mov	r1, fp
 800ad76:	f7f5 fa87 	bl	8000288 <__aeabi_dsub>
 800ad7a:	463b      	mov	r3, r7
 800ad7c:	4632      	mov	r2, r6
 800ad7e:	f7f5 fa83 	bl	8000288 <__aeabi_dsub>
 800ad82:	9b04      	ldr	r3, [sp, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad8a:	f6bf af0e 	bge.w	800abaa <__ieee754_rem_pio2+0x7a>
 800ad8e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ad92:	6063      	str	r3, [r4, #4]
 800ad94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad98:	f8c4 8000 	str.w	r8, [r4]
 800ad9c:	60a0      	str	r0, [r4, #8]
 800ad9e:	60e3      	str	r3, [r4, #12]
 800ada0:	426d      	negs	r5, r5
 800ada2:	e702      	b.n	800abaa <__ieee754_rem_pio2+0x7a>
 800ada4:	a326      	add	r3, pc, #152	@ (adr r3, 800ae40 <__ieee754_rem_pio2+0x310>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adae:	f7f5 fc23 	bl	80005f8 <__aeabi_dmul>
 800adb2:	4606      	mov	r6, r0
 800adb4:	460f      	mov	r7, r1
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4640      	mov	r0, r8
 800adbc:	4649      	mov	r1, r9
 800adbe:	f7f5 fa63 	bl	8000288 <__aeabi_dsub>
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	4682      	mov	sl, r0
 800adc8:	468b      	mov	fp, r1
 800adca:	4640      	mov	r0, r8
 800adcc:	4649      	mov	r1, r9
 800adce:	f7f5 fa5b 	bl	8000288 <__aeabi_dsub>
 800add2:	4632      	mov	r2, r6
 800add4:	463b      	mov	r3, r7
 800add6:	f7f5 fa57 	bl	8000288 <__aeabi_dsub>
 800adda:	a31b      	add	r3, pc, #108	@ (adr r3, 800ae48 <__ieee754_rem_pio2+0x318>)
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	4606      	mov	r6, r0
 800ade2:	460f      	mov	r7, r1
 800ade4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ade8:	f7f5 fc06 	bl	80005f8 <__aeabi_dmul>
 800adec:	4632      	mov	r2, r6
 800adee:	463b      	mov	r3, r7
 800adf0:	f7f5 fa4a 	bl	8000288 <__aeabi_dsub>
 800adf4:	4606      	mov	r6, r0
 800adf6:	460f      	mov	r7, r1
 800adf8:	e764      	b.n	800acc4 <__ieee754_rem_pio2+0x194>
 800adfa:	4b1b      	ldr	r3, [pc, #108]	@ (800ae68 <__ieee754_rem_pio2+0x338>)
 800adfc:	4598      	cmp	r8, r3
 800adfe:	d935      	bls.n	800ae6c <__ieee754_rem_pio2+0x33c>
 800ae00:	4632      	mov	r2, r6
 800ae02:	463b      	mov	r3, r7
 800ae04:	4630      	mov	r0, r6
 800ae06:	4639      	mov	r1, r7
 800ae08:	f7f5 fa3e 	bl	8000288 <__aeabi_dsub>
 800ae0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae10:	e9c4 0100 	strd	r0, r1, [r4]
 800ae14:	e69e      	b.n	800ab54 <__ieee754_rem_pio2+0x24>
 800ae16:	bf00      	nop
 800ae18:	54400000 	.word	0x54400000
 800ae1c:	3ff921fb 	.word	0x3ff921fb
 800ae20:	1a626331 	.word	0x1a626331
 800ae24:	3dd0b461 	.word	0x3dd0b461
 800ae28:	1a600000 	.word	0x1a600000
 800ae2c:	3dd0b461 	.word	0x3dd0b461
 800ae30:	2e037073 	.word	0x2e037073
 800ae34:	3ba3198a 	.word	0x3ba3198a
 800ae38:	6dc9c883 	.word	0x6dc9c883
 800ae3c:	3fe45f30 	.word	0x3fe45f30
 800ae40:	2e000000 	.word	0x2e000000
 800ae44:	3ba3198a 	.word	0x3ba3198a
 800ae48:	252049c1 	.word	0x252049c1
 800ae4c:	397b839a 	.word	0x397b839a
 800ae50:	3fe921fb 	.word	0x3fe921fb
 800ae54:	4002d97b 	.word	0x4002d97b
 800ae58:	3ff921fb 	.word	0x3ff921fb
 800ae5c:	413921fb 	.word	0x413921fb
 800ae60:	3fe00000 	.word	0x3fe00000
 800ae64:	0800bc88 	.word	0x0800bc88
 800ae68:	7fefffff 	.word	0x7fefffff
 800ae6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ae70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ae74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ae78:	4630      	mov	r0, r6
 800ae7a:	460f      	mov	r7, r1
 800ae7c:	f7f5 fe6c 	bl	8000b58 <__aeabi_d2iz>
 800ae80:	f7f5 fb50 	bl	8000524 <__aeabi_i2d>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4630      	mov	r0, r6
 800ae8a:	4639      	mov	r1, r7
 800ae8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae90:	f7f5 f9fa 	bl	8000288 <__aeabi_dsub>
 800ae94:	4b22      	ldr	r3, [pc, #136]	@ (800af20 <__ieee754_rem_pio2+0x3f0>)
 800ae96:	2200      	movs	r2, #0
 800ae98:	f7f5 fbae 	bl	80005f8 <__aeabi_dmul>
 800ae9c:	460f      	mov	r7, r1
 800ae9e:	4606      	mov	r6, r0
 800aea0:	f7f5 fe5a 	bl	8000b58 <__aeabi_d2iz>
 800aea4:	f7f5 fb3e 	bl	8000524 <__aeabi_i2d>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4630      	mov	r0, r6
 800aeae:	4639      	mov	r1, r7
 800aeb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aeb4:	f7f5 f9e8 	bl	8000288 <__aeabi_dsub>
 800aeb8:	4b19      	ldr	r3, [pc, #100]	@ (800af20 <__ieee754_rem_pio2+0x3f0>)
 800aeba:	2200      	movs	r2, #0
 800aebc:	f7f5 fb9c 	bl	80005f8 <__aeabi_dmul>
 800aec0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800aec4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800aec8:	f04f 0803 	mov.w	r8, #3
 800aecc:	2600      	movs	r6, #0
 800aece:	2700      	movs	r7, #0
 800aed0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800aed4:	4632      	mov	r2, r6
 800aed6:	463b      	mov	r3, r7
 800aed8:	46c2      	mov	sl, r8
 800aeda:	f108 38ff 	add.w	r8, r8, #4294967295
 800aede:	f7f5 fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d1f4      	bne.n	800aed0 <__ieee754_rem_pio2+0x3a0>
 800aee6:	4b0f      	ldr	r3, [pc, #60]	@ (800af24 <__ieee754_rem_pio2+0x3f4>)
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	2302      	movs	r3, #2
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	462a      	mov	r2, r5
 800aef0:	4653      	mov	r3, sl
 800aef2:	4621      	mov	r1, r4
 800aef4:	a806      	add	r0, sp, #24
 800aef6:	f000 f81f 	bl	800af38 <__kernel_rem_pio2>
 800aefa:	9b04      	ldr	r3, [sp, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	4605      	mov	r5, r0
 800af00:	f6bf ae53 	bge.w	800abaa <__ieee754_rem_pio2+0x7a>
 800af04:	e9d4 2100 	ldrd	r2, r1, [r4]
 800af08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af0c:	e9c4 2300 	strd	r2, r3, [r4]
 800af10:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800af14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af18:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800af1c:	e740      	b.n	800ada0 <__ieee754_rem_pio2+0x270>
 800af1e:	bf00      	nop
 800af20:	41700000 	.word	0x41700000
 800af24:	0800bd08 	.word	0x0800bd08

0800af28 <fabs>:
 800af28:	ec51 0b10 	vmov	r0, r1, d0
 800af2c:	4602      	mov	r2, r0
 800af2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800af32:	ec43 2b10 	vmov	d0, r2, r3
 800af36:	4770      	bx	lr

0800af38 <__kernel_rem_pio2>:
 800af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	ed2d 8b02 	vpush	{d8}
 800af40:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800af44:	f112 0f14 	cmn.w	r2, #20
 800af48:	9306      	str	r3, [sp, #24]
 800af4a:	9104      	str	r1, [sp, #16]
 800af4c:	4bbe      	ldr	r3, [pc, #760]	@ (800b248 <__kernel_rem_pio2+0x310>)
 800af4e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800af50:	9008      	str	r0, [sp, #32]
 800af52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	9b06      	ldr	r3, [sp, #24]
 800af5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800af5e:	bfa8      	it	ge
 800af60:	1ed4      	subge	r4, r2, #3
 800af62:	9305      	str	r3, [sp, #20]
 800af64:	bfb2      	itee	lt
 800af66:	2400      	movlt	r4, #0
 800af68:	2318      	movge	r3, #24
 800af6a:	fb94 f4f3 	sdivge	r4, r4, r3
 800af6e:	f06f 0317 	mvn.w	r3, #23
 800af72:	fb04 3303 	mla	r3, r4, r3, r3
 800af76:	eb03 0b02 	add.w	fp, r3, r2
 800af7a:	9b00      	ldr	r3, [sp, #0]
 800af7c:	9a05      	ldr	r2, [sp, #20]
 800af7e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800b238 <__kernel_rem_pio2+0x300>
 800af82:	eb03 0802 	add.w	r8, r3, r2
 800af86:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800af88:	1aa7      	subs	r7, r4, r2
 800af8a:	ae20      	add	r6, sp, #128	@ 0x80
 800af8c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800af90:	2500      	movs	r5, #0
 800af92:	4545      	cmp	r5, r8
 800af94:	dd13      	ble.n	800afbe <__kernel_rem_pio2+0x86>
 800af96:	9b06      	ldr	r3, [sp, #24]
 800af98:	aa20      	add	r2, sp, #128	@ 0x80
 800af9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800af9e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800afa2:	f04f 0800 	mov.w	r8, #0
 800afa6:	9b00      	ldr	r3, [sp, #0]
 800afa8:	4598      	cmp	r8, r3
 800afaa:	dc31      	bgt.n	800b010 <__kernel_rem_pio2+0xd8>
 800afac:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800b238 <__kernel_rem_pio2+0x300>
 800afb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800afb8:	462f      	mov	r7, r5
 800afba:	2600      	movs	r6, #0
 800afbc:	e01b      	b.n	800aff6 <__kernel_rem_pio2+0xbe>
 800afbe:	42ef      	cmn	r7, r5
 800afc0:	d407      	bmi.n	800afd2 <__kernel_rem_pio2+0x9a>
 800afc2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800afc6:	f7f5 faad 	bl	8000524 <__aeabi_i2d>
 800afca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800afce:	3501      	adds	r5, #1
 800afd0:	e7df      	b.n	800af92 <__kernel_rem_pio2+0x5a>
 800afd2:	ec51 0b18 	vmov	r0, r1, d8
 800afd6:	e7f8      	b.n	800afca <__kernel_rem_pio2+0x92>
 800afd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afdc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800afe0:	f7f5 fb0a 	bl	80005f8 <__aeabi_dmul>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afec:	f7f5 f94e 	bl	800028c <__adddf3>
 800aff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aff4:	3601      	adds	r6, #1
 800aff6:	9b05      	ldr	r3, [sp, #20]
 800aff8:	429e      	cmp	r6, r3
 800affa:	f1a7 0708 	sub.w	r7, r7, #8
 800affe:	ddeb      	ble.n	800afd8 <__kernel_rem_pio2+0xa0>
 800b000:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b004:	f108 0801 	add.w	r8, r8, #1
 800b008:	ecaa 7b02 	vstmia	sl!, {d7}
 800b00c:	3508      	adds	r5, #8
 800b00e:	e7ca      	b.n	800afa6 <__kernel_rem_pio2+0x6e>
 800b010:	9b00      	ldr	r3, [sp, #0]
 800b012:	f8dd 8000 	ldr.w	r8, [sp]
 800b016:	aa0c      	add	r2, sp, #48	@ 0x30
 800b018:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b01c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b01e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b020:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b024:	9309      	str	r3, [sp, #36]	@ 0x24
 800b026:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800b02a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b02c:	ab98      	add	r3, sp, #608	@ 0x260
 800b02e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b032:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800b036:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b03a:	ac0c      	add	r4, sp, #48	@ 0x30
 800b03c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b03e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800b042:	46a1      	mov	r9, r4
 800b044:	46c2      	mov	sl, r8
 800b046:	f1ba 0f00 	cmp.w	sl, #0
 800b04a:	f1a5 0508 	sub.w	r5, r5, #8
 800b04e:	dc77      	bgt.n	800b140 <__kernel_rem_pio2+0x208>
 800b050:	4658      	mov	r0, fp
 800b052:	ed9d 0b02 	vldr	d0, [sp, #8]
 800b056:	f000 fac7 	bl	800b5e8 <scalbn>
 800b05a:	ec57 6b10 	vmov	r6, r7, d0
 800b05e:	2200      	movs	r2, #0
 800b060:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b064:	4630      	mov	r0, r6
 800b066:	4639      	mov	r1, r7
 800b068:	f7f5 fac6 	bl	80005f8 <__aeabi_dmul>
 800b06c:	ec41 0b10 	vmov	d0, r0, r1
 800b070:	f000 fb3a 	bl	800b6e8 <floor>
 800b074:	4b75      	ldr	r3, [pc, #468]	@ (800b24c <__kernel_rem_pio2+0x314>)
 800b076:	ec51 0b10 	vmov	r0, r1, d0
 800b07a:	2200      	movs	r2, #0
 800b07c:	f7f5 fabc 	bl	80005f8 <__aeabi_dmul>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	4630      	mov	r0, r6
 800b086:	4639      	mov	r1, r7
 800b088:	f7f5 f8fe 	bl	8000288 <__aeabi_dsub>
 800b08c:	460f      	mov	r7, r1
 800b08e:	4606      	mov	r6, r0
 800b090:	f7f5 fd62 	bl	8000b58 <__aeabi_d2iz>
 800b094:	9002      	str	r0, [sp, #8]
 800b096:	f7f5 fa45 	bl	8000524 <__aeabi_i2d>
 800b09a:	4602      	mov	r2, r0
 800b09c:	460b      	mov	r3, r1
 800b09e:	4630      	mov	r0, r6
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	f7f5 f8f1 	bl	8000288 <__aeabi_dsub>
 800b0a6:	f1bb 0f00 	cmp.w	fp, #0
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	460f      	mov	r7, r1
 800b0ae:	dd6c      	ble.n	800b18a <__kernel_rem_pio2+0x252>
 800b0b0:	f108 31ff 	add.w	r1, r8, #4294967295
 800b0b4:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0b6:	9d02      	ldr	r5, [sp, #8]
 800b0b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b0bc:	f1cb 0018 	rsb	r0, fp, #24
 800b0c0:	fa43 f200 	asr.w	r2, r3, r0
 800b0c4:	4415      	add	r5, r2
 800b0c6:	4082      	lsls	r2, r0
 800b0c8:	1a9b      	subs	r3, r3, r2
 800b0ca:	aa0c      	add	r2, sp, #48	@ 0x30
 800b0cc:	9502      	str	r5, [sp, #8]
 800b0ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b0d2:	f1cb 0217 	rsb	r2, fp, #23
 800b0d6:	fa43 f902 	asr.w	r9, r3, r2
 800b0da:	f1b9 0f00 	cmp.w	r9, #0
 800b0de:	dd64      	ble.n	800b1aa <__kernel_rem_pio2+0x272>
 800b0e0:	9b02      	ldr	r3, [sp, #8]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	9302      	str	r3, [sp, #8]
 800b0e8:	4615      	mov	r5, r2
 800b0ea:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b0ee:	4590      	cmp	r8, r2
 800b0f0:	f300 80b8 	bgt.w	800b264 <__kernel_rem_pio2+0x32c>
 800b0f4:	f1bb 0f00 	cmp.w	fp, #0
 800b0f8:	dd07      	ble.n	800b10a <__kernel_rem_pio2+0x1d2>
 800b0fa:	f1bb 0f01 	cmp.w	fp, #1
 800b0fe:	f000 80bf 	beq.w	800b280 <__kernel_rem_pio2+0x348>
 800b102:	f1bb 0f02 	cmp.w	fp, #2
 800b106:	f000 80c6 	beq.w	800b296 <__kernel_rem_pio2+0x35e>
 800b10a:	f1b9 0f02 	cmp.w	r9, #2
 800b10e:	d14c      	bne.n	800b1aa <__kernel_rem_pio2+0x272>
 800b110:	4632      	mov	r2, r6
 800b112:	463b      	mov	r3, r7
 800b114:	494e      	ldr	r1, [pc, #312]	@ (800b250 <__kernel_rem_pio2+0x318>)
 800b116:	2000      	movs	r0, #0
 800b118:	f7f5 f8b6 	bl	8000288 <__aeabi_dsub>
 800b11c:	4606      	mov	r6, r0
 800b11e:	460f      	mov	r7, r1
 800b120:	2d00      	cmp	r5, #0
 800b122:	d042      	beq.n	800b1aa <__kernel_rem_pio2+0x272>
 800b124:	4658      	mov	r0, fp
 800b126:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800b240 <__kernel_rem_pio2+0x308>
 800b12a:	f000 fa5d 	bl	800b5e8 <scalbn>
 800b12e:	4630      	mov	r0, r6
 800b130:	4639      	mov	r1, r7
 800b132:	ec53 2b10 	vmov	r2, r3, d0
 800b136:	f7f5 f8a7 	bl	8000288 <__aeabi_dsub>
 800b13a:	4606      	mov	r6, r0
 800b13c:	460f      	mov	r7, r1
 800b13e:	e034      	b.n	800b1aa <__kernel_rem_pio2+0x272>
 800b140:	4b44      	ldr	r3, [pc, #272]	@ (800b254 <__kernel_rem_pio2+0x31c>)
 800b142:	2200      	movs	r2, #0
 800b144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b148:	f7f5 fa56 	bl	80005f8 <__aeabi_dmul>
 800b14c:	f7f5 fd04 	bl	8000b58 <__aeabi_d2iz>
 800b150:	f7f5 f9e8 	bl	8000524 <__aeabi_i2d>
 800b154:	4b40      	ldr	r3, [pc, #256]	@ (800b258 <__kernel_rem_pio2+0x320>)
 800b156:	2200      	movs	r2, #0
 800b158:	4606      	mov	r6, r0
 800b15a:	460f      	mov	r7, r1
 800b15c:	f7f5 fa4c 	bl	80005f8 <__aeabi_dmul>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b168:	f7f5 f88e 	bl	8000288 <__aeabi_dsub>
 800b16c:	f7f5 fcf4 	bl	8000b58 <__aeabi_d2iz>
 800b170:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b174:	f849 0b04 	str.w	r0, [r9], #4
 800b178:	4639      	mov	r1, r7
 800b17a:	4630      	mov	r0, r6
 800b17c:	f7f5 f886 	bl	800028c <__adddf3>
 800b180:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b188:	e75d      	b.n	800b046 <__kernel_rem_pio2+0x10e>
 800b18a:	d107      	bne.n	800b19c <__kernel_rem_pio2+0x264>
 800b18c:	f108 33ff 	add.w	r3, r8, #4294967295
 800b190:	aa0c      	add	r2, sp, #48	@ 0x30
 800b192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b196:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b19a:	e79e      	b.n	800b0da <__kernel_rem_pio2+0x1a2>
 800b19c:	4b2f      	ldr	r3, [pc, #188]	@ (800b25c <__kernel_rem_pio2+0x324>)
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f7f5 fcb0 	bl	8000b04 <__aeabi_dcmpge>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d143      	bne.n	800b230 <__kernel_rem_pio2+0x2f8>
 800b1a8:	4681      	mov	r9, r0
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	4639      	mov	r1, r7
 800b1b2:	f7f5 fc89 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f000 80bf 	beq.w	800b33a <__kernel_rem_pio2+0x402>
 800b1bc:	f108 33ff 	add.w	r3, r8, #4294967295
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	9900      	ldr	r1, [sp, #0]
 800b1c4:	428b      	cmp	r3, r1
 800b1c6:	da6e      	bge.n	800b2a6 <__kernel_rem_pio2+0x36e>
 800b1c8:	2a00      	cmp	r2, #0
 800b1ca:	f000 8089 	beq.w	800b2e0 <__kernel_rem_pio2+0x3a8>
 800b1ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1d2:	ab0c      	add	r3, sp, #48	@ 0x30
 800b1d4:	f1ab 0b18 	sub.w	fp, fp, #24
 800b1d8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d0f6      	beq.n	800b1ce <__kernel_rem_pio2+0x296>
 800b1e0:	4658      	mov	r0, fp
 800b1e2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b240 <__kernel_rem_pio2+0x308>
 800b1e6:	f000 f9ff 	bl	800b5e8 <scalbn>
 800b1ea:	f108 0301 	add.w	r3, r8, #1
 800b1ee:	00da      	lsls	r2, r3, #3
 800b1f0:	9205      	str	r2, [sp, #20]
 800b1f2:	ec55 4b10 	vmov	r4, r5, d0
 800b1f6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b1f8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800b254 <__kernel_rem_pio2+0x31c>
 800b1fc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b200:	4646      	mov	r6, r8
 800b202:	f04f 0a00 	mov.w	sl, #0
 800b206:	2e00      	cmp	r6, #0
 800b208:	f280 80cf 	bge.w	800b3aa <__kernel_rem_pio2+0x472>
 800b20c:	4644      	mov	r4, r8
 800b20e:	2c00      	cmp	r4, #0
 800b210:	f2c0 80fd 	blt.w	800b40e <__kernel_rem_pio2+0x4d6>
 800b214:	4b12      	ldr	r3, [pc, #72]	@ (800b260 <__kernel_rem_pio2+0x328>)
 800b216:	461f      	mov	r7, r3
 800b218:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b21a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b21e:	9306      	str	r3, [sp, #24]
 800b220:	f04f 0a00 	mov.w	sl, #0
 800b224:	f04f 0b00 	mov.w	fp, #0
 800b228:	2600      	movs	r6, #0
 800b22a:	eba8 0504 	sub.w	r5, r8, r4
 800b22e:	e0e2      	b.n	800b3f6 <__kernel_rem_pio2+0x4be>
 800b230:	f04f 0902 	mov.w	r9, #2
 800b234:	e754      	b.n	800b0e0 <__kernel_rem_pio2+0x1a8>
 800b236:	bf00      	nop
	...
 800b244:	3ff00000 	.word	0x3ff00000
 800b248:	0800be50 	.word	0x0800be50
 800b24c:	40200000 	.word	0x40200000
 800b250:	3ff00000 	.word	0x3ff00000
 800b254:	3e700000 	.word	0x3e700000
 800b258:	41700000 	.word	0x41700000
 800b25c:	3fe00000 	.word	0x3fe00000
 800b260:	0800be10 	.word	0x0800be10
 800b264:	f854 3b04 	ldr.w	r3, [r4], #4
 800b268:	b945      	cbnz	r5, 800b27c <__kernel_rem_pio2+0x344>
 800b26a:	b123      	cbz	r3, 800b276 <__kernel_rem_pio2+0x33e>
 800b26c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b270:	f844 3c04 	str.w	r3, [r4, #-4]
 800b274:	2301      	movs	r3, #1
 800b276:	3201      	adds	r2, #1
 800b278:	461d      	mov	r5, r3
 800b27a:	e738      	b.n	800b0ee <__kernel_rem_pio2+0x1b6>
 800b27c:	1acb      	subs	r3, r1, r3
 800b27e:	e7f7      	b.n	800b270 <__kernel_rem_pio2+0x338>
 800b280:	f108 32ff 	add.w	r2, r8, #4294967295
 800b284:	ab0c      	add	r3, sp, #48	@ 0x30
 800b286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b28e:	a90c      	add	r1, sp, #48	@ 0x30
 800b290:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b294:	e739      	b.n	800b10a <__kernel_rem_pio2+0x1d2>
 800b296:	f108 32ff 	add.w	r2, r8, #4294967295
 800b29a:	ab0c      	add	r3, sp, #48	@ 0x30
 800b29c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b2a4:	e7f3      	b.n	800b28e <__kernel_rem_pio2+0x356>
 800b2a6:	a90c      	add	r1, sp, #48	@ 0x30
 800b2a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	430a      	orrs	r2, r1
 800b2b0:	e787      	b.n	800b1c2 <__kernel_rem_pio2+0x28a>
 800b2b2:	3401      	adds	r4, #1
 800b2b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	d0fa      	beq.n	800b2b2 <__kernel_rem_pio2+0x37a>
 800b2bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2be:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b2c2:	eb0d 0503 	add.w	r5, sp, r3
 800b2c6:	9b06      	ldr	r3, [sp, #24]
 800b2c8:	aa20      	add	r2, sp, #128	@ 0x80
 800b2ca:	4443      	add	r3, r8
 800b2cc:	f108 0701 	add.w	r7, r8, #1
 800b2d0:	3d98      	subs	r5, #152	@ 0x98
 800b2d2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b2d6:	4444      	add	r4, r8
 800b2d8:	42bc      	cmp	r4, r7
 800b2da:	da04      	bge.n	800b2e6 <__kernel_rem_pio2+0x3ae>
 800b2dc:	46a0      	mov	r8, r4
 800b2de:	e6a2      	b.n	800b026 <__kernel_rem_pio2+0xee>
 800b2e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2e2:	2401      	movs	r4, #1
 800b2e4:	e7e6      	b.n	800b2b4 <__kernel_rem_pio2+0x37c>
 800b2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b2ec:	f7f5 f91a 	bl	8000524 <__aeabi_i2d>
 800b2f0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b5b8 <__kernel_rem_pio2+0x680>
 800b2f4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b2f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b300:	46b2      	mov	sl, r6
 800b302:	f04f 0800 	mov.w	r8, #0
 800b306:	9b05      	ldr	r3, [sp, #20]
 800b308:	4598      	cmp	r8, r3
 800b30a:	dd05      	ble.n	800b318 <__kernel_rem_pio2+0x3e0>
 800b30c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b310:	3701      	adds	r7, #1
 800b312:	eca5 7b02 	vstmia	r5!, {d7}
 800b316:	e7df      	b.n	800b2d8 <__kernel_rem_pio2+0x3a0>
 800b318:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b31c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b320:	f7f5 f96a 	bl	80005f8 <__aeabi_dmul>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b32c:	f7f4 ffae 	bl	800028c <__adddf3>
 800b330:	f108 0801 	add.w	r8, r8, #1
 800b334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b338:	e7e5      	b.n	800b306 <__kernel_rem_pio2+0x3ce>
 800b33a:	f1cb 0000 	rsb	r0, fp, #0
 800b33e:	ec47 6b10 	vmov	d0, r6, r7
 800b342:	f000 f951 	bl	800b5e8 <scalbn>
 800b346:	ec55 4b10 	vmov	r4, r5, d0
 800b34a:	4b9d      	ldr	r3, [pc, #628]	@ (800b5c0 <__kernel_rem_pio2+0x688>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	4620      	mov	r0, r4
 800b350:	4629      	mov	r1, r5
 800b352:	f7f5 fbd7 	bl	8000b04 <__aeabi_dcmpge>
 800b356:	b300      	cbz	r0, 800b39a <__kernel_rem_pio2+0x462>
 800b358:	4b9a      	ldr	r3, [pc, #616]	@ (800b5c4 <__kernel_rem_pio2+0x68c>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	4620      	mov	r0, r4
 800b35e:	4629      	mov	r1, r5
 800b360:	f7f5 f94a 	bl	80005f8 <__aeabi_dmul>
 800b364:	f7f5 fbf8 	bl	8000b58 <__aeabi_d2iz>
 800b368:	4606      	mov	r6, r0
 800b36a:	f7f5 f8db 	bl	8000524 <__aeabi_i2d>
 800b36e:	4b94      	ldr	r3, [pc, #592]	@ (800b5c0 <__kernel_rem_pio2+0x688>)
 800b370:	2200      	movs	r2, #0
 800b372:	f7f5 f941 	bl	80005f8 <__aeabi_dmul>
 800b376:	460b      	mov	r3, r1
 800b378:	4602      	mov	r2, r0
 800b37a:	4629      	mov	r1, r5
 800b37c:	4620      	mov	r0, r4
 800b37e:	f7f4 ff83 	bl	8000288 <__aeabi_dsub>
 800b382:	f7f5 fbe9 	bl	8000b58 <__aeabi_d2iz>
 800b386:	ab0c      	add	r3, sp, #48	@ 0x30
 800b388:	f10b 0b18 	add.w	fp, fp, #24
 800b38c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b390:	f108 0801 	add.w	r8, r8, #1
 800b394:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b398:	e722      	b.n	800b1e0 <__kernel_rem_pio2+0x2a8>
 800b39a:	4620      	mov	r0, r4
 800b39c:	4629      	mov	r1, r5
 800b39e:	f7f5 fbdb 	bl	8000b58 <__aeabi_d2iz>
 800b3a2:	ab0c      	add	r3, sp, #48	@ 0x30
 800b3a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b3a8:	e71a      	b.n	800b1e0 <__kernel_rem_pio2+0x2a8>
 800b3aa:	ab0c      	add	r3, sp, #48	@ 0x30
 800b3ac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b3b0:	f7f5 f8b8 	bl	8000524 <__aeabi_i2d>
 800b3b4:	4622      	mov	r2, r4
 800b3b6:	462b      	mov	r3, r5
 800b3b8:	f7f5 f91e 	bl	80005f8 <__aeabi_dmul>
 800b3bc:	4652      	mov	r2, sl
 800b3be:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b3c2:	465b      	mov	r3, fp
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	4629      	mov	r1, r5
 800b3c8:	f7f5 f916 	bl	80005f8 <__aeabi_dmul>
 800b3cc:	3e01      	subs	r6, #1
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	460d      	mov	r5, r1
 800b3d2:	e718      	b.n	800b206 <__kernel_rem_pio2+0x2ce>
 800b3d4:	9906      	ldr	r1, [sp, #24]
 800b3d6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b3da:	9106      	str	r1, [sp, #24]
 800b3dc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b3e0:	f7f5 f90a 	bl	80005f8 <__aeabi_dmul>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	4659      	mov	r1, fp
 800b3ec:	f7f4 ff4e 	bl	800028c <__adddf3>
 800b3f0:	3601      	adds	r6, #1
 800b3f2:	4682      	mov	sl, r0
 800b3f4:	468b      	mov	fp, r1
 800b3f6:	9b00      	ldr	r3, [sp, #0]
 800b3f8:	429e      	cmp	r6, r3
 800b3fa:	dc01      	bgt.n	800b400 <__kernel_rem_pio2+0x4c8>
 800b3fc:	42b5      	cmp	r5, r6
 800b3fe:	dae9      	bge.n	800b3d4 <__kernel_rem_pio2+0x49c>
 800b400:	ab48      	add	r3, sp, #288	@ 0x120
 800b402:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b406:	e9c5 ab00 	strd	sl, fp, [r5]
 800b40a:	3c01      	subs	r4, #1
 800b40c:	e6ff      	b.n	800b20e <__kernel_rem_pio2+0x2d6>
 800b40e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b410:	2b02      	cmp	r3, #2
 800b412:	dc0b      	bgt.n	800b42c <__kernel_rem_pio2+0x4f4>
 800b414:	2b00      	cmp	r3, #0
 800b416:	dc39      	bgt.n	800b48c <__kernel_rem_pio2+0x554>
 800b418:	d05d      	beq.n	800b4d6 <__kernel_rem_pio2+0x59e>
 800b41a:	9b02      	ldr	r3, [sp, #8]
 800b41c:	f003 0007 	and.w	r0, r3, #7
 800b420:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b424:	ecbd 8b02 	vpop	{d8}
 800b428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b42e:	2b03      	cmp	r3, #3
 800b430:	d1f3      	bne.n	800b41a <__kernel_rem_pio2+0x4e2>
 800b432:	9b05      	ldr	r3, [sp, #20]
 800b434:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b438:	eb0d 0403 	add.w	r4, sp, r3
 800b43c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b440:	4625      	mov	r5, r4
 800b442:	46c2      	mov	sl, r8
 800b444:	f1ba 0f00 	cmp.w	sl, #0
 800b448:	f1a5 0508 	sub.w	r5, r5, #8
 800b44c:	dc6b      	bgt.n	800b526 <__kernel_rem_pio2+0x5ee>
 800b44e:	4645      	mov	r5, r8
 800b450:	2d01      	cmp	r5, #1
 800b452:	f1a4 0408 	sub.w	r4, r4, #8
 800b456:	f300 8087 	bgt.w	800b568 <__kernel_rem_pio2+0x630>
 800b45a:	9c05      	ldr	r4, [sp, #20]
 800b45c:	ab48      	add	r3, sp, #288	@ 0x120
 800b45e:	441c      	add	r4, r3
 800b460:	2000      	movs	r0, #0
 800b462:	2100      	movs	r1, #0
 800b464:	f1b8 0f01 	cmp.w	r8, #1
 800b468:	f300 809c 	bgt.w	800b5a4 <__kernel_rem_pio2+0x66c>
 800b46c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b470:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b474:	f1b9 0f00 	cmp.w	r9, #0
 800b478:	f040 80a6 	bne.w	800b5c8 <__kernel_rem_pio2+0x690>
 800b47c:	9b04      	ldr	r3, [sp, #16]
 800b47e:	e9c3 7800 	strd	r7, r8, [r3]
 800b482:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b486:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b48a:	e7c6      	b.n	800b41a <__kernel_rem_pio2+0x4e2>
 800b48c:	9d05      	ldr	r5, [sp, #20]
 800b48e:	ab48      	add	r3, sp, #288	@ 0x120
 800b490:	441d      	add	r5, r3
 800b492:	4644      	mov	r4, r8
 800b494:	2000      	movs	r0, #0
 800b496:	2100      	movs	r1, #0
 800b498:	2c00      	cmp	r4, #0
 800b49a:	da35      	bge.n	800b508 <__kernel_rem_pio2+0x5d0>
 800b49c:	f1b9 0f00 	cmp.w	r9, #0
 800b4a0:	d038      	beq.n	800b514 <__kernel_rem_pio2+0x5dc>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4a8:	9c04      	ldr	r4, [sp, #16]
 800b4aa:	e9c4 2300 	strd	r2, r3, [r4]
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b4b6:	f7f4 fee7 	bl	8000288 <__aeabi_dsub>
 800b4ba:	ad4a      	add	r5, sp, #296	@ 0x128
 800b4bc:	2401      	movs	r4, #1
 800b4be:	45a0      	cmp	r8, r4
 800b4c0:	da2b      	bge.n	800b51a <__kernel_rem_pio2+0x5e2>
 800b4c2:	f1b9 0f00 	cmp.w	r9, #0
 800b4c6:	d002      	beq.n	800b4ce <__kernel_rem_pio2+0x596>
 800b4c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	9b04      	ldr	r3, [sp, #16]
 800b4d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b4d4:	e7a1      	b.n	800b41a <__kernel_rem_pio2+0x4e2>
 800b4d6:	9c05      	ldr	r4, [sp, #20]
 800b4d8:	ab48      	add	r3, sp, #288	@ 0x120
 800b4da:	441c      	add	r4, r3
 800b4dc:	2000      	movs	r0, #0
 800b4de:	2100      	movs	r1, #0
 800b4e0:	f1b8 0f00 	cmp.w	r8, #0
 800b4e4:	da09      	bge.n	800b4fa <__kernel_rem_pio2+0x5c2>
 800b4e6:	f1b9 0f00 	cmp.w	r9, #0
 800b4ea:	d002      	beq.n	800b4f2 <__kernel_rem_pio2+0x5ba>
 800b4ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	9b04      	ldr	r3, [sp, #16]
 800b4f4:	e9c3 0100 	strd	r0, r1, [r3]
 800b4f8:	e78f      	b.n	800b41a <__kernel_rem_pio2+0x4e2>
 800b4fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b4fe:	f7f4 fec5 	bl	800028c <__adddf3>
 800b502:	f108 38ff 	add.w	r8, r8, #4294967295
 800b506:	e7eb      	b.n	800b4e0 <__kernel_rem_pio2+0x5a8>
 800b508:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b50c:	f7f4 febe 	bl	800028c <__adddf3>
 800b510:	3c01      	subs	r4, #1
 800b512:	e7c1      	b.n	800b498 <__kernel_rem_pio2+0x560>
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	e7c6      	b.n	800b4a8 <__kernel_rem_pio2+0x570>
 800b51a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b51e:	f7f4 feb5 	bl	800028c <__adddf3>
 800b522:	3401      	adds	r4, #1
 800b524:	e7cb      	b.n	800b4be <__kernel_rem_pio2+0x586>
 800b526:	ed95 7b00 	vldr	d7, [r5]
 800b52a:	ed8d 7b00 	vstr	d7, [sp]
 800b52e:	ed95 7b02 	vldr	d7, [r5, #8]
 800b532:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b536:	ec53 2b17 	vmov	r2, r3, d7
 800b53a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b53e:	f7f4 fea5 	bl	800028c <__adddf3>
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	4606      	mov	r6, r0
 800b548:	460f      	mov	r7, r1
 800b54a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b54e:	f7f4 fe9b 	bl	8000288 <__aeabi_dsub>
 800b552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b556:	f7f4 fe99 	bl	800028c <__adddf3>
 800b55a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b55e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b562:	e9c5 6700 	strd	r6, r7, [r5]
 800b566:	e76d      	b.n	800b444 <__kernel_rem_pio2+0x50c>
 800b568:	ed94 7b00 	vldr	d7, [r4]
 800b56c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b570:	ec51 0b17 	vmov	r0, r1, d7
 800b574:	4652      	mov	r2, sl
 800b576:	465b      	mov	r3, fp
 800b578:	ed8d 7b00 	vstr	d7, [sp]
 800b57c:	f7f4 fe86 	bl	800028c <__adddf3>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	4606      	mov	r6, r0
 800b586:	460f      	mov	r7, r1
 800b588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b58c:	f7f4 fe7c 	bl	8000288 <__aeabi_dsub>
 800b590:	4652      	mov	r2, sl
 800b592:	465b      	mov	r3, fp
 800b594:	f7f4 fe7a 	bl	800028c <__adddf3>
 800b598:	3d01      	subs	r5, #1
 800b59a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b59e:	e9c4 6700 	strd	r6, r7, [r4]
 800b5a2:	e755      	b.n	800b450 <__kernel_rem_pio2+0x518>
 800b5a4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b5a8:	f7f4 fe70 	bl	800028c <__adddf3>
 800b5ac:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5b0:	e758      	b.n	800b464 <__kernel_rem_pio2+0x52c>
 800b5b2:	bf00      	nop
 800b5b4:	f3af 8000 	nop.w
	...
 800b5c0:	41700000 	.word	0x41700000
 800b5c4:	3e700000 	.word	0x3e700000
 800b5c8:	9b04      	ldr	r3, [sp, #16]
 800b5ca:	9a04      	ldr	r2, [sp, #16]
 800b5cc:	601f      	str	r7, [r3, #0]
 800b5ce:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b5d2:	605c      	str	r4, [r3, #4]
 800b5d4:	609d      	str	r5, [r3, #8]
 800b5d6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b5da:	60d3      	str	r3, [r2, #12]
 800b5dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5e0:	6110      	str	r0, [r2, #16]
 800b5e2:	6153      	str	r3, [r2, #20]
 800b5e4:	e719      	b.n	800b41a <__kernel_rem_pio2+0x4e2>
 800b5e6:	bf00      	nop

0800b5e8 <scalbn>:
 800b5e8:	b570      	push	{r4, r5, r6, lr}
 800b5ea:	ec55 4b10 	vmov	r4, r5, d0
 800b5ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	462b      	mov	r3, r5
 800b5f6:	b991      	cbnz	r1, 800b61e <scalbn+0x36>
 800b5f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b5fc:	4323      	orrs	r3, r4
 800b5fe:	d03d      	beq.n	800b67c <scalbn+0x94>
 800b600:	4b35      	ldr	r3, [pc, #212]	@ (800b6d8 <scalbn+0xf0>)
 800b602:	4620      	mov	r0, r4
 800b604:	4629      	mov	r1, r5
 800b606:	2200      	movs	r2, #0
 800b608:	f7f4 fff6 	bl	80005f8 <__aeabi_dmul>
 800b60c:	4b33      	ldr	r3, [pc, #204]	@ (800b6dc <scalbn+0xf4>)
 800b60e:	429e      	cmp	r6, r3
 800b610:	4604      	mov	r4, r0
 800b612:	460d      	mov	r5, r1
 800b614:	da0f      	bge.n	800b636 <scalbn+0x4e>
 800b616:	a328      	add	r3, pc, #160	@ (adr r3, 800b6b8 <scalbn+0xd0>)
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	e01e      	b.n	800b65c <scalbn+0x74>
 800b61e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b622:	4291      	cmp	r1, r2
 800b624:	d10b      	bne.n	800b63e <scalbn+0x56>
 800b626:	4622      	mov	r2, r4
 800b628:	4620      	mov	r0, r4
 800b62a:	4629      	mov	r1, r5
 800b62c:	f7f4 fe2e 	bl	800028c <__adddf3>
 800b630:	4604      	mov	r4, r0
 800b632:	460d      	mov	r5, r1
 800b634:	e022      	b.n	800b67c <scalbn+0x94>
 800b636:	460b      	mov	r3, r1
 800b638:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b63c:	3936      	subs	r1, #54	@ 0x36
 800b63e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b642:	4296      	cmp	r6, r2
 800b644:	dd0d      	ble.n	800b662 <scalbn+0x7a>
 800b646:	2d00      	cmp	r5, #0
 800b648:	a11d      	add	r1, pc, #116	@ (adr r1, 800b6c0 <scalbn+0xd8>)
 800b64a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b64e:	da02      	bge.n	800b656 <scalbn+0x6e>
 800b650:	a11d      	add	r1, pc, #116	@ (adr r1, 800b6c8 <scalbn+0xe0>)
 800b652:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b656:	a31a      	add	r3, pc, #104	@ (adr r3, 800b6c0 <scalbn+0xd8>)
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	f7f4 ffcc 	bl	80005f8 <__aeabi_dmul>
 800b660:	e7e6      	b.n	800b630 <scalbn+0x48>
 800b662:	1872      	adds	r2, r6, r1
 800b664:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b668:	428a      	cmp	r2, r1
 800b66a:	dcec      	bgt.n	800b646 <scalbn+0x5e>
 800b66c:	2a00      	cmp	r2, #0
 800b66e:	dd08      	ble.n	800b682 <scalbn+0x9a>
 800b670:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b674:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b678:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b67c:	ec45 4b10 	vmov	d0, r4, r5
 800b680:	bd70      	pop	{r4, r5, r6, pc}
 800b682:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b686:	da08      	bge.n	800b69a <scalbn+0xb2>
 800b688:	2d00      	cmp	r5, #0
 800b68a:	a10b      	add	r1, pc, #44	@ (adr r1, 800b6b8 <scalbn+0xd0>)
 800b68c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b690:	dac1      	bge.n	800b616 <scalbn+0x2e>
 800b692:	a10f      	add	r1, pc, #60	@ (adr r1, 800b6d0 <scalbn+0xe8>)
 800b694:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b698:	e7bd      	b.n	800b616 <scalbn+0x2e>
 800b69a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b69e:	3236      	adds	r2, #54	@ 0x36
 800b6a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b6a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e0 <scalbn+0xf8>)
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	e7d4      	b.n	800b65c <scalbn+0x74>
 800b6b2:	bf00      	nop
 800b6b4:	f3af 8000 	nop.w
 800b6b8:	c2f8f359 	.word	0xc2f8f359
 800b6bc:	01a56e1f 	.word	0x01a56e1f
 800b6c0:	8800759c 	.word	0x8800759c
 800b6c4:	7e37e43c 	.word	0x7e37e43c
 800b6c8:	8800759c 	.word	0x8800759c
 800b6cc:	fe37e43c 	.word	0xfe37e43c
 800b6d0:	c2f8f359 	.word	0xc2f8f359
 800b6d4:	81a56e1f 	.word	0x81a56e1f
 800b6d8:	43500000 	.word	0x43500000
 800b6dc:	ffff3cb0 	.word	0xffff3cb0
 800b6e0:	3c900000 	.word	0x3c900000
 800b6e4:	00000000 	.word	0x00000000

0800b6e8 <floor>:
 800b6e8:	ec51 0b10 	vmov	r0, r1, d0
 800b6ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b6f8:	2e13      	cmp	r6, #19
 800b6fa:	460c      	mov	r4, r1
 800b6fc:	4605      	mov	r5, r0
 800b6fe:	4680      	mov	r8, r0
 800b700:	dc34      	bgt.n	800b76c <floor+0x84>
 800b702:	2e00      	cmp	r6, #0
 800b704:	da17      	bge.n	800b736 <floor+0x4e>
 800b706:	a332      	add	r3, pc, #200	@ (adr r3, 800b7d0 <floor+0xe8>)
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	f7f4 fdbe 	bl	800028c <__adddf3>
 800b710:	2200      	movs	r2, #0
 800b712:	2300      	movs	r3, #0
 800b714:	f7f5 fa00 	bl	8000b18 <__aeabi_dcmpgt>
 800b718:	b150      	cbz	r0, 800b730 <floor+0x48>
 800b71a:	2c00      	cmp	r4, #0
 800b71c:	da55      	bge.n	800b7ca <floor+0xe2>
 800b71e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b722:	432c      	orrs	r4, r5
 800b724:	2500      	movs	r5, #0
 800b726:	42ac      	cmp	r4, r5
 800b728:	4c2b      	ldr	r4, [pc, #172]	@ (800b7d8 <floor+0xf0>)
 800b72a:	bf08      	it	eq
 800b72c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b730:	4621      	mov	r1, r4
 800b732:	4628      	mov	r0, r5
 800b734:	e023      	b.n	800b77e <floor+0x96>
 800b736:	4f29      	ldr	r7, [pc, #164]	@ (800b7dc <floor+0xf4>)
 800b738:	4137      	asrs	r7, r6
 800b73a:	ea01 0307 	and.w	r3, r1, r7
 800b73e:	4303      	orrs	r3, r0
 800b740:	d01d      	beq.n	800b77e <floor+0x96>
 800b742:	a323      	add	r3, pc, #140	@ (adr r3, 800b7d0 <floor+0xe8>)
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	f7f4 fda0 	bl	800028c <__adddf3>
 800b74c:	2200      	movs	r2, #0
 800b74e:	2300      	movs	r3, #0
 800b750:	f7f5 f9e2 	bl	8000b18 <__aeabi_dcmpgt>
 800b754:	2800      	cmp	r0, #0
 800b756:	d0eb      	beq.n	800b730 <floor+0x48>
 800b758:	2c00      	cmp	r4, #0
 800b75a:	bfbe      	ittt	lt
 800b75c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b760:	4133      	asrlt	r3, r6
 800b762:	18e4      	addlt	r4, r4, r3
 800b764:	ea24 0407 	bic.w	r4, r4, r7
 800b768:	2500      	movs	r5, #0
 800b76a:	e7e1      	b.n	800b730 <floor+0x48>
 800b76c:	2e33      	cmp	r6, #51	@ 0x33
 800b76e:	dd0a      	ble.n	800b786 <floor+0x9e>
 800b770:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b774:	d103      	bne.n	800b77e <floor+0x96>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	f7f4 fd87 	bl	800028c <__adddf3>
 800b77e:	ec41 0b10 	vmov	d0, r0, r1
 800b782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b786:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b78a:	f04f 37ff 	mov.w	r7, #4294967295
 800b78e:	40df      	lsrs	r7, r3
 800b790:	4207      	tst	r7, r0
 800b792:	d0f4      	beq.n	800b77e <floor+0x96>
 800b794:	a30e      	add	r3, pc, #56	@ (adr r3, 800b7d0 <floor+0xe8>)
 800b796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79a:	f7f4 fd77 	bl	800028c <__adddf3>
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	f7f5 f9b9 	bl	8000b18 <__aeabi_dcmpgt>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d0c2      	beq.n	800b730 <floor+0x48>
 800b7aa:	2c00      	cmp	r4, #0
 800b7ac:	da0a      	bge.n	800b7c4 <floor+0xdc>
 800b7ae:	2e14      	cmp	r6, #20
 800b7b0:	d101      	bne.n	800b7b6 <floor+0xce>
 800b7b2:	3401      	adds	r4, #1
 800b7b4:	e006      	b.n	800b7c4 <floor+0xdc>
 800b7b6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	40b3      	lsls	r3, r6
 800b7be:	441d      	add	r5, r3
 800b7c0:	4545      	cmp	r5, r8
 800b7c2:	d3f6      	bcc.n	800b7b2 <floor+0xca>
 800b7c4:	ea25 0507 	bic.w	r5, r5, r7
 800b7c8:	e7b2      	b.n	800b730 <floor+0x48>
 800b7ca:	2500      	movs	r5, #0
 800b7cc:	462c      	mov	r4, r5
 800b7ce:	e7af      	b.n	800b730 <floor+0x48>
 800b7d0:	8800759c 	.word	0x8800759c
 800b7d4:	7e37e43c 	.word	0x7e37e43c
 800b7d8:	bff00000 	.word	0xbff00000
 800b7dc:	000fffff 	.word	0x000fffff

0800b7e0 <_init>:
 800b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e2:	bf00      	nop
 800b7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7e6:	bc08      	pop	{r3}
 800b7e8:	469e      	mov	lr, r3
 800b7ea:	4770      	bx	lr

0800b7ec <_fini>:
 800b7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ee:	bf00      	nop
 800b7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f2:	bc08      	pop	{r3}
 800b7f4:	469e      	mov	lr, r3
 800b7f6:	4770      	bx	lr
